
usb_cdc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e568  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800e678  0800e678  0000f678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb08  0800eb08  00010354  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eb08  0800eb08  0000fb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb10  0800eb10  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb10  0800eb10  0000fb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb14  0800eb14  0000fb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000354  20000000  0800eb18  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d8  20000354  0800ee6c  00010354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000172c  0800ee6c  0001072c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121e5  00000000  00000000  0001037d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003534  00000000  00000000  00022562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00025a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb4  00000000  00000000  00026b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b520  00000000  00000000  0002783c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a56  00000000  00000000  00042d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6df  00000000  00000000  000587b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7e91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d18  00000000  00000000  000e7ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000edbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e660 	.word	0x0800e660

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	0800e660 	.word	0x0800e660

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <Machine_init>:
#include "Control_Functions.h"
#include "shared_variables.h"


//machine_init get the system real dimention in CM to use in macine theta
void Machine_init(float _d, float _e, float _f, float _g) {
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
    d = _d; e = _e; f = _f; g = _g;
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <Machine_init+0x30>)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <Machine_init+0x34>)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <Machine_init+0x38>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	4a06      	ldr	r2, [pc, #24]	@ (8001204 <Machine_init+0x3c>)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	6013      	str	r3, [r2, #0]
}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000008 	.word	0x20000008
 8001204:	2000000c 	.word	0x2000000c

08001208 <Machine_theta>:

/* Machine_theta : converts desired platform tilt (nx, ny)
 into the servo angle required for each leg to achieve that tilt.*/
float Machine_theta(int leg, float hz, float nx, float ny) {
 8001208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800120c:	b095      	sub	sp, #84	@ 0x54
 800120e:	af00      	add	r7, sp, #0
 8001210:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001212:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001214:	627a      	str	r2, [r7, #36]	@ 0x24
 8001216:	623b      	str	r3, [r7, #32]
	float nmag, nz;
	float x=0, y=0, z=0, mag, angle=0;
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800121e:	f04f 0300 	mov.w	r3, #0
 8001222:	647b      	str	r3, [r7, #68]	@ 0x44
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	643b      	str	r3, [r7, #64]	@ 0x40
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // unit normal vector
    nmag = sqrt(nx*nx + ny*ny + 1.0);
 8001230:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001234:	f7ff fda6 	bl	8000d84 <__aeabi_fmul>
 8001238:	4603      	mov	r3, r0
 800123a:	461c      	mov	r4, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	6a38      	ldr	r0, [r7, #32]
 8001240:	f7ff fda0 	bl	8000d84 <__aeabi_fmul>
 8001244:	4603      	mov	r3, r0
 8001246:	4619      	mov	r1, r3
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff fc93 	bl	8000b74 <__addsf3>
 800124e:	4603      	mov	r3, r0
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f8e9 	bl	8000428 <__aeabi_f2d>
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <Machine_theta+0xbc>)
 800125c:	f7fe ff86 	bl	800016c <__adddf3>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f00c fe68 	bl	800df3c <sqrt>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fc28 	bl	8000ac8 <__aeabi_d2f>
 8001278:	4603      	mov	r3, r0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    nx /= nmag;
 800127c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800127e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001280:	f7ff fe34 	bl	8000eec <__aeabi_fdiv>
 8001284:	4603      	mov	r3, r0
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
    ny /= nmag;
 8001288:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800128a:	6a38      	ldr	r0, [r7, #32]
 800128c:	f7ff fe2e 	bl	8000eec <__aeabi_fdiv>
 8001290:	4603      	mov	r3, r0
 8001292:	623b      	str	r3, [r7, #32]
    nz = 1.0 / nmag;
 8001294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001296:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800129a:	f7ff fe27 	bl	8000eec <__aeabi_fdiv>
 800129e:	4603      	mov	r3, r0
 80012a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (leg) {
 80012a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	f000 8349 	beq.w	800193c <Machine_theta+0x734>
 80012aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	f300 84b1 	bgt.w	8001c14 <Machine_theta+0xa0c>
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <Machine_theta+0xc0>
 80012b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	f000 81be 	beq.w	800163c <Machine_theta+0x434>
 80012c0:	f000 bca8 	b.w	8001c14 <Machine_theta+0xa0c>
 80012c4:	3ff00000 	.word	0x3ff00000
        case A:  // Leg A
            y = d + (e/2.0) * (1.0 - ((nx*nx) + 3.0*nz*nz + 3.0*nz) /
 80012c8:	4bc3      	ldr	r3, [pc, #780]	@ (80015d8 <Machine_theta+0x3d0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f8ab 	bl	8000428 <__aeabi_f2d>
 80012d2:	4682      	mov	sl, r0
 80012d4:	468b      	mov	fp, r1
 80012d6:	4bc1      	ldr	r3, [pc, #772]	@ (80015dc <Machine_theta+0x3d4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f8a4 	bl	8000428 <__aeabi_f2d>
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e8:	f7ff fa20 	bl	800072c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80012f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012f8:	f7ff fd44 	bl	8000d84 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f892 	bl	8000428 <__aeabi_f2d>
 8001304:	4604      	mov	r4, r0
 8001306:	460d      	mov	r5, r1
 8001308:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800130a:	f7ff f88d 	bl	8000428 <__aeabi_f2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4bb3      	ldr	r3, [pc, #716]	@ (80015e0 <Machine_theta+0x3d8>)
 8001314:	f7ff f8e0 	bl	80004d8 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4690      	mov	r8, r2
 800131e:	4699      	mov	r9, r3
 8001320:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001322:	f7ff f881 	bl	8000428 <__aeabi_f2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4640      	mov	r0, r8
 800132c:	4649      	mov	r1, r9
 800132e:	f7ff f8d3 	bl	80004d8 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4620      	mov	r0, r4
 8001338:	4629      	mov	r1, r5
 800133a:	f7fe ff17 	bl	800016c <__adddf3>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4614      	mov	r4, r2
 8001344:	461d      	mov	r5, r3
 8001346:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001348:	f7ff f86e 	bl	8000428 <__aeabi_f2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4ba3      	ldr	r3, [pc, #652]	@ (80015e0 <Machine_theta+0x3d8>)
 8001352:	f7ff f8c1 	bl	80004d8 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff05 	bl	800016c <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	e9c7 2304 	strd	r2, r3, [r7, #16]
                (nz + 1.0 - (nx*nx) + ((nx*nx*nx*nx) - 3.0*nx*nx*ny*ny) /
 800136a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800136c:	f7ff f85c 	bl	8000428 <__aeabi_f2d>
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b9b      	ldr	r3, [pc, #620]	@ (80015e4 <Machine_theta+0x3dc>)
 8001376:	f7fe fef9 	bl	800016c <__adddf3>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4614      	mov	r4, r2
 8001380:	461d      	mov	r5, r3
 8001382:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001384:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001386:	f7ff fcfd 	bl	8000d84 <__aeabi_fmul>
 800138a:	4603      	mov	r3, r0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f84b 	bl	8000428 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7fe fee5 	bl	8000168 <__aeabi_dsub>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80013a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013aa:	f7ff fceb 	bl	8000d84 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fce6 	bl	8000d84 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fce1 	bl	8000d84 <__aeabi_fmul>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f82f 	bl	8000428 <__aeabi_f2d>
 80013ca:	4680      	mov	r8, r0
 80013cc:	4689      	mov	r9, r1
 80013ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013d0:	f7ff f82a 	bl	8000428 <__aeabi_f2d>
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b81      	ldr	r3, [pc, #516]	@ (80015e0 <Machine_theta+0x3d8>)
 80013da:	f7ff f87d 	bl	80004d8 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4614      	mov	r4, r2
 80013e4:	461d      	mov	r5, r3
 80013e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80013e8:	f7ff f81e 	bl	8000428 <__aeabi_f2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f7ff f870 	bl	80004d8 <__aeabi_dmul>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4614      	mov	r4, r2
 80013fe:	461d      	mov	r5, r3
 8001400:	6a38      	ldr	r0, [r7, #32]
 8001402:	f7ff f811 	bl	8000428 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4620      	mov	r0, r4
 800140c:	4629      	mov	r1, r5
 800140e:	f7ff f863 	bl	80004d8 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	6a38      	ldr	r0, [r7, #32]
 800141c:	f7ff f804 	bl	8000428 <__aeabi_f2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7ff f856 	bl	80004d8 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4640      	mov	r0, r8
 8001432:	4649      	mov	r1, r9
 8001434:	f7fe fe98 	bl	8000168 <__aeabi_dsub>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	e9c7 2300 	strd	r2, r3, [r7]
                ((nz+1.0) * (nz+1.0 - nx*nx))));
 8001440:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001442:	f7fe fff1 	bl	8000428 <__aeabi_f2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b66      	ldr	r3, [pc, #408]	@ (80015e4 <Machine_theta+0x3dc>)
 800144c:	f7fe fe8e 	bl	800016c <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4690      	mov	r8, r2
 8001456:	4699      	mov	r9, r3
 8001458:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800145a:	f7fe ffe5 	bl	8000428 <__aeabi_f2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b60      	ldr	r3, [pc, #384]	@ (80015e4 <Machine_theta+0x3dc>)
 8001464:	f7fe fe82 	bl	800016c <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4614      	mov	r4, r2
 800146e:	461d      	mov	r5, r3
 8001470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001472:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001474:	f7ff fc86 	bl	8000d84 <__aeabi_fmul>
 8001478:	4603      	mov	r3, r0
 800147a:	4618      	mov	r0, r3
 800147c:	f7fe ffd4 	bl	8000428 <__aeabi_f2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4620      	mov	r0, r4
 8001486:	4629      	mov	r1, r5
 8001488:	f7fe fe6e 	bl	8000168 <__aeabi_dsub>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4640      	mov	r0, r8
 8001492:	4649      	mov	r1, r9
 8001494:	f7ff f820 	bl	80004d8 <__aeabi_dmul>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
                (nz + 1.0 - (nx*nx) + ((nx*nx*nx*nx) - 3.0*nx*nx*ny*ny) /
 800149c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a0:	f7ff f944 	bl	800072c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014ac:	f7fe fe5e 	bl	800016c <__adddf3>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
            y = d + (e/2.0) * (1.0 - ((nx*nx) + 3.0*nz*nz + 3.0*nz) /
 80014b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014b8:	f7ff f938 	bl	800072c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	f04f 0000 	mov.w	r0, #0
 80014c4:	4947      	ldr	r1, [pc, #284]	@ (80015e4 <Machine_theta+0x3dc>)
 80014c6:	f7fe fe4f 	bl	8000168 <__aeabi_dsub>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d2:	f7ff f801 	bl	80004d8 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4650      	mov	r0, sl
 80014dc:	4659      	mov	r1, fp
 80014de:	f7fe fe45 	bl	800016c <__adddf3>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff faed 	bl	8000ac8 <__aeabi_d2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	647b      	str	r3, [r7, #68]	@ 0x44
            z = hz + e*ny;
 80014f2:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <Machine_theta+0x3d4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a39      	ldr	r1, [r7, #32]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fc43 	bl	8000d84 <__aeabi_fmul>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001504:	f7ff fb36 	bl	8000b74 <__addsf3>
 8001508:	4603      	mov	r3, r0
 800150a:	643b      	str	r3, [r7, #64]	@ 0x40
            mag = sqrt(y*y + z*z);
 800150c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800150e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001510:	f7ff fc38 	bl	8000d84 <__aeabi_fmul>
 8001514:	4603      	mov	r3, r0
 8001516:	461c      	mov	r4, r3
 8001518:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800151a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800151c:	f7ff fc32 	bl	8000d84 <__aeabi_fmul>
 8001520:	4603      	mov	r3, r0
 8001522:	4619      	mov	r1, r3
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff fb25 	bl	8000b74 <__addsf3>
 800152a:	4603      	mov	r3, r0
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff7b 	bl	8000428 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f00c fcff 	bl	800df3c <sqrt>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fabf 	bl	8000ac8 <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	637b      	str	r3, [r7, #52]	@ 0x34
            angle = acos(y/mag) + acos((mag*mag + f*f - g*g)/(2.0*mag*f));
 800154e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001550:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001552:	f7ff fccb 	bl	8000eec <__aeabi_fdiv>
 8001556:	4603      	mov	r3, r0
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ff65 	bl	8000428 <__aeabi_f2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f00c fcc1 	bl	800deec <acos>
 800156a:	4604      	mov	r4, r0
 800156c:	460d      	mov	r5, r1
 800156e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001570:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001572:	f7ff fc07 	bl	8000d84 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	461e      	mov	r6, r3
 800157a:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <Machine_theta+0x3e0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1a      	ldr	r2, [pc, #104]	@ (80015e8 <Machine_theta+0x3e0>)
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fbfd 	bl	8000d84 <__aeabi_fmul>
 800158a:	4603      	mov	r3, r0
 800158c:	4619      	mov	r1, r3
 800158e:	4630      	mov	r0, r6
 8001590:	f7ff faf0 	bl	8000b74 <__addsf3>
 8001594:	4603      	mov	r3, r0
 8001596:	461e      	mov	r6, r3
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <Machine_theta+0x3e4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a13      	ldr	r2, [pc, #76]	@ (80015ec <Machine_theta+0x3e4>)
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fbee 	bl	8000d84 <__aeabi_fmul>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4630      	mov	r0, r6
 80015ae:	f7ff fadf 	bl	8000b70 <__aeabi_fsub>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff37 	bl	8000428 <__aeabi_f2d>
 80015ba:	4680      	mov	r8, r0
 80015bc:	4689      	mov	r9, r1
 80015be:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80015c0:	f7fe ff32 	bl	8000428 <__aeabi_f2d>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	f7fe fdd0 	bl	800016c <__adddf3>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4692      	mov	sl, r2
 80015d2:	469b      	mov	fp, r3
 80015d4:	e00c      	b.n	80015f0 <Machine_theta+0x3e8>
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000004 	.word	0x20000004
 80015e0:	40080000 	.word	0x40080000
 80015e4:	3ff00000 	.word	0x3ff00000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	2000000c 	.word	0x2000000c
 80015f0:	4bcd      	ldr	r3, [pc, #820]	@ (8001928 <Machine_theta+0x720>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ff17 	bl	8000428 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4650      	mov	r0, sl
 8001600:	4659      	mov	r1, fp
 8001602:	f7fe ff69 	bl	80004d8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4640      	mov	r0, r8
 800160c:	4649      	mov	r1, r9
 800160e:	f7ff f88d 	bl	800072c <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f00c fc67 	bl	800deec <acos>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7fe fda1 	bl	800016c <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fa49 	bl	8000ac8 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 800163a:	e2eb      	b.n	8001c14 <Machine_theta+0xa0c>

        case B:  // Leg B
            x = (sqrt(3.0)/2.0) * ( e*(1.0 - (nx*nx + sqrt(3.0)*nx*ny)/(nz+1.0)) - d );
 800163c:	4bbb      	ldr	r3, [pc, #748]	@ (800192c <Machine_theta+0x724>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fef1 	bl	8000428 <__aeabi_f2d>
 8001646:	4604      	mov	r4, r0
 8001648:	460d      	mov	r5, r1
 800164a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800164c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800164e:	f7ff fb99 	bl	8000d84 <__aeabi_fmul>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fee7 	bl	8000428 <__aeabi_f2d>
 800165a:	4680      	mov	r8, r0
 800165c:	4689      	mov	r9, r1
 800165e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001660:	f7fe fee2 	bl	8000428 <__aeabi_f2d>
 8001664:	a3ac      	add	r3, pc, #688	@ (adr r3, 8001918 <Machine_theta+0x710>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe ff35 	bl	80004d8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4692      	mov	sl, r2
 8001674:	469b      	mov	fp, r3
 8001676:	6a38      	ldr	r0, [r7, #32]
 8001678:	f7fe fed6 	bl	8000428 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4650      	mov	r0, sl
 8001682:	4659      	mov	r1, fp
 8001684:	f7fe ff28 	bl	80004d8 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7fe fd6c 	bl	800016c <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4690      	mov	r8, r2
 800169a:	4699      	mov	r9, r3
 800169c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800169e:	f7fe fec3 	bl	8000428 <__aeabi_f2d>
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4ba2      	ldr	r3, [pc, #648]	@ (8001930 <Machine_theta+0x728>)
 80016a8:	f7fe fd60 	bl	800016c <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4640      	mov	r0, r8
 80016b2:	4649      	mov	r1, r9
 80016b4:	f7ff f83a 	bl	800072c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	f04f 0000 	mov.w	r0, #0
 80016c0:	499b      	ldr	r1, [pc, #620]	@ (8001930 <Machine_theta+0x728>)
 80016c2:	f7fe fd51 	bl	8000168 <__aeabi_dsub>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff03 	bl	80004d8 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	4b96      	ldr	r3, [pc, #600]	@ (8001934 <Machine_theta+0x72c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fea2 	bl	8000428 <__aeabi_f2d>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4620      	mov	r0, r4
 80016ea:	4629      	mov	r1, r5
 80016ec:	f7fe fd3c 	bl	8000168 <__aeabi_dsub>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	a389      	add	r3, pc, #548	@ (adr r3, 8001920 <Machine_theta+0x718>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe feeb 	bl	80004d8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff f9dd 	bl	8000ac8 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	64bb      	str	r3, [r7, #72]	@ 0x48
            y = x / sqrt(3.0);
 8001712:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001714:	f7fe fe88 	bl	8000428 <__aeabi_f2d>
 8001718:	a37f      	add	r3, pc, #508	@ (adr r3, 8001918 <Machine_theta+0x710>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7ff f805 	bl	800072c <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f9cd 	bl	8000ac8 <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	647b      	str	r3, [r7, #68]	@ 0x44
            z = hz - (e/2.0) * (sqrt(3.0)*nx + ny);
 8001732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001734:	f7fe fe78 	bl	8000428 <__aeabi_f2d>
 8001738:	4604      	mov	r4, r0
 800173a:	460d      	mov	r5, r1
 800173c:	4b7b      	ldr	r3, [pc, #492]	@ (800192c <Machine_theta+0x724>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fe71 	bl	8000428 <__aeabi_f2d>
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800174e:	f7fe ffed 	bl	800072c <__aeabi_ddiv>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4690      	mov	r8, r2
 8001758:	4699      	mov	r9, r3
 800175a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800175c:	f7fe fe64 	bl	8000428 <__aeabi_f2d>
 8001760:	a36d      	add	r3, pc, #436	@ (adr r3, 8001918 <Machine_theta+0x710>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe feb7 	bl	80004d8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4692      	mov	sl, r2
 8001770:	469b      	mov	fp, r3
 8001772:	6a38      	ldr	r0, [r7, #32]
 8001774:	f7fe fe58 	bl	8000428 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4650      	mov	r0, sl
 800177e:	4659      	mov	r1, fp
 8001780:	f7fe fcf4 	bl	800016c <__adddf3>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4640      	mov	r0, r8
 800178a:	4649      	mov	r1, r9
 800178c:	f7fe fea4 	bl	80004d8 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7fe fce6 	bl	8000168 <__aeabi_dsub>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff f990 	bl	8000ac8 <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	643b      	str	r3, [r7, #64]	@ 0x40
            mag = sqrt(x*x + y*y + z*z);
 80017ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80017ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80017b0:	f7ff fae8 	bl	8000d84 <__aeabi_fmul>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80017ba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80017bc:	f7ff fae2 	bl	8000d84 <__aeabi_fmul>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4619      	mov	r1, r3
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff f9d5 	bl	8000b74 <__addsf3>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461c      	mov	r4, r3
 80017ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80017d0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80017d2:	f7ff fad7 	bl	8000d84 <__aeabi_fmul>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4619      	mov	r1, r3
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff f9ca 	bl	8000b74 <__addsf3>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe20 	bl	8000428 <__aeabi_f2d>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f00c fba4 	bl	800df3c <sqrt>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f964 	bl	8000ac8 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
            angle = acos((sqrt(3.0)*x + y)/(-2.0*mag)) +
 8001804:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001806:	f7fe fe0f 	bl	8000428 <__aeabi_f2d>
 800180a:	a343      	add	r3, pc, #268	@ (adr r3, 8001918 <Machine_theta+0x710>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fe62 	bl	80004d8 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4614      	mov	r4, r2
 800181a:	461d      	mov	r5, r3
 800181c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800181e:	f7fe fe03 	bl	8000428 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fc9f 	bl	800016c <__adddf3>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4614      	mov	r4, r2
 8001834:	461d      	mov	r5, r3
 8001836:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001838:	f7fe fdf6 	bl	8000428 <__aeabi_f2d>
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001844:	f7fe fe48 	bl	80004d8 <__aeabi_dmul>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4620      	mov	r0, r4
 800184e:	4629      	mov	r1, r5
 8001850:	f7fe ff6c 	bl	800072c <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f00c fb46 	bl	800deec <acos>
 8001860:	4604      	mov	r4, r0
 8001862:	460d      	mov	r5, r1
                    acos((mag*mag + f*f - g*g)/(2.0*mag*f));
 8001864:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001866:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001868:	f7ff fa8c 	bl	8000d84 <__aeabi_fmul>
 800186c:	4603      	mov	r3, r0
 800186e:	461e      	mov	r6, r3
 8001870:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <Machine_theta+0x720>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2c      	ldr	r2, [pc, #176]	@ (8001928 <Machine_theta+0x720>)
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fa82 	bl	8000d84 <__aeabi_fmul>
 8001880:	4603      	mov	r3, r0
 8001882:	4619      	mov	r1, r3
 8001884:	4630      	mov	r0, r6
 8001886:	f7ff f975 	bl	8000b74 <__addsf3>
 800188a:	4603      	mov	r3, r0
 800188c:	461e      	mov	r6, r3
 800188e:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <Machine_theta+0x730>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a29      	ldr	r2, [pc, #164]	@ (8001938 <Machine_theta+0x730>)
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fa73 	bl	8000d84 <__aeabi_fmul>
 800189e:	4603      	mov	r3, r0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4630      	mov	r0, r6
 80018a4:	f7ff f964 	bl	8000b70 <__aeabi_fsub>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fdbc 	bl	8000428 <__aeabi_f2d>
 80018b0:	4680      	mov	r8, r0
 80018b2:	4689      	mov	r9, r1
 80018b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80018b6:	f7fe fdb7 	bl	8000428 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	f7fe fc55 	bl	800016c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4692      	mov	sl, r2
 80018c8:	469b      	mov	fp, r3
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <Machine_theta+0x720>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdaa 	bl	8000428 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4650      	mov	r0, sl
 80018da:	4659      	mov	r1, fp
 80018dc:	f7fe fdfc 	bl	80004d8 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4640      	mov	r0, r8
 80018e6:	4649      	mov	r1, r9
 80018e8:	f7fe ff20 	bl	800072c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f00c fafa 	bl	800deec <acos>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
            angle = acos((sqrt(3.0)*x + y)/(-2.0*mag)) +
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe fc34 	bl	800016c <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f8dc 	bl	8000ac8 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 8001914:	e17e      	b.n	8001c14 <Machine_theta+0xa0c>
 8001916:	bf00      	nop
 8001918:	e8584caa 	.word	0xe8584caa
 800191c:	3ffbb67a 	.word	0x3ffbb67a
 8001920:	e8584caa 	.word	0xe8584caa
 8001924:	3febb67a 	.word	0x3febb67a
 8001928:	20000008 	.word	0x20000008
 800192c:	20000004 	.word	0x20000004
 8001930:	3ff00000 	.word	0x3ff00000
 8001934:	20000000 	.word	0x20000000
 8001938:	2000000c 	.word	0x2000000c

        case C:  // Leg C
            x = (sqrt(3.0)/2.0) * ( d - e*(1.0 - (nx*nx - sqrt(3.0)*nx*ny)/(nz+1.0)) );
 800193c:	4bc6      	ldr	r3, [pc, #792]	@ (8001c58 <Machine_theta+0xa50>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fd71 	bl	8000428 <__aeabi_f2d>
 8001946:	4604      	mov	r4, r0
 8001948:	460d      	mov	r5, r1
 800194a:	4bc4      	ldr	r3, [pc, #784]	@ (8001c5c <Machine_theta+0xa54>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7fe fd6a 	bl	8000428 <__aeabi_f2d>
 8001954:	4680      	mov	r8, r0
 8001956:	4689      	mov	r9, r1
 8001958:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800195a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800195c:	f7ff fa12 	bl	8000d84 <__aeabi_fmul>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fd60 	bl	8000428 <__aeabi_f2d>
 8001968:	4682      	mov	sl, r0
 800196a:	468b      	mov	fp, r1
 800196c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800196e:	f7fe fd5b 	bl	8000428 <__aeabi_f2d>
 8001972:	a3b3      	add	r3, pc, #716	@ (adr r3, 8001c40 <Machine_theta+0xa38>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fdae 	bl	80004d8 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001984:	6a38      	ldr	r0, [r7, #32]
 8001986:	f7fe fd4f 	bl	8000428 <__aeabi_f2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001992:	f7fe fda1 	bl	80004d8 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4650      	mov	r0, sl
 800199c:	4659      	mov	r1, fp
 800199e:	f7fe fbe3 	bl	8000168 <__aeabi_dsub>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4692      	mov	sl, r2
 80019a8:	469b      	mov	fp, r3
 80019aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019ac:	f7fe fd3c 	bl	8000428 <__aeabi_f2d>
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4baa      	ldr	r3, [pc, #680]	@ (8001c60 <Machine_theta+0xa58>)
 80019b6:	f7fe fbd9 	bl	800016c <__adddf3>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4650      	mov	r0, sl
 80019c0:	4659      	mov	r1, fp
 80019c2:	f7fe feb3 	bl	800072c <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	49a4      	ldr	r1, [pc, #656]	@ (8001c60 <Machine_theta+0xa58>)
 80019d0:	f7fe fbca 	bl	8000168 <__aeabi_dsub>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4640      	mov	r0, r8
 80019da:	4649      	mov	r1, r9
 80019dc:	f7fe fd7c 	bl	80004d8 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fbbe 	bl	8000168 <__aeabi_dsub>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	a394      	add	r3, pc, #592	@ (adr r3, 8001c48 <Machine_theta+0xa40>)
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fd6d 	bl	80004d8 <__aeabi_dmul>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f85f 	bl	8000ac8 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
            y = -x / sqrt(3.0);
 8001a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a10:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd07 	bl	8000428 <__aeabi_f2d>
 8001a1a:	a389      	add	r3, pc, #548	@ (adr r3, 8001c40 <Machine_theta+0xa38>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fe84 	bl	800072c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f84c 	bl	8000ac8 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	647b      	str	r3, [r7, #68]	@ 0x44
            z = hz + (e/2.0) * (sqrt(3.0)*nx - ny);
 8001a34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a36:	f7fe fcf7 	bl	8000428 <__aeabi_f2d>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	4b87      	ldr	r3, [pc, #540]	@ (8001c5c <Machine_theta+0xa54>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fcf0 	bl	8000428 <__aeabi_f2d>
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a50:	f7fe fe6c 	bl	800072c <__aeabi_ddiv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4690      	mov	r8, r2
 8001a5a:	4699      	mov	r9, r3
 8001a5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a5e:	f7fe fce3 	bl	8000428 <__aeabi_f2d>
 8001a62:	a377      	add	r3, pc, #476	@ (adr r3, 8001c40 <Machine_theta+0xa38>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fd36 	bl	80004d8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4692      	mov	sl, r2
 8001a72:	469b      	mov	fp, r3
 8001a74:	6a38      	ldr	r0, [r7, #32]
 8001a76:	f7fe fcd7 	bl	8000428 <__aeabi_f2d>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4650      	mov	r0, sl
 8001a80:	4659      	mov	r1, fp
 8001a82:	f7fe fb71 	bl	8000168 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f7fe fd23 	bl	80004d8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4620      	mov	r0, r4
 8001a98:	4629      	mov	r1, r5
 8001a9a:	f7fe fb67 	bl	800016c <__adddf3>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f80f 	bl	8000ac8 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	643b      	str	r3, [r7, #64]	@ 0x40
            mag = sqrt(x*x + y*y + z*z);
 8001aae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ab0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001ab2:	f7ff f967 	bl	8000d84 <__aeabi_fmul>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	461c      	mov	r4, r3
 8001aba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001abc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001abe:	f7ff f961 	bl	8000d84 <__aeabi_fmul>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f7ff f854 	bl	8000b74 <__addsf3>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461c      	mov	r4, r3
 8001ad0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ad2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001ad4:	f7ff f956 	bl	8000d84 <__aeabi_fmul>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4620      	mov	r0, r4
 8001ade:	f7ff f849 	bl	8000b74 <__addsf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fc9f 	bl	8000428 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f00c fa23 	bl	800df3c <sqrt>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe ffe3 	bl	8000ac8 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	637b      	str	r3, [r7, #52]	@ 0x34
            angle = acos((sqrt(3.0)*x - y)/(2.0*mag)) +
 8001b06:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001b08:	f7fe fc8e 	bl	8000428 <__aeabi_f2d>
 8001b0c:	a34c      	add	r3, pc, #304	@ (adr r3, 8001c40 <Machine_theta+0xa38>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fce1 	bl	80004d8 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4614      	mov	r4, r2
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b20:	f7fe fc82 	bl	8000428 <__aeabi_f2d>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4620      	mov	r0, r4
 8001b2a:	4629      	mov	r1, r5
 8001b2c:	f7fe fb1c 	bl	8000168 <__aeabi_dsub>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4614      	mov	r4, r2
 8001b36:	461d      	mov	r5, r3
 8001b38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b3a:	f7fe fc75 	bl	8000428 <__aeabi_f2d>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	f7fe fb13 	bl	800016c <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	4629      	mov	r1, r5
 8001b4e:	f7fe fded 	bl	800072c <__aeabi_ddiv>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f00c f9c7 	bl	800deec <acos>
 8001b5e:	4604      	mov	r4, r0
 8001b60:	460d      	mov	r5, r1
                    acos((mag*mag + f*f - g*g)/(2.0*mag*f));
 8001b62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b64:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b66:	f7ff f90d 	bl	8000d84 <__aeabi_fmul>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461e      	mov	r6, r3
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <Machine_theta+0xa5c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a3c      	ldr	r2, [pc, #240]	@ (8001c64 <Machine_theta+0xa5c>)
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f903 	bl	8000d84 <__aeabi_fmul>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4630      	mov	r0, r6
 8001b84:	f7fe fff6 	bl	8000b74 <__addsf3>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461e      	mov	r6, r3
 8001b8c:	4b36      	ldr	r3, [pc, #216]	@ (8001c68 <Machine_theta+0xa60>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a35      	ldr	r2, [pc, #212]	@ (8001c68 <Machine_theta+0xa60>)
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f8f4 	bl	8000d84 <__aeabi_fmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4630      	mov	r0, r6
 8001ba2:	f7fe ffe5 	bl	8000b70 <__aeabi_fsub>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fc3d 	bl	8000428 <__aeabi_f2d>
 8001bae:	4680      	mov	r8, r0
 8001bb0:	4689      	mov	r9, r1
 8001bb2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001bb4:	f7fe fc38 	bl	8000428 <__aeabi_f2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	f7fe fad6 	bl	800016c <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4692      	mov	sl, r2
 8001bc6:	469b      	mov	fp, r3
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <Machine_theta+0xa5c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7fe fc2b 	bl	8000428 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4650      	mov	r0, sl
 8001bd8:	4659      	mov	r1, fp
 8001bda:	f7fe fc7d 	bl	80004d8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4640      	mov	r0, r8
 8001be4:	4649      	mov	r1, r9
 8001be6:	f7fe fda1 	bl	800072c <__aeabi_ddiv>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f00c f97b 	bl	800deec <acos>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
            angle = acos((sqrt(3.0)*x - y)/(2.0*mag)) +
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f7fe fab5 	bl	800016c <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ff5d 	bl	8000ac8 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
            break;
 8001c12:	bf00      	nop
    }

    return angle * (180.0 / M_PI);
 8001c14:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001c16:	f7fe fc07 	bl	8000428 <__aeabi_f2d>
 8001c1a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001c50 <Machine_theta+0xa48>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fc5a 	bl	80004d8 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ff4c 	bl	8000ac8 <__aeabi_d2f>
 8001c30:	4603      	mov	r3, r0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3754      	adds	r7, #84	@ 0x54
 8001c36:	46bd      	mov	sp, r7
 8001c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c3c:	f3af 8000 	nop.w
 8001c40:	e8584caa 	.word	0xe8584caa
 8001c44:	3ffbb67a 	.word	0x3ffbb67a
 8001c48:	e8584caa 	.word	0xe8584caa
 8001c4c:	3febb67a 	.word	0x3febb67a
 8001c50:	1a63c1f8 	.word	0x1a63c1f8
 8001c54:	404ca5dc 	.word	0x404ca5dc
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	3ff00000 	.word	0x3ff00000
 8001c64:	20000008 	.word	0x20000008
 8001c68:	2000000c 	.word	0x2000000c

08001c6c <clamp>:

//function to ensure to values in the specified range
float clamp(float val, float minVal, float maxVal) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
    if (val < minVal) return minVal;
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7ff fa20 	bl	80010c0 <__aeabi_fcmplt>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <clamp+0x1e>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	e009      	b.n	8001c9e <clamp+0x32>
    if (val > maxVal) return maxVal;
 8001c8a:	6879      	ldr	r1, [r7, #4]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f7ff fa35 	bl	80010fc <__aeabi_fcmpgt>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <clamp+0x30>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	e000      	b.n	8001c9e <clamp+0x32>
    return val;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <ServoControl>:

//function to convert angle to pwm
void ServoControl(int angle1, int angle2, int angle3) {
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	@ 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]

    int servoAngle1 = 500 + (angle1 * 2000) / 180;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <ServoControl+0x88>)
 8001cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc4:	441a      	add	r2, r3
 8001cc6:	11d2      	asrs	r2, r2, #7
 8001cc8:	17db      	asrs	r3, r3, #31
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001cd0:	61fb      	str	r3, [r7, #28]
    int servoAngle2 = 500 + (angle2 * 2000) / 180;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	4a14      	ldr	r2, [pc, #80]	@ (8001d30 <ServoControl+0x88>)
 8001cde:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce2:	441a      	add	r2, r3
 8001ce4:	11d2      	asrs	r2, r2, #7
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001cee:	61bb      	str	r3, [r7, #24]
    int servoAngle3 = 500 + (angle3 * 2000) / 180;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <ServoControl+0x88>)
 8001cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8001d00:	441a      	add	r2, r3
 8001d02:	11d2      	asrs	r2, r2, #7
 8001d04:	17db      	asrs	r3, r3, #31
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001d0c:	617b      	str	r3, [r7, #20]

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, servoAngle1);
 8001d0e:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <ServoControl+0x8c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, servoAngle2);
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <ServoControl+0x8c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, servoAngle3);
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <ServoControl+0x8c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001d26:	bf00      	nop
 8001d28:	3724      	adds	r7, #36	@ 0x24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	b60b60b7 	.word	0xb60b60b7
 8001d34:	20000370 	.word	0x20000370

08001d38 <PID_compute>:

/* PID function :calculate the error from the actual ball postion from camera
from the set point "the position the ball should be in which is the center"*/
void PID_compute(int ballX, int ballY) {
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
    errorPrev[Xval] = errorArr[Xval];
 8001d42:	4b78      	ldr	r3, [pc, #480]	@ (8001f24 <PID_compute+0x1ec>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a78      	ldr	r2, [pc, #480]	@ (8001f28 <PID_compute+0x1f0>)
 8001d48:	6013      	str	r3, [r2, #0]
    errorPrev[Yval] = errorArr[Yval];
 8001d4a:	4b76      	ldr	r3, [pc, #472]	@ (8001f24 <PID_compute+0x1ec>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a76      	ldr	r2, [pc, #472]	@ (8001f28 <PID_compute+0x1f0>)
 8001d50:	6053      	str	r3, [r2, #4]

    // error = setpoint - position
    errorArr[Xval] = Xsetpoint - ballX;
 8001d52:	4b76      	ldr	r3, [pc, #472]	@ (8001f2c <PID_compute+0x1f4>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe ffbd 	bl	8000cdc <__aeabi_i2f>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a6f      	ldr	r2, [pc, #444]	@ (8001f24 <PID_compute+0x1ec>)
 8001d66:	6013      	str	r3, [r2, #0]
    errorArr[Yval] = Ysetpoint - ballY;
 8001d68:	4b71      	ldr	r3, [pc, #452]	@ (8001f30 <PID_compute+0x1f8>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ffb2 	bl	8000cdc <__aeabi_i2f>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a6a      	ldr	r2, [pc, #424]	@ (8001f24 <PID_compute+0x1ec>)
 8001d7c:	6053      	str	r3, [r2, #4]

    // integrator (trapezoidal method)
    integr[Xval] += (errorArr[Xval] + errorPrev[Xval]) * LOOP_PERIOD_S;
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f34 <PID_compute+0x1fc>)
 8001d80:	681c      	ldr	r4, [r3, #0]
 8001d82:	4b68      	ldr	r3, [pc, #416]	@ (8001f24 <PID_compute+0x1ec>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a68      	ldr	r2, [pc, #416]	@ (8001f28 <PID_compute+0x1f0>)
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fef1 	bl	8000b74 <__addsf3>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b68      	ldr	r3, [pc, #416]	@ (8001f38 <PID_compute+0x200>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f7fe fff1 	bl	8000d84 <__aeabi_fmul>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4619      	mov	r1, r3
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7fe fee4 	bl	8000b74 <__addsf3>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b60      	ldr	r3, [pc, #384]	@ (8001f34 <PID_compute+0x1fc>)
 8001db2:	601a      	str	r2, [r3, #0]
    integr[Yval] += (errorArr[Yval] + errorPrev[Yval]) * LOOP_PERIOD_S;
 8001db4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f34 <PID_compute+0x1fc>)
 8001db6:	685c      	ldr	r4, [r3, #4]
 8001db8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f24 <PID_compute+0x1ec>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f28 <PID_compute+0x1f0>)
 8001dbe:	6852      	ldr	r2, [r2, #4]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fed6 	bl	8000b74 <__addsf3>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	@ (8001f38 <PID_compute+0x200>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f7fe ffd6 	bl	8000d84 <__aeabi_fmul>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7fe fec9 	bl	8000b74 <__addsf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b53      	ldr	r3, [pc, #332]	@ (8001f34 <PID_compute+0x1fc>)
 8001de8:	605a      	str	r2, [r3, #4]

    // derivative
    deriv[Xval] = (errorArr[Xval] - errorPrev[Xval]) / LOOP_PERIOD_S ;
 8001dea:	4b4e      	ldr	r3, [pc, #312]	@ (8001f24 <PID_compute+0x1ec>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a4e      	ldr	r2, [pc, #312]	@ (8001f28 <PID_compute+0x1f0>)
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe febb 	bl	8000b70 <__aeabi_fsub>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001f38 <PID_compute+0x200>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4619      	mov	r1, r3
 8001e04:	4610      	mov	r0, r2
 8001e06:	f7ff f871 	bl	8000eec <__aeabi_fdiv>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f3c <PID_compute+0x204>)
 8001e10:	601a      	str	r2, [r3, #0]
    deriv[Yval] = (errorArr[Yval] - errorPrev[Yval]) / LOOP_PERIOD_S ;
 8001e12:	4b44      	ldr	r3, [pc, #272]	@ (8001f24 <PID_compute+0x1ec>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4a44      	ldr	r2, [pc, #272]	@ (8001f28 <PID_compute+0x1f0>)
 8001e18:	6852      	ldr	r2, [r2, #4]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe fea7 	bl	8000b70 <__aeabi_fsub>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <PID_compute+0x200>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f7ff f85d 	bl	8000eec <__aeabi_fdiv>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b41      	ldr	r3, [pc, #260]	@ (8001f3c <PID_compute+0x204>)
 8001e38:	605a      	str	r2, [r3, #4]

    // PID output
    outVal[Xval] = kp*errorArr[Xval] + ki*integr[Xval] + kd*deriv[Xval];
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <PID_compute+0x1ec>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a40      	ldr	r2, [pc, #256]	@ (8001f40 <PID_compute+0x208>)
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff9d 	bl	8000d84 <__aeabi_fmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461c      	mov	r4, r3
 8001e4e:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <PID_compute+0x1fc>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3c      	ldr	r2, [pc, #240]	@ (8001f44 <PID_compute+0x20c>)
 8001e54:	6812      	ldr	r2, [r2, #0]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ff93 	bl	8000d84 <__aeabi_fmul>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4619      	mov	r1, r3
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7fe fe86 	bl	8000b74 <__addsf3>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461c      	mov	r4, r3
 8001e6c:	4b33      	ldr	r3, [pc, #204]	@ (8001f3c <PID_compute+0x204>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a35      	ldr	r2, [pc, #212]	@ (8001f48 <PID_compute+0x210>)
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe ff84 	bl	8000d84 <__aeabi_fmul>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7fe fe77 	bl	8000b74 <__addsf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b30      	ldr	r3, [pc, #192]	@ (8001f4c <PID_compute+0x214>)
 8001e8c:	601a      	str	r2, [r3, #0]
    outVal[Yval] = kp*errorArr[Yval] + ki*integr[Yval] + kd*deriv[Yval];
 8001e8e:	4b25      	ldr	r3, [pc, #148]	@ (8001f24 <PID_compute+0x1ec>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <PID_compute+0x208>)
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	4611      	mov	r1, r2
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe ff73 	bl	8000d84 <__aeabi_fmul>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	461c      	mov	r4, r3
 8001ea2:	4b24      	ldr	r3, [pc, #144]	@ (8001f34 <PID_compute+0x1fc>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <PID_compute+0x20c>)
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff69 	bl	8000d84 <__aeabi_fmul>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7fe fe5c 	bl	8000b74 <__addsf3>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <PID_compute+0x204>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	@ (8001f48 <PID_compute+0x210>)
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	4611      	mov	r1, r2
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe ff5a 	bl	8000d84 <__aeabi_fmul>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7fe fe4d 	bl	8000b74 <__addsf3>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <PID_compute+0x214>)
 8001ee0:	605a      	str	r2, [r3, #4]

    // saturate outputs to safe slope
    outVal[Xval] = clamp(outVal[Xval], -maxSlope, maxSlope);
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <PID_compute+0x214>)
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <PID_compute+0x218>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001eee:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <PID_compute+0x218>)
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7ff feba 	bl	8001c6c <clamp>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <PID_compute+0x214>)
 8001efc:	6013      	str	r3, [r2, #0]
    outVal[Yval] = clamp(outVal[Yval], -maxSlope, maxSlope);
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <PID_compute+0x214>)
 8001f00:	6858      	ldr	r0, [r3, #4]
 8001f02:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <PID_compute+0x218>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f0a:	4a11      	ldr	r2, [pc, #68]	@ (8001f50 <PID_compute+0x218>)
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f7ff feac 	bl	8001c6c <clamp>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <PID_compute+0x214>)
 8001f18:	6053      	str	r3, [r2, #4]

}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200003e4 	.word	0x200003e4
 8001f28:	200003ec 	.word	0x200003ec
 8001f2c:	0800e6d0 	.word	0x0800e6d0
 8001f30:	0800e6d2 	.word	0x0800e6d2
 8001f34:	200003f4 	.word	0x200003f4
 8001f38:	0800e6f0 	.word	0x0800e6f0
 8001f3c:	200003fc 	.word	0x200003fc
 8001f40:	0800e6e4 	.word	0x0800e6e4
 8001f44:	0800e6e8 	.word	0x0800e6e8
 8001f48:	0800e6ec 	.word	0x0800e6ec
 8001f4c:	20000404 	.word	0x20000404
 8001f50:	0800e6f8 	.word	0x0800e6f8

08001f54 <moveTo>:

/* moveTo:compute servo angles based on error from PID function and make sure
 *  the output angle in the specified range (servoMin,servoMax) */
void moveTo(float hz, float nx, float ny,
             int *servoA_out, int *servoB_out, int *servoC_out) {
 8001f54:	b5b0      	push	{r4, r5, r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]

    if (nx >  maxSlope) nx =  maxSlope;
 8001f62:	4b8b      	ldr	r3, [pc, #556]	@ (8002190 <moveTo+0x23c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4619      	mov	r1, r3
 8001f68:	68b8      	ldr	r0, [r7, #8]
 8001f6a:	f7ff f8c7 	bl	80010fc <__aeabi_fcmpgt>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <moveTo+0x26>
 8001f74:	4b86      	ldr	r3, [pc, #536]	@ (8002190 <moveTo+0x23c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60bb      	str	r3, [r7, #8]
    if (nx < -maxSlope) nx = -maxSlope;
 8001f7a:	4b85      	ldr	r3, [pc, #532]	@ (8002190 <moveTo+0x23c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f82:	4619      	mov	r1, r3
 8001f84:	68b8      	ldr	r0, [r7, #8]
 8001f86:	f7ff f89b 	bl	80010c0 <__aeabi_fcmplt>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d004      	beq.n	8001f9a <moveTo+0x46>
 8001f90:	4b7f      	ldr	r3, [pc, #508]	@ (8002190 <moveTo+0x23c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f98:	60bb      	str	r3, [r7, #8]
    if (ny >  maxSlope) ny =  maxSlope;
 8001f9a:	4b7d      	ldr	r3, [pc, #500]	@ (8002190 <moveTo+0x23c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff f8ab 	bl	80010fc <__aeabi_fcmpgt>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <moveTo+0x5e>
 8001fac:	4b78      	ldr	r3, [pc, #480]	@ (8002190 <moveTo+0x23c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	607b      	str	r3, [r7, #4]
    if (ny < -maxSlope) ny = -maxSlope;
 8001fb2:	4b77      	ldr	r3, [pc, #476]	@ (8002190 <moveTo+0x23c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff f87f 	bl	80010c0 <__aeabi_fcmplt>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d004      	beq.n	8001fd2 <moveTo+0x7e>
 8001fc8:	4b71      	ldr	r3, [pc, #452]	@ (8002190 <moveTo+0x23c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001fd0:	607b      	str	r3, [r7, #4]

    float thetaA = Machine_theta(A, hz, nx, ny);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	68f9      	ldr	r1, [r7, #12]
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff f915 	bl	8001208 <Machine_theta>
 8001fde:	6278      	str	r0, [r7, #36]	@ 0x24
    float thetaB = Machine_theta(B, hz, nx, ny);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	68f9      	ldr	r1, [r7, #12]
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff f90e 	bl	8001208 <Machine_theta>
 8001fec:	6238      	str	r0, [r7, #32]
    float thetaC = Machine_theta(C, hz, nx, ny);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	68f9      	ldr	r1, [r7, #12]
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f7ff f907 	bl	8001208 <Machine_theta>
 8001ffa:	61f8      	str	r0, [r7, #28]

    int servoAngleA = servoNeutralA + servoSignA * (int)round(thetaA - theta0A);
 8001ffc:	4b65      	ldr	r3, [pc, #404]	@ (8002194 <moveTo+0x240>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461c      	mov	r4, r3
 8002002:	4b65      	ldr	r3, [pc, #404]	@ (8002198 <moveTo+0x244>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461d      	mov	r5, r3
 8002008:	4b64      	ldr	r3, [pc, #400]	@ (800219c <moveTo+0x248>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002010:	f7fe fdae 	bl	8000b70 <__aeabi_fsub>
 8002014:	4603      	mov	r3, r0
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fa06 	bl	8000428 <__aeabi_f2d>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	f00c f884 	bl	800e130 <round>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fd02 	bl	8000a38 <__aeabi_d2iz>
 8002034:	4603      	mov	r3, r0
 8002036:	fb05 f303 	mul.w	r3, r5, r3
 800203a:	4423      	add	r3, r4
 800203c:	61bb      	str	r3, [r7, #24]
    int servoAngleB = servoNeutralB + servoSignB * (int)round(thetaB - theta0B);
 800203e:	4b58      	ldr	r3, [pc, #352]	@ (80021a0 <moveTo+0x24c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	461c      	mov	r4, r3
 8002044:	4b57      	ldr	r3, [pc, #348]	@ (80021a4 <moveTo+0x250>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461d      	mov	r5, r3
 800204a:	4b57      	ldr	r3, [pc, #348]	@ (80021a8 <moveTo+0x254>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	6a38      	ldr	r0, [r7, #32]
 8002052:	f7fe fd8d 	bl	8000b70 <__aeabi_fsub>
 8002056:	4603      	mov	r3, r0
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe f9e5 	bl	8000428 <__aeabi_f2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f00c f863 	bl	800e130 <round>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fce1 	bl	8000a38 <__aeabi_d2iz>
 8002076:	4603      	mov	r3, r0
 8002078:	fb05 f303 	mul.w	r3, r5, r3
 800207c:	4423      	add	r3, r4
 800207e:	617b      	str	r3, [r7, #20]
    int servoAngleC = servoNeutralC + servoSignC * (int)round(thetaC - theta0C);
 8002080:	4b4a      	ldr	r3, [pc, #296]	@ (80021ac <moveTo+0x258>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	461c      	mov	r4, r3
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <moveTo+0x25c>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461d      	mov	r5, r3
 800208c:	4b49      	ldr	r3, [pc, #292]	@ (80021b4 <moveTo+0x260>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	69f8      	ldr	r0, [r7, #28]
 8002094:	f7fe fd6c 	bl	8000b70 <__aeabi_fsub>
 8002098:	4603      	mov	r3, r0
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe f9c4 	bl	8000428 <__aeabi_f2d>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f00c f842 	bl	800e130 <round>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fcc0 	bl	8000a38 <__aeabi_d2iz>
 80020b8:	4603      	mov	r3, r0
 80020ba:	fb05 f303 	mul.w	r3, r5, r3
 80020be:	4423      	add	r3, r4
 80020c0:	613b      	str	r3, [r7, #16]

    servoAngleA = clamp(servoAngleA, servoMin, servoMax);
 80020c2:	69b8      	ldr	r0, [r7, #24]
 80020c4:	f7fe fe0a 	bl	8000cdc <__aeabi_i2f>
 80020c8:	4604      	mov	r4, r0
 80020ca:	4b3b      	ldr	r3, [pc, #236]	@ (80021b8 <moveTo+0x264>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fe04 	bl	8000cdc <__aeabi_i2f>
 80020d4:	4605      	mov	r5, r0
 80020d6:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <moveTo+0x268>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe fdfe 	bl	8000cdc <__aeabi_i2f>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461a      	mov	r2, r3
 80020e4:	4629      	mov	r1, r5
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff fdc0 	bl	8001c6c <clamp>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff f80e 	bl	8001110 <__aeabi_f2iz>
 80020f4:	4603      	mov	r3, r0
 80020f6:	61bb      	str	r3, [r7, #24]
    servoAngleB = clamp(servoAngleB, servoMin, servoMax);
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7fe fdef 	bl	8000cdc <__aeabi_i2f>
 80020fe:	4604      	mov	r4, r0
 8002100:	4b2d      	ldr	r3, [pc, #180]	@ (80021b8 <moveTo+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fde9 	bl	8000cdc <__aeabi_i2f>
 800210a:	4605      	mov	r5, r0
 800210c:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <moveTo+0x268>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe fde3 	bl	8000cdc <__aeabi_i2f>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	4629      	mov	r1, r5
 800211c:	4620      	mov	r0, r4
 800211e:	f7ff fda5 	bl	8001c6c <clamp>
 8002122:	4603      	mov	r3, r0
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fff3 	bl	8001110 <__aeabi_f2iz>
 800212a:	4603      	mov	r3, r0
 800212c:	617b      	str	r3, [r7, #20]
    servoAngleC = clamp(servoAngleC, servoMin, servoMax);
 800212e:	6938      	ldr	r0, [r7, #16]
 8002130:	f7fe fdd4 	bl	8000cdc <__aeabi_i2f>
 8002134:	4604      	mov	r4, r0
 8002136:	4b20      	ldr	r3, [pc, #128]	@ (80021b8 <moveTo+0x264>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fdce 	bl	8000cdc <__aeabi_i2f>
 8002140:	4605      	mov	r5, r0
 8002142:	4b1e      	ldr	r3, [pc, #120]	@ (80021bc <moveTo+0x268>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fdc8 	bl	8000cdc <__aeabi_i2f>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	4629      	mov	r1, r5
 8002152:	4620      	mov	r0, r4
 8002154:	f7ff fd8a 	bl	8001c6c <clamp>
 8002158:	4603      	mov	r3, r0
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe ffd8 	bl	8001110 <__aeabi_f2iz>
 8002160:	4603      	mov	r3, r0
 8002162:	613b      	str	r3, [r7, #16]

    if (servoA_out) *servoA_out = servoAngleA;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <moveTo+0x21c>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	601a      	str	r2, [r3, #0]
    if (servoB_out) *servoB_out = servoAngleB;
 8002170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <moveTo+0x228>
 8002176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]
    if (servoC_out) *servoC_out = servoAngleC;
 800217c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <moveTo+0x234>
 8002182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	601a      	str	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	@ 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bdb0      	pop	{r4, r5, r7, pc}
 8002190:	0800e6f8 	.word	0x0800e6f8
 8002194:	0800e6d4 	.word	0x0800e6d4
 8002198:	0800e6d7 	.word	0x0800e6d7
 800219c:	2000040c 	.word	0x2000040c
 80021a0:	0800e6d5 	.word	0x0800e6d5
 80021a4:	0800e6d8 	.word	0x0800e6d8
 80021a8:	20000410 	.word	0x20000410
 80021ac:	0800e6d6 	.word	0x0800e6d6
 80021b0:	0800e6d9 	.word	0x0800e6d9
 80021b4:	20000414 	.word	0x20000414
 80021b8:	0800e6dc 	.word	0x0800e6dc
 80021bc:	0800e6e0 	.word	0x0800e6e0

080021c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c6:	f000 fb91 	bl	80028ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ca:	f000 f8d3 	bl	8002374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ce:	f000 f999 	bl	8002504 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80021d2:	f007 fb89 	bl	80098e8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80021d6:	f000 f927 	bl	8002428 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //start timer for PWM generation
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021da:	2100      	movs	r1, #0
 80021dc:	484e      	ldr	r0, [pc, #312]	@ (8002318 <main+0x158>)
 80021de:	f003 f8d5 	bl	800538c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80021e2:	2104      	movs	r1, #4
 80021e4:	484c      	ldr	r0, [pc, #304]	@ (8002318 <main+0x158>)
 80021e6:	f003 f8d1 	bl	800538c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80021ea:	210c      	movs	r1, #12
 80021ec:	484a      	ldr	r0, [pc, #296]	@ (8002318 <main+0x158>)
 80021ee:	f003 f8cd 	bl	800538c <HAL_TIM_PWM_Start>

  //inverse kinamatics initial setup
  Machine_init(d, e, f, g);
 80021f2:	4b4a      	ldr	r3, [pc, #296]	@ (800231c <main+0x15c>)
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <main+0x160>)
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002324 <main+0x164>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002328 <main+0x168>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f7fe ffe1 	bl	80011c8 <Machine_init>
  theta0A = Machine_theta(A, platformHz, initialval, initialval);
 8002206:	4b49      	ldr	r3, [pc, #292]	@ (800232c <main+0x16c>)
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	4b49      	ldr	r3, [pc, #292]	@ (8002330 <main+0x170>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b48      	ldr	r3, [pc, #288]	@ (8002330 <main+0x170>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2000      	movs	r0, #0
 8002214:	f7fe fff8 	bl	8001208 <Machine_theta>
 8002218:	4603      	mov	r3, r0
 800221a:	4a46      	ldr	r2, [pc, #280]	@ (8002334 <main+0x174>)
 800221c:	6013      	str	r3, [r2, #0]
  theta0B = Machine_theta(B, platformHz, initialval, initialval);
 800221e:	4b43      	ldr	r3, [pc, #268]	@ (800232c <main+0x16c>)
 8002220:	6819      	ldr	r1, [r3, #0]
 8002222:	4b43      	ldr	r3, [pc, #268]	@ (8002330 <main+0x170>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4b42      	ldr	r3, [pc, #264]	@ (8002330 <main+0x170>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2001      	movs	r0, #1
 800222c:	f7fe ffec 	bl	8001208 <Machine_theta>
 8002230:	4603      	mov	r3, r0
 8002232:	4a41      	ldr	r2, [pc, #260]	@ (8002338 <main+0x178>)
 8002234:	6013      	str	r3, [r2, #0]
  theta0C = Machine_theta(C, platformHz, initialval, initialval);
 8002236:	4b3d      	ldr	r3, [pc, #244]	@ (800232c <main+0x16c>)
 8002238:	6819      	ldr	r1, [r3, #0]
 800223a:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <main+0x170>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <main+0x170>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2002      	movs	r0, #2
 8002244:	f7fe ffe0 	bl	8001208 <Machine_theta>
 8002248:	4603      	mov	r3, r0
 800224a:	4a3c      	ldr	r2, [pc, #240]	@ (800233c <main+0x17c>)
 800224c:	6013      	str	r3, [r2, #0]

  //set servos to the defualt on start
  ServoControl(servoNeutralA, servoNeutralB, servoNeutralC);
 800224e:	4b3c      	ldr	r3, [pc, #240]	@ (8002340 <main+0x180>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	4b3b      	ldr	r3, [pc, #236]	@ (8002344 <main+0x184>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	4b3b      	ldr	r3, [pc, #236]	@ (8002348 <main+0x188>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	f7ff fd22 	bl	8001ca8 <ServoControl>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //if data received from camera successfully
	  if (datareceived) {
 8002264:	4b39      	ldr	r3, [pc, #228]	@ (800234c <main+0x18c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d03f      	beq.n	80022ee <main+0x12e>
	  	  datareceived = 0;
 800226e:	4b37      	ldr	r3, [pc, #220]	@ (800234c <main+0x18c>)
 8002270:	2200      	movs	r2, #0
 8002272:	701a      	strb	r2, [r3, #0]

	  	  //read data from buffer and save it into Xpos,Ypos adresses
	  	 if (sscanf((char*)buffer,"%d,%d", &Xpos, &Ypos) == 2) {
 8002274:	4b36      	ldr	r3, [pc, #216]	@ (8002350 <main+0x190>)
 8002276:	4a37      	ldr	r2, [pc, #220]	@ (8002354 <main+0x194>)
 8002278:	4937      	ldr	r1, [pc, #220]	@ (8002358 <main+0x198>)
 800227a:	4838      	ldr	r0, [pc, #224]	@ (800235c <main+0x19c>)
 800227c:	f008 faca 	bl	800a814 <siscanf>
 8002280:	4603      	mov	r3, r0
 8002282:	2b02      	cmp	r3, #2
 8002284:	d12e      	bne.n	80022e4 <main+0x124>

	  		 //if ball is detected "actual data is received not 0.0"
	  	     if (!(Xpos == 0 && Ypos == 0)) {
 8002286:	4b33      	ldr	r3, [pc, #204]	@ (8002354 <main+0x194>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d103      	bne.n	8002296 <main+0xd6>
 800228e:	4b30      	ldr	r3, [pc, #192]	@ (8002350 <main+0x190>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d026      	beq.n	80022e4 <main+0x124>

	  	    	   /*calculate the error from the camera to the origin point& angle for
	  	    	    * each servo and save it in  S1,S2,S3 addresses and move the servos*/
	  	    	   PID_compute(Xpos, Ypos);
 8002296:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <main+0x194>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2d      	ldr	r2, [pc, #180]	@ (8002350 <main+0x190>)
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fd49 	bl	8001d38 <PID_compute>
	  	    	   moveTo(platformHz, -outVal[0], -outVal[1], &s1, &s2, &s3);
 80022a6:	4b21      	ldr	r3, [pc, #132]	@ (800232c <main+0x16c>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <main+0x1a0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80022b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <main+0x1a0>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80022ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002364 <main+0x1a4>)
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	4b2a      	ldr	r3, [pc, #168]	@ (8002368 <main+0x1a8>)
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <main+0x1ac>)
 80022c4:	f7ff fe46 	bl	8001f54 <moveTo>
	  	           ServoControl(s1, s2, s3);
 80022c8:	4b28      	ldr	r3, [pc, #160]	@ (800236c <main+0x1ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a26      	ldr	r2, [pc, #152]	@ (8002368 <main+0x1a8>)
 80022ce:	6811      	ldr	r1, [r2, #0]
 80022d0:	4a24      	ldr	r2, [pc, #144]	@ (8002364 <main+0x1a4>)
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fce7 	bl	8001ca8 <ServoControl>
	  	           timelapsed = HAL_GetTick(); //save last active time
 80022da:	f000 fb5f 	bl	800299c <HAL_GetTick>
 80022de:	4603      	mov	r3, r0
 80022e0:	4a23      	ldr	r2, [pc, #140]	@ (8002370 <main+0x1b0>)
 80022e2:	6013      	str	r3, [r2, #0]
	  	          }
	  	      }
	  	 	 //clear the buffer for new cycle
	  	      memset((void*)buffer, 0, buffer_size);
 80022e4:	2210      	movs	r2, #16
 80022e6:	2100      	movs	r1, #0
 80022e8:	481c      	ldr	r0, [pc, #112]	@ (800235c <main+0x19c>)
 80022ea:	f008 fb04 	bl	800a8f6 <memset>
	  	  }
	  	  /*if current time from last active cycle is more than 0.5 Sec
	  	  so "No ball currently" reset the servos*/
		  if (HAL_GetTick() - timelapsed > 500) {
 80022ee:	f000 fb55 	bl	800299c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <main+0x1b0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022fe:	d9b1      	bls.n	8002264 <main+0xa4>
	  	      ServoControl(servoNeutralA, servoNeutralB, servoNeutralC);
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <main+0x180>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	4b0f      	ldr	r3, [pc, #60]	@ (8002344 <main+0x184>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <main+0x188>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	f7ff fcc9 	bl	8001ca8 <ServoControl>
	  if (datareceived) {
 8002316:	e7a5      	b.n	8002264 <main+0xa4>
 8002318:	20000370 	.word	0x20000370
 800231c:	20000000 	.word	0x20000000
 8002320:	20000004 	.word	0x20000004
 8002324:	20000008 	.word	0x20000008
 8002328:	2000000c 	.word	0x2000000c
 800232c:	0800e6f4 	.word	0x0800e6f4
 8002330:	0800e6fc 	.word	0x0800e6fc
 8002334:	2000040c 	.word	0x2000040c
 8002338:	20000410 	.word	0x20000410
 800233c:	20000414 	.word	0x20000414
 8002340:	0800e6d4 	.word	0x0800e6d4
 8002344:	0800e6d5 	.word	0x0800e6d5
 8002348:	0800e6d6 	.word	0x0800e6d6
 800234c:	200003c9 	.word	0x200003c9
 8002350:	200003d4 	.word	0x200003d4
 8002354:	200003d0 	.word	0x200003d0
 8002358:	0800e678 	.word	0x0800e678
 800235c:	200003b8 	.word	0x200003b8
 8002360:	20000404 	.word	0x20000404
 8002364:	200003e0 	.word	0x200003e0
 8002368:	200003dc 	.word	0x200003dc
 800236c:	200003d8 	.word	0x200003d8
 8002370:	200003cc 	.word	0x200003cc

08002374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b094      	sub	sp, #80	@ 0x50
 8002378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800237a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800237e:	2228      	movs	r2, #40	@ 0x28
 8002380:	2100      	movs	r1, #0
 8002382:	4618      	mov	r0, r3
 8002384:	f008 fab7 	bl	800a8f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b2:	2301      	movs	r3, #1
 80023b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b6:	2302      	movs	r3, #2
 80023b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 fafa 	bl	80049c4 <HAL_RCC_OscConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023d6:	f000 f8e1 	bl	800259c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023da:	230f      	movs	r3, #15
 80023dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023de:	2302      	movs	r3, #2
 80023e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2102      	movs	r1, #2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fd66 	bl	8004ec8 <HAL_RCC_ClockConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002402:	f000 f8cb 	bl	800259c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002406:	2310      	movs	r3, #16
 8002408:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	4618      	mov	r0, r3
 8002412:	f002 feb5 	bl	8005180 <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800241c:	f000 f8be 	bl	800259c <Error_Handler>
  }
}
 8002420:	bf00      	nop
 8002422:	3750      	adds	r7, #80	@ 0x50
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242e:	f107 0320 	add.w	r3, r7, #32
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]
 8002446:	615a      	str	r2, [r3, #20]
 8002448:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800244a:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <MX_TIM2_Init+0xd8>)
 800244c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002450:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002452:	4b2b      	ldr	r3, [pc, #172]	@ (8002500 <MX_TIM2_Init+0xd8>)
 8002454:	2247      	movs	r2, #71	@ 0x47
 8002456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b29      	ldr	r3, [pc, #164]	@ (8002500 <MX_TIM2_Init+0xd8>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800245e:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <MX_TIM2_Init+0xd8>)
 8002460:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002464:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b26      	ldr	r3, [pc, #152]	@ (8002500 <MX_TIM2_Init+0xd8>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <MX_TIM2_Init+0xd8>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002472:	4823      	ldr	r0, [pc, #140]	@ (8002500 <MX_TIM2_Init+0xd8>)
 8002474:	f002 ff3a 	bl	80052ec <HAL_TIM_PWM_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800247e:	f000 f88d 	bl	800259c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248a:	f107 0320 	add.w	r3, r7, #32
 800248e:	4619      	mov	r1, r3
 8002490:	481b      	ldr	r0, [pc, #108]	@ (8002500 <MX_TIM2_Init+0xd8>)
 8002492:	f003 faf9 	bl	8005a88 <HAL_TIMEx_MasterConfigSynchronization>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800249c:	f000 f87e 	bl	800259c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a0:	2360      	movs	r3, #96	@ 0x60
 80024a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2200      	movs	r2, #0
 80024b4:	4619      	mov	r1, r3
 80024b6:	4812      	ldr	r0, [pc, #72]	@ (8002500 <MX_TIM2_Init+0xd8>)
 80024b8:	f003 f80a 	bl	80054d0 <HAL_TIM_PWM_ConfigChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80024c2:	f000 f86b 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2204      	movs	r2, #4
 80024ca:	4619      	mov	r1, r3
 80024cc:	480c      	ldr	r0, [pc, #48]	@ (8002500 <MX_TIM2_Init+0xd8>)
 80024ce:	f002 ffff 	bl	80054d0 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80024d8:	f000 f860 	bl	800259c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	220c      	movs	r2, #12
 80024e0:	4619      	mov	r1, r3
 80024e2:	4807      	ldr	r0, [pc, #28]	@ (8002500 <MX_TIM2_Init+0xd8>)
 80024e4:	f002 fff4 	bl	80054d0 <HAL_TIM_PWM_ConfigChannel>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 80024ee:	f000 f855 	bl	800259c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024f2:	4803      	ldr	r0, [pc, #12]	@ (8002500 <MX_TIM2_Init+0xd8>)
 80024f4:	f000 f8a6 	bl	8002644 <HAL_TIM_MspPostInit>

}
 80024f8:	bf00      	nop
 80024fa:	3728      	adds	r7, #40	@ 0x28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000370 	.word	0x20000370

08002504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002518:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <MX_GPIO_Init+0x90>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	4a1d      	ldr	r2, [pc, #116]	@ (8002594 <MX_GPIO_Init+0x90>)
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	6193      	str	r3, [r2, #24]
 8002524:	4b1b      	ldr	r3, [pc, #108]	@ (8002594 <MX_GPIO_Init+0x90>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002530:	4b18      	ldr	r3, [pc, #96]	@ (8002594 <MX_GPIO_Init+0x90>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a17      	ldr	r2, [pc, #92]	@ (8002594 <MX_GPIO_Init+0x90>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b15      	ldr	r3, [pc, #84]	@ (8002594 <MX_GPIO_Init+0x90>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <MX_GPIO_Init+0x90>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <MX_GPIO_Init+0x90>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <MX_GPIO_Init+0x90>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002566:	480c      	ldr	r0, [pc, #48]	@ (8002598 <MX_GPIO_Init+0x94>)
 8002568:	f000 fcb4 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800256c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002572:	2301      	movs	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2302      	movs	r3, #2
 800257c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257e:	f107 0310 	add.w	r3, r7, #16
 8002582:	4619      	mov	r1, r3
 8002584:	4804      	ldr	r0, [pc, #16]	@ (8002598 <MX_GPIO_Init+0x94>)
 8002586:	f000 fb21 	bl	8002bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800258a:	bf00      	nop
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	40011000 	.word	0x40011000

0800259c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025a0:	b672      	cpsid	i
}
 80025a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <Error_Handler+0x8>

080025a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <HAL_MspInit+0x5c>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4a14      	ldr	r2, [pc, #80]	@ (8002604 <HAL_MspInit+0x5c>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6193      	str	r3, [r2, #24]
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_MspInit+0x5c>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002604 <HAL_MspInit+0x5c>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002604 <HAL_MspInit+0x5c>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	61d3      	str	r3, [r2, #28]
 80025d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <HAL_MspInit+0x5c>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_MspInit+0x60>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <HAL_MspInit+0x60>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40021000 	.word	0x40021000
 8002608:	40010000 	.word	0x40010000

0800260c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800261c:	d10b      	bne.n	8002636 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800261e:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_TIM_PWM_MspInit+0x34>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_TIM_PWM_MspInit+0x34>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b05      	ldr	r3, [pc, #20]	@ (8002640 <HAL_TIM_PWM_MspInit+0x34>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40021000 	.word	0x40021000

08002644 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002662:	d117      	bne.n	8002694 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_TIM_MspPostInit+0x58>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <HAL_TIM_MspPostInit+0x58>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6193      	str	r3, [r2, #24]
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <HAL_TIM_MspPostInit+0x58>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800267c:	230b      	movs	r3, #11
 800267e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002684:	2302      	movs	r3, #2
 8002686:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002688:	f107 0310 	add.w	r3, r7, #16
 800268c:	4619      	mov	r1, r3
 800268e:	4804      	ldr	r0, [pc, #16]	@ (80026a0 <HAL_TIM_MspPostInit+0x5c>)
 8002690:	f000 fa9c 	bl	8002bcc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002694:	bf00      	nop
 8002696:	3720      	adds	r7, #32
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	40010800 	.word	0x40010800

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <NMI_Handler+0x4>

080026ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <HardFault_Handler+0x4>

080026b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <MemManage_Handler+0x4>

080026bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <BusFault_Handler+0x4>

080026c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <UsageFault_Handler+0x4>

080026cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f4:	f000 f940 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002702:	f000 fd1b 	bl	800313c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200010e8 	.word	0x200010e8

08002710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return 1;
 8002714:	2301      	movs	r3, #1
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <_kill>:

int _kill(int pid, int sig)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002728:	f008 f934 	bl	800a994 <__errno>
 800272c:	4603      	mov	r3, r0
 800272e:	2216      	movs	r2, #22
 8002730:	601a      	str	r2, [r3, #0]
  return -1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_exit>:

void _exit (int status)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002746:	f04f 31ff 	mov.w	r1, #4294967295
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffe7 	bl	800271e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <_exit+0x12>

08002754 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	e00a      	b.n	800277c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002766:	f3af 8000 	nop.w
 800276a:	4601      	mov	r1, r0
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	60ba      	str	r2, [r7, #8]
 8002772:	b2ca      	uxtb	r2, r1
 8002774:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	3301      	adds	r3, #1
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbf0      	blt.n	8002766 <_read+0x12>
  }

  return len;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	e009      	b.n	80027b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	1c5a      	adds	r2, r3, #1
 80027a4:	60ba      	str	r2, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dbf1      	blt.n	80027a0 <_write+0x12>
  }
  return len;
 80027bc:	687b      	ldr	r3, [r7, #4]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_close>:

int _close(int file)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027ec:	605a      	str	r2, [r3, #4]
  return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <_isatty>:

int _isatty(int file)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002802:	2301      	movs	r3, #1
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002830:	4a14      	ldr	r2, [pc, #80]	@ (8002884 <_sbrk+0x5c>)
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <_sbrk+0x60>)
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800283c:	4b13      	ldr	r3, [pc, #76]	@ (800288c <_sbrk+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <_sbrk+0x64>)
 8002846:	4a12      	ldr	r2, [pc, #72]	@ (8002890 <_sbrk+0x68>)
 8002848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <_sbrk+0x64>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	429a      	cmp	r2, r3
 8002856:	d207      	bcs.n	8002868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002858:	f008 f89c 	bl	800a994 <__errno>
 800285c:	4603      	mov	r3, r0
 800285e:	220c      	movs	r2, #12
 8002860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
 8002866:	e009      	b.n	800287c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <_sbrk+0x64>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800286e:	4b07      	ldr	r3, [pc, #28]	@ (800288c <_sbrk+0x64>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4413      	add	r3, r2
 8002876:	4a05      	ldr	r2, [pc, #20]	@ (800288c <_sbrk+0x64>)
 8002878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800287a:	68fb      	ldr	r3, [r7, #12]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20005000 	.word	0x20005000
 8002888:	00000400 	.word	0x00000400
 800288c:	20000418 	.word	0x20000418
 8002890:	20001730 	.word	0x20001730

08002894 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a0:	f7ff fff8 	bl	8002894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028a4:	480b      	ldr	r0, [pc, #44]	@ (80028d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028a6:	490c      	ldr	r1, [pc, #48]	@ (80028d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028a8:	4a0c      	ldr	r2, [pc, #48]	@ (80028dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ba:	4a09      	ldr	r2, [pc, #36]	@ (80028e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028bc:	4c09      	ldr	r4, [pc, #36]	@ (80028e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ca:	f008 f869 	bl	800a9a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ce:	f7ff fc77 	bl	80021c0 <main>
  bx lr
 80028d2:	4770      	bx	lr
  ldr r0, =_sdata
 80028d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80028dc:	0800eb18 	.word	0x0800eb18
  ldr r2, =_sbss
 80028e0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 80028e4:	2000172c 	.word	0x2000172c

080028e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028e8:	e7fe      	b.n	80028e8 <ADC1_2_IRQHandler>
	...

080028ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_Init+0x28>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <HAL_Init+0x28>)
 80028f6:	f043 0310 	orr.w	r3, r3, #16
 80028fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f000 f923 	bl	8002b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002902:	200f      	movs	r0, #15
 8002904:	f000 f808 	bl	8002918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002908:	f7ff fe4e 	bl	80025a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40022000 	.word	0x40022000

08002918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002920:	4b12      	ldr	r3, [pc, #72]	@ (800296c <HAL_InitTick+0x54>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <HAL_InitTick+0x58>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f93b 	bl	8002bb2 <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00e      	b.n	8002964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d80a      	bhi.n	8002962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294c:	2200      	movs	r2, #0
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f000 f903 	bl	8002b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002958:	4a06      	ldr	r2, [pc, #24]	@ (8002974 <HAL_InitTick+0x5c>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000010 	.word	0x20000010
 8002970:	20000018 	.word	0x20000018
 8002974:	20000014 	.word	0x20000014

08002978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <HAL_IncTick+0x1c>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_IncTick+0x20>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a03      	ldr	r2, [pc, #12]	@ (8002998 <HAL_IncTick+0x20>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	20000018 	.word	0x20000018
 8002998:	2000041c 	.word	0x2000041c

0800299c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return uwTick;
 80029a0:	4b02      	ldr	r3, [pc, #8]	@ (80029ac <HAL_GetTick+0x10>)
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	2000041c 	.word	0x2000041c

080029b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029cc:	4013      	ands	r3, r2
 80029ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e2:	4a04      	ldr	r2, [pc, #16]	@ (80029f4 <__NVIC_SetPriorityGrouping+0x44>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	60d3      	str	r3, [r2, #12]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <__NVIC_GetPriorityGrouping+0x18>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	0a1b      	lsrs	r3, r3, #8
 8002a02:	f003 0307 	and.w	r3, r3, #7
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0b      	blt.n	8002a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4906      	ldr	r1, [pc, #24]	@ (8002a48 <__NVIC_EnableIRQ+0x34>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	@ (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	@ (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	@ 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
         );
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	@ 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b14:	d301      	bcc.n	8002b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b16:	2301      	movs	r3, #1
 8002b18:	e00f      	b.n	8002b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b44 <SysTick_Config+0x40>)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b22:	210f      	movs	r1, #15
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	f7ff ff90 	bl	8002a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <SysTick_Config+0x40>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b32:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <SysTick_Config+0x40>)
 8002b34:	2207      	movs	r2, #7
 8002b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000e010 	.word	0xe000e010

08002b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7ff ff2d 	bl	80029b0 <__NVIC_SetPriorityGrouping>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b70:	f7ff ff42 	bl	80029f8 <__NVIC_GetPriorityGrouping>
 8002b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	6978      	ldr	r0, [r7, #20]
 8002b7c:	f7ff ff90 	bl	8002aa0 <NVIC_EncodePriority>
 8002b80:	4602      	mov	r2, r0
 8002b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff5f 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff ff35 	bl	8002a14 <__NVIC_EnableIRQ>
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ffa2 	bl	8002b04 <SysTick_Config>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b08b      	sub	sp, #44	@ 0x2c
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bde:	e169      	b.n	8002eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002be0:	2201      	movs	r2, #1
 8002be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	f040 8158 	bne.w	8002eae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	4a9a      	ldr	r2, [pc, #616]	@ (8002e6c <HAL_GPIO_Init+0x2a0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d05e      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c08:	4a98      	ldr	r2, [pc, #608]	@ (8002e6c <HAL_GPIO_Init+0x2a0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d875      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c0e:	4a98      	ldr	r2, [pc, #608]	@ (8002e70 <HAL_GPIO_Init+0x2a4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d058      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c14:	4a96      	ldr	r2, [pc, #600]	@ (8002e70 <HAL_GPIO_Init+0x2a4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d86f      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c1a:	4a96      	ldr	r2, [pc, #600]	@ (8002e74 <HAL_GPIO_Init+0x2a8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d052      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c20:	4a94      	ldr	r2, [pc, #592]	@ (8002e74 <HAL_GPIO_Init+0x2a8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d869      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c26:	4a94      	ldr	r2, [pc, #592]	@ (8002e78 <HAL_GPIO_Init+0x2ac>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d04c      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c2c:	4a92      	ldr	r2, [pc, #584]	@ (8002e78 <HAL_GPIO_Init+0x2ac>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d863      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c32:	4a92      	ldr	r2, [pc, #584]	@ (8002e7c <HAL_GPIO_Init+0x2b0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d046      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
 8002c38:	4a90      	ldr	r2, [pc, #576]	@ (8002e7c <HAL_GPIO_Init+0x2b0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d85d      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c3e:	2b12      	cmp	r3, #18
 8002c40:	d82a      	bhi.n	8002c98 <HAL_GPIO_Init+0xcc>
 8002c42:	2b12      	cmp	r3, #18
 8002c44:	d859      	bhi.n	8002cfa <HAL_GPIO_Init+0x12e>
 8002c46:	a201      	add	r2, pc, #4	@ (adr r2, 8002c4c <HAL_GPIO_Init+0x80>)
 8002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4c:	08002cc7 	.word	0x08002cc7
 8002c50:	08002ca1 	.word	0x08002ca1
 8002c54:	08002cb3 	.word	0x08002cb3
 8002c58:	08002cf5 	.word	0x08002cf5
 8002c5c:	08002cfb 	.word	0x08002cfb
 8002c60:	08002cfb 	.word	0x08002cfb
 8002c64:	08002cfb 	.word	0x08002cfb
 8002c68:	08002cfb 	.word	0x08002cfb
 8002c6c:	08002cfb 	.word	0x08002cfb
 8002c70:	08002cfb 	.word	0x08002cfb
 8002c74:	08002cfb 	.word	0x08002cfb
 8002c78:	08002cfb 	.word	0x08002cfb
 8002c7c:	08002cfb 	.word	0x08002cfb
 8002c80:	08002cfb 	.word	0x08002cfb
 8002c84:	08002cfb 	.word	0x08002cfb
 8002c88:	08002cfb 	.word	0x08002cfb
 8002c8c:	08002cfb 	.word	0x08002cfb
 8002c90:	08002ca9 	.word	0x08002ca9
 8002c94:	08002cbd 	.word	0x08002cbd
 8002c98:	4a79      	ldr	r2, [pc, #484]	@ (8002e80 <HAL_GPIO_Init+0x2b4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d013      	beq.n	8002cc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c9e:	e02c      	b.n	8002cfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	623b      	str	r3, [r7, #32]
          break;
 8002ca6:	e029      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	3304      	adds	r3, #4
 8002cae:	623b      	str	r3, [r7, #32]
          break;
 8002cb0:	e024      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	623b      	str	r3, [r7, #32]
          break;
 8002cba:	e01f      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	623b      	str	r3, [r7, #32]
          break;
 8002cc4:	e01a      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d102      	bne.n	8002cd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cce:	2304      	movs	r3, #4
 8002cd0:	623b      	str	r3, [r7, #32]
          break;
 8002cd2:	e013      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cdc:	2308      	movs	r3, #8
 8002cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	611a      	str	r2, [r3, #16]
          break;
 8002ce6:	e009      	b.n	8002cfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ce8:	2308      	movs	r3, #8
 8002cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	615a      	str	r2, [r3, #20]
          break;
 8002cf2:	e003      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
          break;
 8002cf8:	e000      	b.n	8002cfc <HAL_GPIO_Init+0x130>
          break;
 8002cfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2bff      	cmp	r3, #255	@ 0xff
 8002d00:	d801      	bhi.n	8002d06 <HAL_GPIO_Init+0x13a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	e001      	b.n	8002d0a <HAL_GPIO_Init+0x13e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2bff      	cmp	r3, #255	@ 0xff
 8002d10:	d802      	bhi.n	8002d18 <HAL_GPIO_Init+0x14c>
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	e002      	b.n	8002d1e <HAL_GPIO_Init+0x152>
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	3b08      	subs	r3, #8
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	210f      	movs	r1, #15
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	401a      	ands	r2, r3
 8002d30:	6a39      	ldr	r1, [r7, #32]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80b1 	beq.w	8002eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e84 <HAL_GPIO_Init+0x2b8>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	4a4c      	ldr	r2, [pc, #304]	@ (8002e84 <HAL_GPIO_Init+0x2b8>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	6193      	str	r3, [r2, #24]
 8002d58:	4b4a      	ldr	r3, [pc, #296]	@ (8002e84 <HAL_GPIO_Init+0x2b8>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d64:	4a48      	ldr	r2, [pc, #288]	@ (8002e88 <HAL_GPIO_Init+0x2bc>)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	089b      	lsrs	r3, r3, #2
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a40      	ldr	r2, [pc, #256]	@ (8002e8c <HAL_GPIO_Init+0x2c0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <HAL_GPIO_Init+0x1ec>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a3f      	ldr	r2, [pc, #252]	@ (8002e90 <HAL_GPIO_Init+0x2c4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00d      	beq.n	8002db4 <HAL_GPIO_Init+0x1e8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e94 <HAL_GPIO_Init+0x2c8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <HAL_GPIO_Init+0x1e4>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a3d      	ldr	r2, [pc, #244]	@ (8002e98 <HAL_GPIO_Init+0x2cc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_GPIO_Init+0x1e0>
 8002da8:	2303      	movs	r3, #3
 8002daa:	e006      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002dac:	2304      	movs	r3, #4
 8002dae:	e004      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e002      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <HAL_GPIO_Init+0x1ee>
 8002db8:	2300      	movs	r3, #0
 8002dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dbc:	f002 0203 	and.w	r2, r2, #3
 8002dc0:	0092      	lsls	r2, r2, #2
 8002dc2:	4093      	lsls	r3, r2
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002dca:	492f      	ldr	r1, [pc, #188]	@ (8002e88 <HAL_GPIO_Init+0x2bc>)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	3302      	adds	r3, #2
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d006      	beq.n	8002df2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002de4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	492c      	ldr	r1, [pc, #176]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	608b      	str	r3, [r1, #8]
 8002df0:	e006      	b.n	8002e00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002df2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	4928      	ldr	r1, [pc, #160]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e0c:	4b23      	ldr	r3, [pc, #140]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	4922      	ldr	r1, [pc, #136]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	60cb      	str	r3, [r1, #12]
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	491e      	ldr	r1, [pc, #120]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d006      	beq.n	8002e42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e34:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4918      	ldr	r1, [pc, #96]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	604b      	str	r3, [r1, #4]
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	4914      	ldr	r1, [pc, #80]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d021      	beq.n	8002ea0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	490e      	ldr	r1, [pc, #56]	@ (8002e9c <HAL_GPIO_Init+0x2d0>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
 8002e68:	e021      	b.n	8002eae <HAL_GPIO_Init+0x2e2>
 8002e6a:	bf00      	nop
 8002e6c:	10320000 	.word	0x10320000
 8002e70:	10310000 	.word	0x10310000
 8002e74:	10220000 	.word	0x10220000
 8002e78:	10210000 	.word	0x10210000
 8002e7c:	10120000 	.word	0x10120000
 8002e80:	10110000 	.word	0x10110000
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40010800 	.word	0x40010800
 8002e90:	40010c00 	.word	0x40010c00
 8002e94:	40011000 	.word	0x40011000
 8002e98:	40011400 	.word	0x40011400
 8002e9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <HAL_GPIO_Init+0x304>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4909      	ldr	r1, [pc, #36]	@ (8002ed0 <HAL_GPIO_Init+0x304>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f47f ae8e 	bne.w	8002be0 <HAL_GPIO_Init+0x14>
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	372c      	adds	r7, #44	@ 0x2c
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	611a      	str	r2, [r3, #16]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0e8      	b.n	80030e8 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f006 feda 	bl	8009ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2203      	movs	r2, #3
 8002f34:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 fe21 	bl	8005b8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6818      	ldr	r0, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f52:	f002 fdf7 	bl	8005b44 <USB_CoreInit>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d005      	beq.n	8002f68 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0bf      	b.n	80030e8 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fe25 	bl	8005bbe <USB_SetCurrentMode>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0b0      	b.n	80030e8 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e03e      	b.n	800300a <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	3311      	adds	r3, #17
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	440b      	add	r3, r1
 8002fae:	3310      	adds	r3, #16
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fb4:	7bfa      	ldrb	r2, [r7, #15]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3313      	adds	r3, #19
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3320      	adds	r3, #32
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fdc:	7bfa      	ldrb	r2, [r7, #15]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	440b      	add	r3, r1
 8002fea:	3324      	adds	r3, #36	@ 0x24
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	3301      	adds	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	791b      	ldrb	r3, [r3, #4]
 800300e:	7bfa      	ldrb	r2, [r7, #15]
 8003010:	429a      	cmp	r2, r3
 8003012:	d3bb      	bcc.n	8002f8c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]
 8003018:	e044      	b.n	80030a4 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800301a:	7bfa      	ldrb	r2, [r7, #15]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	440b      	add	r3, r1
 800306a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	440b      	add	r3, r1
 8003096:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3301      	adds	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d3b5      	bcc.n	800301a <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b8:	f002 fd8d 	bl	8005bd6 <USB_DevInit>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00c      	b.n	80030e8 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f005 f80c 	bl	80080fe <USB_DevDisconnect>

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_PCD_Start+0x16>
 8003102:	2302      	movs	r3, #2
 8003104:	e016      	b.n	8003134 <HAL_PCD_Start+0x44>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f002 fd23 	bl	8005b5e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003118:	2101      	movs	r1, #1
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f007 f855 	bl	800a1ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f004 ffe0 	bl	80080ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f004 ffe2 	bl	8008112 <USB_ReadInterrupts>
 800314e:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fb1a 	bl	8003794 <PCD_EP_ISR_Handler>

    return;
 8003160:	e119      	b.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003174:	b29a      	uxth	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317e:	b292      	uxth	r2, r2
 8003180:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f006 fe28 	bl	8009dda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800318a:	2100      	movs	r1, #0
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f905 	bl	800339c <HAL_PCD_SetAddress>

    return;
 8003192:	e100      	b.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031b0:	b292      	uxth	r2, r2
 80031b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031b6:	e0ee      	b.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031d4:	b292      	uxth	r2, r2
 80031d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80031da:	e0dc      	b.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d027      	beq.n	8003236 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0204 	bic.w	r2, r2, #4
 80031f8:	b292      	uxth	r2, r2
 80031fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003206:	b29a      	uxth	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	b292      	uxth	r2, r2
 8003212:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f006 fe18 	bl	8009e4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003224:	b29a      	uxth	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800322e:	b292      	uxth	r2, r2
 8003230:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003234:	e0af      	b.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8083 	beq.w	8003348 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e010      	b.n	800326a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	441a      	add	r2, r3
 8003254:	7ffb      	ldrb	r3, [r7, #31]
 8003256:	8812      	ldrh	r2, [r2, #0]
 8003258:	b292      	uxth	r2, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	3320      	adds	r3, #32
 800325e:	443b      	add	r3, r7
 8003260:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	3301      	adds	r3, #1
 8003268:	77fb      	strb	r3, [r7, #31]
 800326a:	7ffb      	ldrb	r3, [r7, #31]
 800326c:	2b07      	cmp	r3, #7
 800326e:	d9eb      	bls.n	8003248 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	b292      	uxth	r2, r2
 8003284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003290:	b29a      	uxth	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	b292      	uxth	r2, r2
 800329c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032a0:	bf00      	nop
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f6      	beq.n	80032a2 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c6:	b292      	uxth	r2, r2
 80032c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e00f      	b.n	80032f2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	4611      	mov	r1, r2
 80032da:	7ffa      	ldrb	r2, [r7, #31]
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	440a      	add	r2, r1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	3320      	adds	r3, #32
 80032e4:	443b      	add	r3, r7
 80032e6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80032ea:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80032ec:	7ffb      	ldrb	r3, [r7, #31]
 80032ee:	3301      	adds	r3, #1
 80032f0:	77fb      	strb	r3, [r7, #31]
 80032f2:	7ffb      	ldrb	r3, [r7, #31]
 80032f4:	2b07      	cmp	r3, #7
 80032f6:	d9ec      	bls.n	80032d2 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003300:	b29a      	uxth	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0208 	orr.w	r2, r2, #8
 800330a:	b292      	uxth	r2, r2
 800330c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003318:	b29a      	uxth	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003322:	b292      	uxth	r2, r2
 8003324:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0204 	orr.w	r2, r2, #4
 800333a:	b292      	uxth	r2, r2
 800333c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f006 fd69 	bl	8009e18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003346:	e026      	b.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00f      	beq.n	8003372 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003364:	b292      	uxth	r2, r2
 8003366:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f006 fd27 	bl	8009dbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003370:	e011      	b.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00c      	beq.n	8003396 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003384:	b29a      	uxth	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800338e:	b292      	uxth	r2, r2
 8003390:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003394:	bf00      	nop
  }
}
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_PCD_SetAddress+0x1a>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e012      	b.n	80033dc <HAL_PCD_SetAddress+0x40>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	78fa      	ldrb	r2, [r7, #3]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f004 fe79 	bl	80080c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	70fb      	strb	r3, [r7, #3]
 80033f6:	460b      	mov	r3, r1
 80033f8:	803b      	strh	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003402:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003406:	2b00      	cmp	r3, #0
 8003408:	da0e      	bge.n	8003428 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800340a:	78fb      	ldrb	r3, [r7, #3]
 800340c:	f003 0207 	and.w	r2, r3, #7
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	3310      	adds	r3, #16
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	705a      	strb	r2, [r3, #1]
 8003426:	e00e      	b.n	8003446 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	f003 0207 	and.w	r2, r3, #7
 800342e:	4613      	mov	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003452:	883a      	ldrh	r2, [r7, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	78ba      	ldrb	r2, [r7, #2]
 800345c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800345e:	78bb      	ldrb	r3, [r7, #2]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d102      	bne.n	800346a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_PCD_EP_Open+0x94>
 8003474:	2302      	movs	r3, #2
 8003476:	e00e      	b.n	8003496 <HAL_PCD_EP_Open+0xb2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68f9      	ldr	r1, [r7, #12]
 8003486:	4618      	mov	r0, r3
 8003488:	f002 fbc2 	bl	8005c10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8003494:	7afb      	ldrb	r3, [r7, #11]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b084      	sub	sp, #16
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da0e      	bge.n	80034d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 0207 	and.w	r2, r3, #7
 80034b8:	4613      	mov	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	3310      	adds	r3, #16
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	705a      	strb	r2, [r3, #1]
 80034ce:	e00e      	b.n	80034ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	f003 0207 	and.w	r2, r3, #7
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_EP_Close+0x6a>
 8003504:	2302      	movs	r3, #2
 8003506:	e00e      	b.n	8003526 <HAL_PCD_EP_Close+0x88>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 ff3a 	bl	8006390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	460b      	mov	r3, r1
 800353c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800353e:	7afb      	ldrb	r3, [r7, #11]
 8003540:	f003 0207 	and.w	r2, r3, #7
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800356e:	7afb      	ldrb	r3, [r7, #11]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	b2da      	uxtb	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6979      	ldr	r1, [r7, #20]
 8003580:	4618      	mov	r0, r3
 8003582:	f003 f8f1 	bl	8006768 <USB_EPStartXfer>

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 0207 	and.w	r2, r3, #7
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	440b      	add	r3, r1
 80035ae:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80035b2:	681b      	ldr	r3, [r3, #0]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b086      	sub	sp, #24
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	460b      	mov	r3, r1
 80035cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	7afb      	ldrb	r3, [r7, #11]
 80035d0:	f003 0207 	and.w	r2, r3, #7
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	3310      	adds	r3, #16
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2200      	movs	r2, #0
 8003602:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2201      	movs	r2, #1
 8003608:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360a:	7afb      	ldrb	r3, [r7, #11]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	b2da      	uxtb	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	4618      	mov	r0, r3
 800361e:	f003 f8a3 	bl	8006768 <USB_EPStartXfer>

  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	7912      	ldrb	r2, [r2, #4]
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e04c      	b.n	80036e4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800364a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	da0e      	bge.n	8003670 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	f003 0207 	and.w	r2, r3, #7
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	3310      	adds	r3, #16
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	705a      	strb	r2, [r3, #1]
 800366e:	e00c      	b.n	800368a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	b2da      	uxtb	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_PCD_EP_SetStall+0x7e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e01c      	b.n	80036e4 <HAL_PCD_EP_SetStall+0xb8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f004 fc06 	bl	8007eca <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d108      	bne.n	80036da <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f004 fd2b 	bl	8008130 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	7912      	ldrb	r2, [r2, #4]
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e040      	b.n	800378c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800370a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800370e:	2b00      	cmp	r3, #0
 8003710:	da0e      	bge.n	8003730 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	f003 0207 	and.w	r2, r3, #7
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	3310      	adds	r3, #16
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4413      	add	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	705a      	strb	r2, [r3, #1]
 800372e:	e00e      	b.n	800374e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 0207 	and.w	r2, r3, #7
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	b2da      	uxtb	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_PCD_EP_ClrStall+0x82>
 800376a:	2302      	movs	r3, #2
 800376c:	e00e      	b.n	800378c <HAL_PCD_EP_ClrStall+0xa0>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	4618      	mov	r0, r3
 800377e:	f004 fbf4 	bl	8007f6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b096      	sub	sp, #88	@ 0x58
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800379c:	e3bb      	b.n	8003f16 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037a6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80037aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80037b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f040 8175 	bne.w	8003aac <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80037c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d14e      	bne.n	800386c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	81fb      	strh	r3, [r7, #14]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	89fb      	ldrh	r3, [r7, #14]
 80037e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3310      	adds	r3, #16
 80037f6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003800:	b29b      	uxth	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	3302      	adds	r3, #2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003822:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	441a      	add	r2, r3
 800382e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003830:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003832:	2100      	movs	r1, #0
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f006 faa8 	bl	8009d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7b5b      	ldrb	r3, [r3, #13]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8368 	beq.w	8003f16 <PCD_EP_ISR_Handler+0x782>
 8003846:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 8363 	bne.w	8003f16 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	7b5b      	ldrb	r3, [r3, #13]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800385a:	b2da      	uxtb	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	735a      	strb	r2, [r3, #13]
 800386a:	e354      	b.n	8003f16 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003872:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800387e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003886:	2b00      	cmp	r3, #0
 8003888:	d034      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	3306      	adds	r3, #6
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80038c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80038c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f004 fc82 	bl	80081d2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80038da:	4013      	ands	r3, r2
 80038dc:	823b      	strh	r3, [r7, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	8a3a      	ldrh	r2, [r7, #16]
 80038e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038e8:	b292      	uxth	r2, r2
 80038ea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f006 fa1f 	bl	8009d30 <HAL_PCD_SetupStageCallback>
 80038f2:	e310      	b.n	8003f16 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f280 830c 	bge.w	8003f16 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29a      	uxth	r2, r3
 8003906:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800390a:	4013      	ands	r3, r2
 800390c:	83fb      	strh	r3, [r7, #30]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	8bfa      	ldrh	r2, [r7, #30]
 8003914:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003918:	b292      	uxth	r2, r2
 800391a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	3306      	adds	r3, #6
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003946:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d019      	beq.n	8003984 <PCD_EP_ISR_Handler+0x1f0>
 8003950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d015      	beq.n	8003984 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395e:	6959      	ldr	r1, [r3, #20]
 8003960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003962:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003966:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003968:	b29b      	uxth	r3, r3
 800396a:	f004 fc32 	bl	80081d2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800396e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	441a      	add	r2, r3
 8003978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800397c:	2100      	movs	r1, #0
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f006 f9e8 	bl	8009d54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800398e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 82bd 	bne.w	8003f16 <PCD_EP_ISR_Handler+0x782>
 800399c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80039a0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80039a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039a8:	f000 82b5 	beq.w	8003f16 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	4413      	add	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80039e2:	d91d      	bls.n	8003a20 <PCD_EP_ISR_Handler+0x28c>
 80039e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <PCD_EP_ISR_Handler+0x26a>
 80039f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039fa:	3b01      	subs	r3, #1
 80039fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	029b      	lsls	r3, r3, #10
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	801a      	strh	r2, [r3, #0]
 8003a1e:	e026      	b.n	8003a6e <PCD_EP_ISR_Handler+0x2da>
 8003a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <PCD_EP_ISR_Handler+0x2aa>
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	e017      	b.n	8003a6e <PCD_EP_ISR_Handler+0x2da>
 8003a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d002      	beq.n	8003a58 <PCD_EP_ISR_Handler+0x2c4>
 8003a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a54:	3301      	adds	r3, #1
 8003a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	029b      	lsls	r3, r3, #10
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	4313      	orrs	r3, r2
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a7e:	827b      	strh	r3, [r7, #18]
 8003a80:	8a7b      	ldrh	r3, [r7, #18]
 8003a82:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003a86:	827b      	strh	r3, [r7, #18]
 8003a88:	8a7b      	ldrh	r3, [r7, #18]
 8003a8a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003a8e:	827b      	strh	r3, [r7, #18]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	8a7b      	ldrh	r3, [r7, #18]
 8003a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8013      	strh	r3, [r2, #0]
 8003aaa:	e234      	b.n	8003f16 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ac0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f280 80fc 	bge.w	8003cc2 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003af8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003afc:	b292      	uxth	r2, r2
 8003afe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b00:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b18:	7b1b      	ldrb	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d125      	bne.n	8003b6a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	3306      	adds	r3, #6
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6812      	ldr	r2, [r2, #0]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b46:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003b4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 8092 	beq.w	8003c78 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5a:	6959      	ldr	r1, [r3, #20]
 8003b5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b5e:	88da      	ldrh	r2, [r3, #6]
 8003b60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003b64:	f004 fb35 	bl	80081d2 <USB_ReadPMA>
 8003b68:	e086      	b.n	8003c78 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b6c:	78db      	ldrb	r3, [r3, #3]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d10a      	bne.n	8003b88 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003b72:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b76:	461a      	mov	r2, r3
 8003b78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f9d9 	bl	8003f32 <HAL_PCD_EP_DB_Receive>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003b86:	e077      	b.n	8003c78 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	441a      	add	r2, r3
 8003bb4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d024      	beq.n	8003c30 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c0e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c12:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02e      	beq.n	8003c78 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	6959      	ldr	r1, [r3, #20]
 8003c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c24:	891a      	ldrh	r2, [r3, #8]
 8003c26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c2a:	f004 fad2 	bl	80081d2 <USB_ReadPMA>
 8003c2e:	e023      	b.n	8003c78 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	3306      	adds	r3, #6
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c58:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003c5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d009      	beq.n	8003c78 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6a:	6959      	ldr	r1, [r3, #20]
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c6e:	895a      	ldrh	r2, [r3, #10]
 8003c70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c74:	f004 faad 	bl	80081d2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c80:	441a      	add	r2, r3
 8003c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003c8e:	441a      	add	r2, r3
 8003c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <PCD_EP_ISR_Handler+0x514>
 8003c9c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d206      	bcs.n	8003cb6 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f006 f850 	bl	8009d54 <HAL_PCD_DataOutStageCallback>
 8003cb4:	e005      	b.n	8003cc2 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f002 fd53 	bl	8006768 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003cc2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8123 	beq.w	8003f16 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003cd0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	3310      	adds	r3, #16
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cfe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d22:	78db      	ldrb	r3, [r3, #3]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	f040 80a2 	bne.w	8003e6e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8003d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d32:	7b1b      	ldrb	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8093 	beq.w	8003e60 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d3a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d046      	beq.n	8003dd4 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d48:	785b      	ldrb	r3, [r3, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d126      	bne.n	8003d9c <PCD_EP_ISR_Handler+0x608>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	4413      	add	r3, r2
 8003d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	011a      	lsls	r2, r3, #4
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	4413      	add	r3, r2
 8003d70:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	801a      	strh	r2, [r3, #0]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	e061      	b.n	8003e60 <PCD_EP_ISR_Handler+0x6cc>
 8003d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d15d      	bne.n	8003e60 <PCD_EP_ISR_Handler+0x6cc>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	4413      	add	r3, r2
 8003dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	011a      	lsls	r2, r3, #4
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dce:	2200      	movs	r2, #0
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e045      	b.n	8003e60 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ddc:	785b      	ldrb	r3, [r3, #1]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d126      	bne.n	8003e30 <PCD_EP_ISR_Handler+0x69c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	4413      	add	r3, r2
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	011a      	lsls	r2, r3, #4
 8003e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e02:	4413      	add	r3, r2
 8003e04:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	801a      	strh	r2, [r3, #0]
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	801a      	strh	r2, [r3, #0]
 8003e2e:	e017      	b.n	8003e60 <PCD_EP_ISR_Handler+0x6cc>
 8003e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d113      	bne.n	8003e60 <PCD_EP_ISR_Handler+0x6cc>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e46:	4413      	add	r3, r2
 8003e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	011a      	lsls	r2, r3, #4
 8003e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e52:	4413      	add	r3, r2
 8003e54:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f005 ff8f 	bl	8009d8a <HAL_PCD_DataInStageCallback>
 8003e6c:	e053      	b.n	8003f16 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e6e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d146      	bne.n	8003f08 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	461a      	mov	r2, r3
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3302      	adds	r3, #2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d907      	bls.n	8003ec2 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003eba:	1ad2      	subs	r2, r2, r3
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ebe:	619a      	str	r2, [r3, #24]
 8003ec0:	e002      	b.n	8003ec8 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f005 ff57 	bl	8009d8a <HAL_PCD_DataInStageCallback>
 8003edc:	e01b      	b.n	8003f16 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ee6:	441a      	add	r2, r3
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eea:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003ef4:	441a      	add	r2, r3
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 fc31 	bl	8006768 <USB_EPStartXfer>
 8003f06:	e006      	b.n	8003f16 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003f08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f91b 	bl	800414c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	b21b      	sxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f6ff ac3b 	blt.w	800379e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3758      	adds	r7, #88	@ 0x58
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b088      	sub	sp, #32
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d07e      	beq.n	8004048 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3302      	adds	r3, #2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	6812      	ldr	r2, [r2, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	8b7b      	ldrh	r3, [r7, #26]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d306      	bcc.n	8003f8c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	8b7b      	ldrh	r3, [r7, #26]
 8003f84:	1ad2      	subs	r2, r2, r3
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	619a      	str	r2, [r3, #24]
 8003f8a:	e002      	b.n	8003f92 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d123      	bne.n	8003fe2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb4:	833b      	strh	r3, [r7, #24]
 8003fb6:	8b3b      	ldrh	r3, [r7, #24]
 8003fb8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003fbc:	833b      	strh	r3, [r7, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	441a      	add	r2, r3
 8003fcc:	8b3b      	ldrh	r3, [r7, #24]
 8003fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01f      	beq.n	800402c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004006:	82fb      	strh	r3, [r7, #22]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	8afb      	ldrh	r3, [r7, #22]
 8004018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800401c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004024:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004028:	b29b      	uxth	r3, r3
 800402a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800402c:	8b7b      	ldrh	r3, [r7, #26]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 8087 	beq.w	8004142 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6959      	ldr	r1, [r3, #20]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	891a      	ldrh	r2, [r3, #8]
 8004040:	8b7b      	ldrh	r3, [r7, #26]
 8004042:	f004 f8c6 	bl	80081d2 <USB_ReadPMA>
 8004046:	e07c      	b.n	8004142 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004050:	b29b      	uxth	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	3306      	adds	r3, #6
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004070:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	8b7b      	ldrh	r3, [r7, #26]
 8004078:	429a      	cmp	r2, r3
 800407a:	d306      	bcc.n	800408a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	699a      	ldr	r2, [r3, #24]
 8004080:	8b7b      	ldrh	r3, [r7, #26]
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	619a      	str	r2, [r3, #24]
 8004088:	e002      	b.n	8004090 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d123      	bne.n	80040e0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b2:	83fb      	strh	r3, [r7, #30]
 80040b4:	8bfb      	ldrh	r3, [r7, #30]
 80040b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80040ba:	83fb      	strh	r3, [r7, #30]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	8bfb      	ldrh	r3, [r7, #30]
 80040cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80040d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80040d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040dc:	b29b      	uxth	r3, r3
 80040de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11f      	bne.n	800412a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004104:	83bb      	strh	r3, [r7, #28]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	441a      	add	r2, r3
 8004114:	8bbb      	ldrh	r3, [r7, #28]
 8004116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800411a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800411e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004122:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004126:	b29b      	uxth	r3, r3
 8004128:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800412a:	8b7b      	ldrh	r3, [r7, #26]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	6959      	ldr	r1, [r3, #20]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	895a      	ldrh	r2, [r3, #10]
 800413c:	8b7b      	ldrh	r3, [r7, #26]
 800413e:	f004 f848 	bl	80081d2 <USB_ReadPMA>
    }
  }

  return count;
 8004142:	8b7b      	ldrh	r3, [r7, #26]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b0a4      	sub	sp, #144	@ 0x90
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004160:	2b00      	cmp	r3, #0
 8004162:	f000 81dd 	beq.w	8004520 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	3302      	adds	r3, #2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800419a:	429a      	cmp	r2, r3
 800419c:	d907      	bls.n	80041ae <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80041a6:	1ad2      	subs	r2, r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	619a      	str	r2, [r3, #24]
 80041ac:	e002      	b.n	80041b4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f040 80b9 	bne.w	8004330 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d126      	bne.n	8004214 <HAL_PCD_EP_DB_Transmit+0xc8>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041da:	4413      	add	r3, r2
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	011a      	lsls	r2, r3, #4
 80041e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e6:	4413      	add	r3, r2
 80041e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b29b      	uxth	r3, r3
 8004204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800420c:	b29a      	uxth	r2, r3
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e01a      	b.n	800424a <HAL_PCD_EP_DB_Transmit+0xfe>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d116      	bne.n	800424a <HAL_PCD_EP_DB_Transmit+0xfe>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800422a:	b29b      	uxth	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004230:	4413      	add	r3, r2
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	011a      	lsls	r2, r3, #4
 800423a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423c:	4413      	add	r3, r2
 800423e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
 8004244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004246:	2200      	movs	r2, #0
 8004248:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	785b      	ldrb	r3, [r3, #1]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d126      	bne.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	4413      	add	r3, r2
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	011a      	lsls	r2, r3, #4
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	4413      	add	r3, r2
 800427a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800427e:	61bb      	str	r3, [r7, #24]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	b29b      	uxth	r3, r3
 8004286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800428a:	b29a      	uxth	r2, r3
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800429a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800429e:	b29a      	uxth	r2, r3
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e017      	b.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d113      	bne.n	80042d6 <HAL_PCD_EP_DB_Transmit+0x18a>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	461a      	mov	r2, r3
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	4413      	add	r3, r2
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	011a      	lsls	r2, r3, #4
 80042c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c8:	4413      	add	r3, r2
 80042ca:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80042ce:	623b      	str	r3, [r7, #32]
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	2200      	movs	r2, #0
 80042d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	4619      	mov	r1, r3
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f005 fd54 	bl	8009d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042e2:	88fb      	ldrh	r3, [r7, #6]
 80042e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 82fc 	beq.w	80048e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004308:	82fb      	strh	r3, [r7, #22]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	8afb      	ldrh	r3, [r7, #22]
 800431a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800431e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004322:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800432a:	b29b      	uxth	r3, r3
 800432c:	8013      	strh	r3, [r2, #0]
 800432e:	e2da      	b.n	80048e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004330:	88fb      	ldrh	r3, [r7, #6]
 8004332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d021      	beq.n	800437e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004354:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	441a      	add	r2, r3
 8004366:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800436a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800436e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004372:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004376:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800437a:	b29b      	uxth	r3, r3
 800437c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004384:	2b01      	cmp	r3, #1
 8004386:	f040 82ae 	bne.w	80048e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004392:	441a      	add	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043a0:	441a      	add	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6a1a      	ldr	r2, [r3, #32]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d30b      	bcc.n	80043ca <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6a1a      	ldr	r2, [r3, #32]
 80043be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043c2:	1ad2      	subs	r2, r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	621a      	str	r2, [r3, #32]
 80043c8:	e017      	b.n	80043fa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d108      	bne.n	80043e4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80043d2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80043d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80043e2:	e00a      	b.n	80043fa <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d165      	bne.n	80044ce <HAL_PCD_EP_DB_Transmit+0x382>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004410:	b29b      	uxth	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004416:	4413      	add	r3, r2
 8004418:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	011a      	lsls	r2, r3, #4
 8004420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004422:	4413      	add	r3, r2
 8004424:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004428:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004434:	b29a      	uxth	r2, r3
 8004436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004438:	801a      	strh	r2, [r3, #0]
 800443a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800443e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004440:	d91d      	bls.n	800447e <HAL_PCD_EP_DB_Transmit+0x332>
 8004442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800444a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <HAL_PCD_EP_DB_Transmit+0x310>
 8004456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004458:	3b01      	subs	r3, #1
 800445a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29a      	uxth	r2, r3
 8004462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004464:	b29b      	uxth	r3, r3
 8004466:	029b      	lsls	r3, r3, #10
 8004468:	b29b      	uxth	r3, r3
 800446a:	4313      	orrs	r3, r2
 800446c:	b29b      	uxth	r3, r3
 800446e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004476:	b29a      	uxth	r2, r3
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	801a      	strh	r2, [r3, #0]
 800447c:	e044      	b.n	8004508 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800447e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10a      	bne.n	800449c <HAL_PCD_EP_DB_Transmit+0x350>
 8004486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004494:	b29a      	uxth	r2, r3
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	e035      	b.n	8004508 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800449c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_PCD_EP_DB_Transmit+0x36a>
 80044b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044b2:	3301      	adds	r3, #1
 80044b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044be:	b29b      	uxth	r3, r3
 80044c0:	029b      	lsls	r3, r3, #10
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	4313      	orrs	r3, r2
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	e01c      	b.n	8004508 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d118      	bne.n	8004508 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	647b      	str	r3, [r7, #68]	@ 0x44
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ea:	4413      	add	r3, r2
 80044ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	011a      	lsls	r2, r3, #4
 80044f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f6:	4413      	add	r3, r2
 80044f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004502:	b29a      	uxth	r2, r3
 8004504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004506:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6959      	ldr	r1, [r3, #20]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	891a      	ldrh	r2, [r3, #8]
 8004514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004518:	b29b      	uxth	r3, r3
 800451a:	f003 fe14 	bl	8008146 <USB_WritePMA>
 800451e:	e1e2      	b.n	80048e6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004528:	b29b      	uxth	r3, r3
 800452a:	461a      	mov	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	3306      	adds	r3, #6
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004548:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	699a      	ldr	r2, [r3, #24]
 8004550:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004554:	429a      	cmp	r2, r3
 8004556:	d307      	bcc.n	8004568 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004560:	1ad2      	subs	r2, r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	619a      	str	r2, [r3, #24]
 8004566:	e002      	b.n	800456e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b00      	cmp	r3, #0
 8004574:	f040 80c0 	bne.w	80046f8 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d126      	bne.n	80045ce <HAL_PCD_EP_DB_Transmit+0x482>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800458e:	b29b      	uxth	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004594:	4413      	add	r3, r2
 8004596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	011a      	lsls	r2, r3, #4
 800459e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045a0:	4413      	add	r3, r2
 80045a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045b6:	801a      	strh	r2, [r3, #0]
 80045b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	e01a      	b.n	8004604 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d116      	bne.n	8004604 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	667b      	str	r3, [r7, #100]	@ 0x64
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045ea:	4413      	add	r3, r2
 80045ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	011a      	lsls	r2, r3, #4
 80045f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045f6:	4413      	add	r3, r2
 80045f8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80045fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004600:	2200      	movs	r2, #0
 8004602:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	677b      	str	r3, [r7, #116]	@ 0x74
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d12b      	bne.n	800466a <HAL_PCD_EP_DB_Transmit+0x51e>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004626:	4413      	add	r3, r2
 8004628:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	011a      	lsls	r2, r3, #4
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	4413      	add	r3, r2
 8004634:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004638:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800463c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29b      	uxth	r3, r3
 8004644:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004648:	b29a      	uxth	r2, r3
 800464a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800465c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004660:	b29a      	uxth	r2, r3
 8004662:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004666:	801a      	strh	r2, [r3, #0]
 8004668:	e017      	b.n	800469a <HAL_PCD_EP_DB_Transmit+0x54e>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	785b      	ldrb	r3, [r3, #1]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d113      	bne.n	800469a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800467a:	b29b      	uxth	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004680:	4413      	add	r3, r2
 8004682:	677b      	str	r3, [r7, #116]	@ 0x74
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	011a      	lsls	r2, r3, #4
 800468a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800468c:	4413      	add	r3, r2
 800468e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004692:	673b      	str	r3, [r7, #112]	@ 0x70
 8004694:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004696:	2200      	movs	r2, #0
 8004698:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f005 fb72 	bl	8009d8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f040 811a 	bne.w	80048e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046cc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80046e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	8013      	strh	r3, [r2, #0]
 80046f6:	e0f6      	b.n	80048e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80046f8:	88fb      	ldrh	r3, [r7, #6]
 80046fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d121      	bne.n	8004746 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800473a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800473e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004742:	b29b      	uxth	r3, r3
 8004744:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800474c:	2b01      	cmp	r3, #1
 800474e:	f040 80ca 	bne.w	80048e6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	695a      	ldr	r2, [r3, #20]
 8004756:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800475a:	441a      	add	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004768:	441a      	add	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	429a      	cmp	r2, r3
 8004778:	d30b      	bcc.n	8004792 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800478a:	1ad2      	subs	r2, r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	621a      	str	r2, [r3, #32]
 8004790:	e017      	b.n	80047c2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800479a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800479e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047aa:	e00a      	b.n	80047c2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	785b      	ldrb	r3, [r3, #1]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d165      	bne.n	800489c <HAL_PCD_EP_DB_Transmit+0x750>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047de:	b29b      	uxth	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047e4:	4413      	add	r3, r2
 80047e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	011a      	lsls	r2, r3, #4
 80047ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047f0:	4413      	add	r3, r2
 80047f2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80047f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004802:	b29a      	uxth	r2, r3
 8004804:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480c:	2b3e      	cmp	r3, #62	@ 0x3e
 800480e:	d91d      	bls.n	800484c <HAL_PCD_EP_DB_Transmit+0x700>
 8004810:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <HAL_PCD_EP_DB_Transmit+0x6de>
 8004824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004826:	3b01      	subs	r3, #1
 8004828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29a      	uxth	r2, r3
 8004830:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004832:	b29b      	uxth	r3, r3
 8004834:	029b      	lsls	r3, r3, #10
 8004836:	b29b      	uxth	r3, r3
 8004838:	4313      	orrs	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004844:	b29a      	uxth	r2, r3
 8004846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e041      	b.n	80048d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800484c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <HAL_PCD_EP_DB_Transmit+0x71e>
 8004854:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800485e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004862:	b29a      	uxth	r2, r3
 8004864:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	e032      	b.n	80048d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800486a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_PCD_EP_DB_Transmit+0x738>
 800487e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004880:	3301      	adds	r3, #1
 8004882:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29a      	uxth	r2, r3
 800488a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800488c:	b29b      	uxth	r3, r3
 800488e:	029b      	lsls	r3, r3, #10
 8004890:	b29b      	uxth	r3, r3
 8004892:	4313      	orrs	r3, r2
 8004894:	b29a      	uxth	r2, r3
 8004896:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	e019      	b.n	80048d0 <HAL_PCD_EP_DB_Transmit+0x784>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	785b      	ldrb	r3, [r3, #1]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d115      	bne.n	80048d0 <HAL_PCD_EP_DB_Transmit+0x784>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048b2:	4413      	add	r3, r2
 80048b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	011a      	lsls	r2, r3, #4
 80048bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048be:	4413      	add	r3, r2
 80048c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ce:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6959      	ldr	r1, [r3, #20]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	895a      	ldrh	r2, [r3, #10]
 80048dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	f003 fc30 	bl	8008146 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004900:	82bb      	strh	r3, [r7, #20]
 8004902:	8abb      	ldrh	r3, [r7, #20]
 8004904:	f083 0310 	eor.w	r3, r3, #16
 8004908:	82bb      	strh	r3, [r7, #20]
 800490a:	8abb      	ldrh	r3, [r7, #20]
 800490c:	f083 0320 	eor.w	r3, r3, #32
 8004910:	82bb      	strh	r3, [r7, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	441a      	add	r2, r3
 8004920:	8abb      	ldrh	r3, [r7, #20]
 8004922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800492a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800492e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004932:	b29b      	uxth	r3, r3
 8004934:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3790      	adds	r7, #144	@ 0x90
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	460b      	mov	r3, r1
 800494c:	817b      	strh	r3, [r7, #10]
 800494e:	4613      	mov	r3, r2
 8004950:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004952:	897b      	ldrh	r3, [r7, #10]
 8004954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	f003 0207 	and.w	r2, r3, #7
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	3310      	adds	r3, #16
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4413      	add	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e009      	b.n	800498a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004976:	897a      	ldrh	r2, [r7, #10]
 8004978:	4613      	mov	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4413      	add	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800498a:	893b      	ldrh	r3, [r7, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	b29a      	uxth	r2, r3
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	80da      	strh	r2, [r3, #6]
 800499e:	e00b      	b.n	80049b8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2201      	movs	r2, #1
 80049a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e272      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8087 	beq.w	8004af2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049e4:	4b92      	ldr	r3, [pc, #584]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d00c      	beq.n	8004a0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049f0:	4b8f      	ldr	r3, [pc, #572]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 030c 	and.w	r3, r3, #12
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d112      	bne.n	8004a22 <HAL_RCC_OscConfig+0x5e>
 80049fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a08:	d10b      	bne.n	8004a22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0a:	4b89      	ldr	r3, [pc, #548]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d06c      	beq.n	8004af0 <HAL_RCC_OscConfig+0x12c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d168      	bne.n	8004af0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e24c      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_OscConfig+0x76>
 8004a2c:	4b80      	ldr	r3, [pc, #512]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7f      	ldr	r2, [pc, #508]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	e02e      	b.n	8004a98 <HAL_RCC_OscConfig+0xd4>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x98>
 8004a42:	4b7b      	ldr	r3, [pc, #492]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a7a      	ldr	r2, [pc, #488]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	4b78      	ldr	r3, [pc, #480]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a77      	ldr	r2, [pc, #476]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xd4>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0xbc>
 8004a66:	4b72      	ldr	r3, [pc, #456]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a71      	ldr	r2, [pc, #452]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b6f      	ldr	r3, [pc, #444]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a6e      	ldr	r2, [pc, #440]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xd4>
 8004a80:	4b6b      	ldr	r3, [pc, #428]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a6a      	ldr	r2, [pc, #424]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b68      	ldr	r3, [pc, #416]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a67      	ldr	r2, [pc, #412]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fd ff7c 	bl	800299c <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fd ff78 	bl	800299c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	@ 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e200      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b5d      	ldr	r3, [pc, #372]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xe4>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd ff68 	bl	800299c <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fd ff64 	bl	800299c <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	@ 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e1ec      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	4b53      	ldr	r3, [pc, #332]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x10c>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d063      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004afe:	4b4c      	ldr	r3, [pc, #304]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b0a:	4b49      	ldr	r3, [pc, #292]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d11c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x18c>
 8004b16:	4b46      	ldr	r3, [pc, #280]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b22:	4b43      	ldr	r3, [pc, #268]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_RCC_OscConfig+0x176>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e1c0      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4939      	ldr	r1, [pc, #228]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	e03a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b36      	ldr	r3, [pc, #216]	@ (8004c34 <HAL_RCC_OscConfig+0x270>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fd ff1d 	bl	800299c <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fd ff19 	bl	800299c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1a1      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	4b2d      	ldr	r3, [pc, #180]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b2a      	ldr	r3, [pc, #168]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4927      	ldr	r1, [pc, #156]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	4b26      	ldr	r3, [pc, #152]	@ (8004c34 <HAL_RCC_OscConfig+0x270>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fd fefc 	bl	800299c <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7fd fef8 	bl	800299c <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e180      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d03a      	beq.n	8004c48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d019      	beq.n	8004c0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b17      	ldr	r3, [pc, #92]	@ (8004c38 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be0:	f7fd fedc 	bl	800299c <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be8:	f7fd fed8 	bl	800299c <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e160      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004c30 <HAL_RCC_OscConfig+0x26c>)
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c06:	2001      	movs	r0, #1
 8004c08:	f000 fa9c 	bl	8005144 <RCC_Delay>
 8004c0c:	e01c      	b.n	8004c48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <HAL_RCC_OscConfig+0x274>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c14:	f7fd fec2 	bl	800299c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c1a:	e00f      	b.n	8004c3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1c:	f7fd febe 	bl	800299c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d908      	bls.n	8004c3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e146      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	42420000 	.word	0x42420000
 8004c38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c3c:	4b92      	ldr	r3, [pc, #584]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e9      	bne.n	8004c1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 80a6 	beq.w	8004da2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c56:	2300      	movs	r3, #0
 8004c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5a:	4b8b      	ldr	r3, [pc, #556]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c66:	4b88      	ldr	r3, [pc, #544]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	4a87      	ldr	r2, [pc, #540]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c70:	61d3      	str	r3, [r2, #28]
 8004c72:	4b85      	ldr	r3, [pc, #532]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c7a:	60bb      	str	r3, [r7, #8]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c82:	4b82      	ldr	r3, [pc, #520]	@ (8004e8c <HAL_RCC_OscConfig+0x4c8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d118      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e8c <HAL_RCC_OscConfig+0x4c8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a7e      	ldr	r2, [pc, #504]	@ (8004e8c <HAL_RCC_OscConfig+0x4c8>)
 8004c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd fe7f 	bl	800299c <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca2:	f7fd fe7b 	bl	800299c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b64      	cmp	r3, #100	@ 0x64
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e103      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb4:	4b75      	ldr	r3, [pc, #468]	@ (8004e8c <HAL_RCC_OscConfig+0x4c8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x312>
 8004cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6213      	str	r3, [r2, #32]
 8004cd4:	e02d      	b.n	8004d32 <HAL_RCC_OscConfig+0x36e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x334>
 8004cde:	4b6a      	ldr	r3, [pc, #424]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	4a69      	ldr	r2, [pc, #420]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	6213      	str	r3, [r2, #32]
 8004cea:	4b67      	ldr	r3, [pc, #412]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	4a66      	ldr	r2, [pc, #408]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	6213      	str	r3, [r2, #32]
 8004cf6:	e01c      	b.n	8004d32 <HAL_RCC_OscConfig+0x36e>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b05      	cmp	r3, #5
 8004cfe:	d10c      	bne.n	8004d1a <HAL_RCC_OscConfig+0x356>
 8004d00:	4b61      	ldr	r3, [pc, #388]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	4a60      	ldr	r2, [pc, #384]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d06:	f043 0304 	orr.w	r3, r3, #4
 8004d0a:	6213      	str	r3, [r2, #32]
 8004d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	4a5d      	ldr	r2, [pc, #372]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	6213      	str	r3, [r2, #32]
 8004d18:	e00b      	b.n	8004d32 <HAL_RCC_OscConfig+0x36e>
 8004d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	4a5a      	ldr	r2, [pc, #360]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	6213      	str	r3, [r2, #32]
 8004d26:	4b58      	ldr	r3, [pc, #352]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4a57      	ldr	r2, [pc, #348]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	f023 0304 	bic.w	r3, r3, #4
 8004d30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d015      	beq.n	8004d66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3a:	f7fd fe2f 	bl	800299c <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d40:	e00a      	b.n	8004d58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d42:	f7fd fe2b 	bl	800299c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e0b1      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	4b4b      	ldr	r3, [pc, #300]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ee      	beq.n	8004d42 <HAL_RCC_OscConfig+0x37e>
 8004d64:	e014      	b.n	8004d90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d66:	f7fd fe19 	bl	800299c <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6e:	f7fd fe15 	bl	800299c <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e09b      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d84:	4b40      	ldr	r3, [pc, #256]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ee      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d90:	7dfb      	ldrb	r3, [r7, #23]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d105      	bne.n	8004da2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d96:	4b3c      	ldr	r3, [pc, #240]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	4a3b      	ldr	r2, [pc, #236]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004da0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8087 	beq.w	8004eba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dac:	4b36      	ldr	r3, [pc, #216]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 030c 	and.w	r3, r3, #12
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d061      	beq.n	8004e7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d146      	bne.n	8004e4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc0:	4b33      	ldr	r3, [pc, #204]	@ (8004e90 <HAL_RCC_OscConfig+0x4cc>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fd fde9 	bl	800299c <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dce:	f7fd fde5 	bl	800299c <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e06d      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004de0:	4b29      	ldr	r3, [pc, #164]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df4:	d108      	bne.n	8004e08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004df6:	4b24      	ldr	r3, [pc, #144]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	4921      	ldr	r1, [pc, #132]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e08:	4b1f      	ldr	r3, [pc, #124]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a19      	ldr	r1, [r3, #32]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	430b      	orrs	r3, r1
 8004e1a:	491b      	ldr	r1, [pc, #108]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e20:	4b1b      	ldr	r3, [pc, #108]	@ (8004e90 <HAL_RCC_OscConfig+0x4cc>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e26:	f7fd fdb9 	bl	800299c <HAL_GetTick>
 8004e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e2c:	e008      	b.n	8004e40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2e:	f7fd fdb5 	bl	800299c <HAL_GetTick>
 8004e32:	4602      	mov	r2, r0
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e03d      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e40:	4b11      	ldr	r3, [pc, #68]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f0      	beq.n	8004e2e <HAL_RCC_OscConfig+0x46a>
 8004e4c:	e035      	b.n	8004eba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4e:	4b10      	ldr	r3, [pc, #64]	@ (8004e90 <HAL_RCC_OscConfig+0x4cc>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd fda2 	bl	800299c <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd fd9e 	bl	800299c <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e026      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e6e:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <HAL_RCC_OscConfig+0x4c4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <HAL_RCC_OscConfig+0x498>
 8004e7a:	e01e      	b.n	8004eba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e019      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	40007000 	.word	0x40007000
 8004e90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_RCC_OscConfig+0x500>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d106      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0d0      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004edc:	4b6a      	ldr	r3, [pc, #424]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d910      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b67      	ldr	r3, [pc, #412]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 0207 	bic.w	r2, r3, #7
 8004ef2:	4965      	ldr	r1, [pc, #404]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b63      	ldr	r3, [pc, #396]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0b8      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d020      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0304 	and.w	r3, r3, #4
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f24:	4b59      	ldr	r3, [pc, #356]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	4a58      	ldr	r2, [pc, #352]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0308 	and.w	r3, r3, #8
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d005      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f3c:	4b53      	ldr	r3, [pc, #332]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4a52      	ldr	r2, [pc, #328]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b50      	ldr	r3, [pc, #320]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	494d      	ldr	r1, [pc, #308]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d040      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6e:	4b47      	ldr	r3, [pc, #284]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d115      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e07f      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d107      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f86:	4b41      	ldr	r3, [pc, #260]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e073      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f96:	4b3d      	ldr	r3, [pc, #244]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06b      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa6:	4b39      	ldr	r3, [pc, #228]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f023 0203 	bic.w	r2, r3, #3
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	4936      	ldr	r1, [pc, #216]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb8:	f7fd fcf0 	bl	800299c <HAL_GetTick>
 8004fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc0:	f7fd fcec 	bl	800299c <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e053      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f003 020c 	and.w	r2, r3, #12
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d1eb      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b27      	ldr	r3, [pc, #156]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d210      	bcs.n	8005018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b24      	ldr	r3, [pc, #144]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 0207 	bic.w	r2, r3, #7
 8004ffe:	4922      	ldr	r1, [pc, #136]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b20      	ldr	r3, [pc, #128]	@ (8005088 <HAL_RCC_ClockConfig+0x1c0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e032      	b.n	800507e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d008      	beq.n	8005036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005024:	4b19      	ldr	r3, [pc, #100]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4916      	ldr	r1, [pc, #88]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005032:	4313      	orrs	r3, r2
 8005034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005042:	4b12      	ldr	r3, [pc, #72]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	490e      	ldr	r1, [pc, #56]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005056:	f000 f821 	bl	800509c <HAL_RCC_GetSysClockFreq>
 800505a:	4602      	mov	r2, r0
 800505c:	4b0b      	ldr	r3, [pc, #44]	@ (800508c <HAL_RCC_ClockConfig+0x1c4>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	490a      	ldr	r1, [pc, #40]	@ (8005090 <HAL_RCC_ClockConfig+0x1c8>)
 8005068:	5ccb      	ldrb	r3, [r1, r3]
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	4a09      	ldr	r2, [pc, #36]	@ (8005094 <HAL_RCC_ClockConfig+0x1cc>)
 8005070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005072:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_RCC_ClockConfig+0x1d0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f7fd fc4e 	bl	8002918 <HAL_InitTick>

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40022000 	.word	0x40022000
 800508c:	40021000 	.word	0x40021000
 8005090:	0800e700 	.word	0x0800e700
 8005094:	20000010 	.word	0x20000010
 8005098:	20000014 	.word	0x20000014

0800509c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	2300      	movs	r3, #0
 80050b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x94>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d002      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x30>
 80050c6:	2b08      	cmp	r3, #8
 80050c8:	d003      	beq.n	80050d2 <HAL_RCC_GetSysClockFreq+0x36>
 80050ca:	e027      	b.n	800511c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050cc:	4b19      	ldr	r3, [pc, #100]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ce:	613b      	str	r3, [r7, #16]
      break;
 80050d0:	e027      	b.n	8005122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	0c9b      	lsrs	r3, r3, #18
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	4a17      	ldr	r2, [pc, #92]	@ (8005138 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050dc:	5cd3      	ldrb	r3, [r2, r3]
 80050de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d010      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050ea:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <HAL_RCC_GetSysClockFreq+0x94>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	0c5b      	lsrs	r3, r3, #17
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	4a11      	ldr	r2, [pc, #68]	@ (800513c <HAL_RCC_GetSysClockFreq+0xa0>)
 80050f6:	5cd3      	ldrb	r3, [r2, r3]
 80050f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x98>)
 80050fe:	fb03 f202 	mul.w	r2, r3, r2
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e004      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a0c      	ldr	r2, [pc, #48]	@ (8005140 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005110:	fb02 f303 	mul.w	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	613b      	str	r3, [r7, #16]
      break;
 800511a:	e002      	b.n	8005122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800511c:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <HAL_RCC_GetSysClockFreq+0x98>)
 800511e:	613b      	str	r3, [r7, #16]
      break;
 8005120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005122:	693b      	ldr	r3, [r7, #16]
}
 8005124:	4618      	mov	r0, r3
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	40021000 	.word	0x40021000
 8005134:	007a1200 	.word	0x007a1200
 8005138:	0800e710 	.word	0x0800e710
 800513c:	0800e720 	.word	0x0800e720
 8005140:	003d0900 	.word	0x003d0900

08005144 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <RCC_Delay+0x34>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <RCC_Delay+0x38>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0a5b      	lsrs	r3, r3, #9
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	fb02 f303 	mul.w	r3, r2, r3
 800515e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005160:	bf00      	nop
  }
  while (Delay --);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1e5a      	subs	r2, r3, #1
 8005166:	60fa      	str	r2, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f9      	bne.n	8005160 <RCC_Delay+0x1c>
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	20000010 	.word	0x20000010
 800517c:	10624dd3 	.word	0x10624dd3

08005180 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d07d      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800519c:	2300      	movs	r3, #0
 800519e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a0:	4b4f      	ldr	r3, [pc, #316]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10d      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ac:	4b4c      	ldr	r3, [pc, #304]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	4a4b      	ldr	r2, [pc, #300]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b6:	61d3      	str	r3, [r2, #28]
 80051b8:	4b49      	ldr	r3, [pc, #292]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c8:	4b46      	ldr	r3, [pc, #280]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d118      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d4:	4b43      	ldr	r3, [pc, #268]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a42      	ldr	r2, [pc, #264]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e0:	f7fd fbdc 	bl	800299c <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e6:	e008      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e8:	f7fd fbd8 	bl	800299c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e06d      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fa:	4b3a      	ldr	r3, [pc, #232]	@ (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d0f0      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005206:	4b36      	ldr	r3, [pc, #216]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d02e      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	d027      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005224:	4b2e      	ldr	r3, [pc, #184]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800522c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800522e:	4b2e      	ldr	r3, [pc, #184]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005234:	4b2c      	ldr	r3, [pc, #176]	@ (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800523a:	4a29      	ldr	r2, [pc, #164]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d014      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fd fba7 	bl	800299c <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005250:	e00a      	b.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005252:	f7fd fba3 	bl	800299c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e036      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005268:	4b1d      	ldr	r3, [pc, #116]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ee      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005274:	4b1a      	ldr	r3, [pc, #104]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4917      	ldr	r1, [pc, #92]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005282:	4313      	orrs	r3, r2
 8005284:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005286:	7dfb      	ldrb	r3, [r7, #23]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d105      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800528c:	4b14      	ldr	r3, [pc, #80]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	4a13      	ldr	r2, [pc, #76]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005296:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052a4:	4b0e      	ldr	r3, [pc, #56]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	490b      	ldr	r1, [pc, #44]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c2:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4904      	ldr	r1, [pc, #16]	@ (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000
 80052e4:	40007000 	.word	0x40007000
 80052e8:	42420440 	.word	0x42420440

080052ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e041      	b.n	8005382 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fd f97a 	bl	800260c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 f992 	bl	8005654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
	...

0800538c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d109      	bne.n	80053b0 <HAL_TIM_PWM_Start+0x24>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	bf14      	ite	ne
 80053a8:	2301      	movne	r3, #1
 80053aa:	2300      	moveq	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	e022      	b.n	80053f6 <HAL_TIM_PWM_Start+0x6a>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d109      	bne.n	80053ca <HAL_TIM_PWM_Start+0x3e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	e015      	b.n	80053f6 <HAL_TIM_PWM_Start+0x6a>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d109      	bne.n	80053e4 <HAL_TIM_PWM_Start+0x58>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b01      	cmp	r3, #1
 80053da:	bf14      	ite	ne
 80053dc:	2301      	movne	r3, #1
 80053de:	2300      	moveq	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e008      	b.n	80053f6 <HAL_TIM_PWM_Start+0x6a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e05e      	b.n	80054bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_TIM_PWM_Start+0x82>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2202      	movs	r2, #2
 8005408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800540c:	e013      	b.n	8005436 <HAL_TIM_PWM_Start+0xaa>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b04      	cmp	r3, #4
 8005412:	d104      	bne.n	800541e <HAL_TIM_PWM_Start+0x92>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800541c:	e00b      	b.n	8005436 <HAL_TIM_PWM_Start+0xaa>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d104      	bne.n	800542e <HAL_TIM_PWM_Start+0xa2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800542c:	e003      	b.n	8005436 <HAL_TIM_PWM_Start+0xaa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2201      	movs	r2, #1
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fafe 	bl	8005a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a1e      	ldr	r2, [pc, #120]	@ (80054c4 <HAL_TIM_PWM_Start+0x138>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d107      	bne.n	800545e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800545c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a18      	ldr	r2, [pc, #96]	@ (80054c4 <HAL_TIM_PWM_Start+0x138>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00e      	beq.n	8005486 <HAL_TIM_PWM_Start+0xfa>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005470:	d009      	beq.n	8005486 <HAL_TIM_PWM_Start+0xfa>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a14      	ldr	r2, [pc, #80]	@ (80054c8 <HAL_TIM_PWM_Start+0x13c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d004      	beq.n	8005486 <HAL_TIM_PWM_Start+0xfa>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a12      	ldr	r2, [pc, #72]	@ (80054cc <HAL_TIM_PWM_Start+0x140>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d111      	bne.n	80054aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0307 	and.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d010      	beq.n	80054ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	e007      	b.n	80054ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800

080054d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e0ae      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	f200 809f 	bhi.w	800563c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80054fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	08005539 	.word	0x08005539
 8005508:	0800563d 	.word	0x0800563d
 800550c:	0800563d 	.word	0x0800563d
 8005510:	0800563d 	.word	0x0800563d
 8005514:	08005579 	.word	0x08005579
 8005518:	0800563d 	.word	0x0800563d
 800551c:	0800563d 	.word	0x0800563d
 8005520:	0800563d 	.word	0x0800563d
 8005524:	080055bb 	.word	0x080055bb
 8005528:	0800563d 	.word	0x0800563d
 800552c:	0800563d 	.word	0x0800563d
 8005530:	0800563d 	.word	0x0800563d
 8005534:	080055fb 	.word	0x080055fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f8f6 	bl	8005730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0208 	orr.w	r2, r2, #8
 8005552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6999      	ldr	r1, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	619a      	str	r2, [r3, #24]
      break;
 8005576:	e064      	b.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f93c 	bl	80057fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6999      	ldr	r1, [r3, #24]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	619a      	str	r2, [r3, #24]
      break;
 80055b8:	e043      	b.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f985 	bl	80058d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0208 	orr.w	r2, r2, #8
 80055d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0204 	bic.w	r2, r2, #4
 80055e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69d9      	ldr	r1, [r3, #28]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	61da      	str	r2, [r3, #28]
      break;
 80055f8:	e023      	b.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 f9cf 	bl	80059a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	021a      	lsls	r2, r3, #8
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	61da      	str	r2, [r3, #28]
      break;
 800563a:	e002      	b.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	75fb      	strb	r3, [r7, #23]
      break;
 8005640:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800564a:	7dfb      	ldrb	r3, [r7, #23]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a2f      	ldr	r2, [pc, #188]	@ (8005724 <TIM_Base_SetConfig+0xd0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_Base_SetConfig+0x30>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005672:	d007      	beq.n	8005684 <TIM_Base_SetConfig+0x30>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a2c      	ldr	r2, [pc, #176]	@ (8005728 <TIM_Base_SetConfig+0xd4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_Base_SetConfig+0x30>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a2b      	ldr	r2, [pc, #172]	@ (800572c <TIM_Base_SetConfig+0xd8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d108      	bne.n	8005696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a22      	ldr	r2, [pc, #136]	@ (8005724 <TIM_Base_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d00b      	beq.n	80056b6 <TIM_Base_SetConfig+0x62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a4:	d007      	beq.n	80056b6 <TIM_Base_SetConfig+0x62>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005728 <TIM_Base_SetConfig+0xd4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d003      	beq.n	80056b6 <TIM_Base_SetConfig+0x62>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a1e      	ldr	r2, [pc, #120]	@ (800572c <TIM_Base_SetConfig+0xd8>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d108      	bne.n	80056c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a0d      	ldr	r2, [pc, #52]	@ (8005724 <TIM_Base_SetConfig+0xd0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d103      	bne.n	80056fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d005      	beq.n	800571a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	611a      	str	r2, [r3, #16]
  }
}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800

08005730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	f023 0201 	bic.w	r2, r3, #1
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f023 0302 	bic.w	r3, r3, #2
 8005778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <TIM_OC1_SetConfig+0xc8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10c      	bne.n	80057a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0308 	bic.w	r3, r3, #8
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 0304 	bic.w	r3, r3, #4
 80057a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a13      	ldr	r2, [pc, #76]	@ (80057f8 <TIM_OC1_SetConfig+0xc8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d111      	bne.n	80057d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bc80      	pop	{r7}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40012c00 	.word	0x40012c00

080057fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f023 0210 	bic.w	r2, r3, #16
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0320 	bic.w	r3, r3, #32
 8005846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a1d      	ldr	r2, [pc, #116]	@ (80058cc <TIM_OC2_SetConfig+0xd0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d10d      	bne.n	8005878 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a14      	ldr	r2, [pc, #80]	@ (80058cc <TIM_OC2_SetConfig+0xd0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d113      	bne.n	80058a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800588e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00

080058d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0303 	bic.w	r3, r3, #3
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <TIM_OC3_SetConfig+0xd0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d10d      	bne.n	800594a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <TIM_OC3_SetConfig+0xd0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d113      	bne.n	800597a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40012c00 	.word	0x40012c00

080059a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	031b      	lsls	r3, r3, #12
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a0f      	ldr	r2, [pc, #60]	@ (8005a3c <TIM_OC4_SetConfig+0x98>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d109      	bne.n	8005a18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	019b      	lsls	r3, r3, #6
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	40012c00 	.word	0x40012c00

08005a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2201      	movs	r2, #1
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	401a      	ands	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a1a      	ldr	r2, [r3, #32]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	fa01 f303 	lsl.w	r3, r1, r3
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e046      	b.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a16      	ldr	r2, [pc, #88]	@ (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aec:	d009      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a12      	ldr	r2, [pc, #72]	@ (8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a10      	ldr	r2, [pc, #64]	@ (8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10c      	bne.n	8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bc80      	pop	{r7}
 8005b36:	4770      	bx	lr
 8005b38:	40012c00 	.word	0x40012c00
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800

08005b44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	4638      	mov	r0, r7
 8005b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b6e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005b72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b92:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005b96:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	4013      	ands	r3, r2
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	4638      	mov	r0, r7
 8005be0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b09d      	sub	sp, #116	@ 0x74
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c36:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	78db      	ldrb	r3, [r3, #3]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d81f      	bhi.n	8005c82 <USB_ActivateEndpoint+0x72>
 8005c42:	a201      	add	r2, pc, #4	@ (adr r2, 8005c48 <USB_ActivateEndpoint+0x38>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c59 	.word	0x08005c59
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c8b 	.word	0x08005c8b
 8005c54:	08005c67 	.word	0x08005c67
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005c58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c64:	e012      	b.n	8005c8c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005c66:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c6a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005c6e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c72:	e00b      	b.n	8005c8c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005c74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005c80:	e004      	b.n	8005c8c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005c88:	e000      	b.n	8005c8c <USB_ActivateEndpoint+0x7c>
      break;
 8005c8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	441a      	add	r2, r3
 8005c96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	441a      	add	r2, r3
 8005cda:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005cde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	7b1b      	ldrb	r3, [r3, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 8178 	bne.w	8005fec <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8084 	beq.w	8005e0e <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	4413      	add	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	88db      	ldrh	r3, [r3, #6]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	827b      	strh	r3, [r7, #18]
 8005d48:	8a7b      	ldrh	r3, [r7, #18]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01b      	beq.n	8005d8a <USB_ActivateEndpoint+0x17a>
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d68:	823b      	strh	r3, [r7, #16]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	8a3b      	ldrh	r3, [r7, #16]
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	78db      	ldrb	r3, [r3, #3]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d020      	beq.n	8005dd4 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da8:	81bb      	strh	r3, [r7, #12]
 8005daa:	89bb      	ldrh	r3, [r7, #12]
 8005dac:	f083 0320 	eor.w	r3, r3, #32
 8005db0:	81bb      	strh	r3, [r7, #12]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	441a      	add	r2, r3
 8005dbc:	89bb      	ldrh	r3, [r7, #12]
 8005dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	8013      	strh	r3, [r2, #0]
 8005dd2:	e2d5      	b.n	8006380 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	81fb      	strh	r3, [r7, #14]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	89fb      	ldrh	r3, [r7, #14]
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]
 8005e0c:	e2b8      	b.n	8006380 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1e:	4413      	add	r3, r2
 8005e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	011a      	lsls	r2, r3, #4
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	88db      	ldrh	r3, [r3, #6]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e40:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	4413      	add	r3, r2
 8005e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	011a      	lsls	r2, r3, #4
 8005e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5e:	4413      	add	r3, r2
 8005e60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	801a      	strh	r2, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e7c:	d91d      	bls.n	8005eba <USB_ActivateEndpoint+0x2aa>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	095b      	lsrs	r3, r3, #5
 8005e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 031f 	and.w	r3, r3, #31
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <USB_ActivateEndpoint+0x288>
 8005e92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e94:	3b01      	subs	r3, #1
 8005e96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	029b      	lsls	r3, r3, #10
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	e026      	b.n	8005f08 <USB_ActivateEndpoint+0x2f8>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <USB_ActivateEndpoint+0x2c8>
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e017      	b.n	8005f08 <USB_ActivateEndpoint+0x2f8>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <USB_ActivateEndpoint+0x2e2>
 8005eec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005eee:	3301      	adds	r3, #1
 8005ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	029b      	lsls	r3, r3, #10
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4313      	orrs	r3, r2
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005f16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d01b      	beq.n	8005f58 <USB_ActivateEndpoint+0x348>
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	881b      	ldrh	r3, [r3, #0]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	843b      	strh	r3, [r7, #32]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	441a      	add	r2, r3
 8005f42:	8c3b      	ldrh	r3, [r7, #32]
 8005f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d124      	bne.n	8005faa <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f76:	83bb      	strh	r3, [r7, #28]
 8005f78:	8bbb      	ldrh	r3, [r7, #28]
 8005f7a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005f7e:	83bb      	strh	r3, [r7, #28]
 8005f80:	8bbb      	ldrh	r3, [r7, #28]
 8005f82:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f86:	83bb      	strh	r3, [r7, #28]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	8bbb      	ldrh	r3, [r7, #28]
 8005f94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	8013      	strh	r3, [r2, #0]
 8005fa8:	e1ea      	b.n	8006380 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc0:	83fb      	strh	r3, [r7, #30]
 8005fc2:	8bfb      	ldrh	r3, [r7, #30]
 8005fc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005fc8:	83fb      	strh	r3, [r7, #30]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	441a      	add	r2, r3
 8005fd4:	8bfb      	ldrh	r3, [r7, #30]
 8005fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	8013      	strh	r3, [r2, #0]
 8005fea:	e1c9      	b.n	8006380 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d11e      	bne.n	8006032 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800601c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006024:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800602c:	b29b      	uxth	r3, r3
 800602e:	8013      	strh	r3, [r2, #0]
 8006030:	e01d      	b.n	800606e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	b29b      	uxth	r3, r3
 8006040:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006048:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006078:	b29b      	uxth	r3, r3
 800607a:	461a      	mov	r2, r3
 800607c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800607e:	4413      	add	r3, r2
 8006080:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	011a      	lsls	r2, r3, #4
 8006088:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800608a:	4413      	add	r3, r2
 800608c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006090:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	891b      	ldrh	r3, [r3, #8]
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	b29b      	uxth	r3, r3
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	461a      	mov	r2, r3
 80060b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b2:	4413      	add	r3, r2
 80060b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	011a      	lsls	r2, r3, #4
 80060bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80060c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	895b      	ldrh	r3, [r3, #10]
 80060ca:	085b      	lsrs	r3, r3, #1
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d4:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	785b      	ldrb	r3, [r3, #1]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 8093 	bne.w	8006206 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80060f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80060f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01b      	beq.n	8006134 <USB_ActivateEndpoint+0x524>
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006112:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	441a      	add	r2, r3
 800611e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800612c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006130:	b29b      	uxth	r3, r3
 8006132:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006142:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <USB_ActivateEndpoint+0x574>
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006162:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800617c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006180:	b29b      	uxth	r3, r3
 8006182:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29b      	uxth	r3, r3
 8006192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	873b      	strh	r3, [r7, #56]	@ 0x38
 800619c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800619e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80061a2:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061a6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80061aa:	873b      	strh	r3, [r7, #56]	@ 0x38
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	441a      	add	r2, r3
 80061b6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80061b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
 8006204:	e0bc      	b.n	8006380 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006216:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800621a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01d      	beq.n	800625e <USB_ActivateEndpoint+0x64e>
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006238:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800624a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800624e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006252:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800626e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d01d      	beq.n	80062b6 <USB_ActivateEndpoint+0x6a6>
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006290:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80062a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d024      	beq.n	8006308 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062d4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80062dc:	f083 0320 	eor.w	r3, r3, #32
 80062e0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	441a      	add	r2, r3
 80062ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80062f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006302:	b29b      	uxth	r3, r3
 8006304:	8013      	strh	r3, [r2, #0]
 8006306:	e01d      	b.n	8006344 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	b29b      	uxth	r3, r3
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800631a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800631e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	441a      	add	r2, r3
 800632c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8006330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800633c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006340:	b29b      	uxth	r3, r3
 8006342:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	b29b      	uxth	r3, r3
 8006352:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	441a      	add	r2, r3
 8006368:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800636c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006370:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006374:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800637c:	b29b      	uxth	r3, r3
 800637e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006380:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006384:	4618      	mov	r0, r3
 8006386:	3774      	adds	r7, #116	@ 0x74
 8006388:	46bd      	mov	sp, r7
 800638a:	bc80      	pop	{r7}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006390:	b480      	push	{r7}
 8006392:	b08d      	sub	sp, #52	@ 0x34
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	7b1b      	ldrb	r3, [r3, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 808e 	bne.w	80064c0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	785b      	ldrb	r3, [r3, #1]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d044      	beq.n	8006436 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	81bb      	strh	r3, [r7, #12]
 80063ba:	89bb      	ldrh	r3, [r7, #12]
 80063bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d01b      	beq.n	80063fc <USB_DeactivateEndpoint+0x6c>
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	881b      	ldrh	r3, [r3, #0]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063da:	817b      	strh	r3, [r7, #10]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	441a      	add	r2, r3
 80063e6:	897b      	ldrh	r3, [r7, #10]
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006412:	813b      	strh	r3, [r7, #8]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	893b      	ldrh	r3, [r7, #8]
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
 8006434:	e192      	b.n	800675c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	827b      	strh	r3, [r7, #18]
 8006444:	8a7b      	ldrh	r3, [r7, #18]
 8006446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01b      	beq.n	8006486 <USB_DeactivateEndpoint+0xf6>
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006460:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006464:	823b      	strh	r3, [r7, #16]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	441a      	add	r2, r3
 8006470:	8a3b      	ldrh	r3, [r7, #16]
 8006472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800647e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006482:	b29b      	uxth	r3, r3
 8006484:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649c:	81fb      	strh	r3, [r7, #14]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	441a      	add	r2, r3
 80064a8:	89fb      	ldrh	r3, [r7, #14]
 80064aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	8013      	strh	r3, [r2, #0]
 80064be:	e14d      	b.n	800675c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 80a5 	bne.w	8006614 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	843b      	strh	r3, [r7, #32]
 80064d8:	8c3b      	ldrh	r3, [r7, #32]
 80064da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01b      	beq.n	800651a <USB_DeactivateEndpoint+0x18a>
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f8:	83fb      	strh	r3, [r7, #30]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	441a      	add	r2, r3
 8006504:	8bfb      	ldrh	r3, [r7, #30]
 8006506:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800650a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800650e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006516:	b29b      	uxth	r3, r3
 8006518:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	83bb      	strh	r3, [r7, #28]
 8006528:	8bbb      	ldrh	r3, [r7, #28]
 800652a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652e:	2b00      	cmp	r3, #0
 8006530:	d01b      	beq.n	800656a <USB_DeactivateEndpoint+0x1da>
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006548:	837b      	strh	r3, [r7, #26]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	441a      	add	r2, r3
 8006554:	8b7b      	ldrh	r3, [r7, #26]
 8006556:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800655a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800655e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006562:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	881b      	ldrh	r3, [r3, #0]
 8006576:	b29b      	uxth	r3, r3
 8006578:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006580:	833b      	strh	r3, [r7, #24]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	441a      	add	r2, r3
 800658c:	8b3b      	ldrh	r3, [r7, #24]
 800658e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800659a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800659e:	b29b      	uxth	r3, r3
 80065a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b8:	82fb      	strh	r3, [r7, #22]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	441a      	add	r2, r3
 80065c4:	8afb      	ldrh	r3, [r7, #22]
 80065c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f0:	82bb      	strh	r3, [r7, #20]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	8abb      	ldrh	r3, [r7, #20]
 80065fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006602:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800660a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660e:	b29b      	uxth	r3, r3
 8006610:	8013      	strh	r3, [r2, #0]
 8006612:	e0a3      	b.n	800675c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006622:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <USB_DeactivateEndpoint+0x2d4>
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800663e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006642:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800665c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006672:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01b      	beq.n	80066b4 <USB_DeactivateEndpoint+0x324>
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006692:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	441a      	add	r2, r3
 800669e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80066a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	441a      	add	r2, r3
 80066d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006702:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	441a      	add	r2, r3
 800670e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006710:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006714:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006720:	b29b      	uxth	r3, r3
 8006722:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800673a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006748:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006750:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006758:	b29b      	uxth	r3, r3
 800675a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3734      	adds	r7, #52	@ 0x34
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b0c2      	sub	sp, #264	@ 0x108
 800676c:	af00      	add	r7, sp, #0
 800676e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006776:	6018      	str	r0, [r3, #0]
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006780:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b01      	cmp	r3, #1
 8006790:	f040 86b7 	bne.w	8007502 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	699a      	ldr	r2, [r3, #24]
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d908      	bls.n	80067c2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80067c0:	e007      	b.n	80067d2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80067c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	7b1b      	ldrb	r3, [r3, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d13a      	bne.n	8006858 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80067e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6959      	ldr	r1, [r3, #20]
 80067ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	88da      	ldrh	r2, [r3, #6]
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006804:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006808:	6800      	ldr	r0, [r0, #0]
 800680a:	f001 fc9c 	bl	8008146 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800680e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006812:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	613b      	str	r3, [r7, #16]
 800681a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006828:	b29b      	uxth	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4413      	add	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006836:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	011a      	lsls	r2, r3, #4
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4413      	add	r3, r2
 8006844:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	b29a      	uxth	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	801a      	strh	r2, [r3, #0]
 8006854:	f000 be1f 	b.w	8007496 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	78db      	ldrb	r3, [r3, #3]
 8006864:	2b02      	cmp	r3, #2
 8006866:	f040 8462 	bne.w	800712e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800686a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	429a      	cmp	r2, r3
 8006884:	f240 83df 	bls.w	8007046 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006896:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	4413      	add	r3, r2
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ae:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80068b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	441a      	add	r2, r3
 80068cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80068d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068d8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80068e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f4:	1ad2      	subs	r2, r2, r3
 80068f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	b29b      	uxth	r3, r3
 8006920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 81c7 	beq.w	8006cb8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800692a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800692e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	633b      	str	r3, [r7, #48]	@ 0x30
 8006936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d177      	bne.n	8006a36 <USB_EPStartXfer+0x2ce>
 8006946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006952:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006956:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006960:	b29b      	uxth	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	4413      	add	r3, r2
 8006968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	011a      	lsls	r2, r3, #4
 8006978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697a:	4413      	add	r3, r2
 800697c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	b29b      	uxth	r3, r3
 8006988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698c:	b29a      	uxth	r2, r3
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006996:	2b3e      	cmp	r3, #62	@ 0x3e
 8006998:	d921      	bls.n	80069de <USB_EPStartXfer+0x276>
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a8:	f003 031f 	and.w	r3, r3, #31
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <USB_EPStartXfer+0x252>
 80069b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069b4:	3b01      	subs	r3, #1
 80069b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	029b      	lsls	r3, r3, #10
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	4313      	orrs	r3, r2
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e050      	b.n	8006a80 <USB_EPStartXfer+0x318>
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <USB_EPStartXfer+0x294>
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	e041      	b.n	8006a80 <USB_EPStartXfer+0x318>
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d004      	beq.n	8006a1c <USB_EPStartXfer+0x2b4>
 8006a12:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a16:	3301      	adds	r3, #1
 8006a18:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	801a      	strh	r2, [r3, #0]
 8006a34:	e024      	b.n	8006a80 <USB_EPStartXfer+0x318>
 8006a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d11c      	bne.n	8006a80 <USB_EPStartXfer+0x318>
 8006a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5a:	4413      	add	r3, r2
 8006a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	011a      	lsls	r2, r3, #4
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	4413      	add	r3, r2
 8006a70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	895b      	ldrh	r3, [r3, #10]
 8006a8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6959      	ldr	r1, [r3, #20]
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006aa6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006aaa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006aae:	6800      	ldr	r0, [r0, #0]
 8006ab0:	f001 fb49 	bl	8008146 <USB_WritePMA>
            ep->xfer_buff += len;
 8006ab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695a      	ldr	r2, [r3, #20]
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac4:	441a      	add	r2, r3
 8006ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6a1a      	ldr	r2, [r3, #32]
 8006ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d90f      	bls.n	8006b0e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6a1a      	ldr	r2, [r3, #32]
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	1ad2      	subs	r2, r2, r3
 8006b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	621a      	str	r2, [r3, #32]
 8006b0c:	e00e      	b.n	8006b2c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	785b      	ldrb	r3, [r3, #1]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d177      	bne.n	8006c2c <USB_EPStartXfer+0x4c4>
 8006b3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	461a      	mov	r2, r3
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	011a      	lsls	r2, r3, #4
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	4413      	add	r3, r2
 8006b72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b8e:	d921      	bls.n	8006bd4 <USB_EPStartXfer+0x46c>
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <USB_EPStartXfer+0x448>
 8006ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006baa:	3b01      	subs	r3, #1
 8006bac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	029b      	lsls	r3, r3, #10
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	801a      	strh	r2, [r3, #0]
 8006bd2:	e056      	b.n	8006c82 <USB_EPStartXfer+0x51a>
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <USB_EPStartXfer+0x48a>
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e047      	b.n	8006c82 <USB_EPStartXfer+0x51a>
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <USB_EPStartXfer+0x4aa>
 8006c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	029b      	lsls	r3, r3, #10
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4313      	orrs	r3, r2
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	e02a      	b.n	8006c82 <USB_EPStartXfer+0x51a>
 8006c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d122      	bne.n	8006c82 <USB_EPStartXfer+0x51a>
 8006c3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	623b      	str	r3, [r7, #32]
 8006c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	623b      	str	r3, [r7, #32]
 8006c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	011a      	lsls	r2, r3, #4
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	4413      	add	r3, r2
 8006c72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	891b      	ldrh	r3, [r3, #8]
 8006c8e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6959      	ldr	r1, [r3, #20]
 8006c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ca8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cb0:	6800      	ldr	r0, [r0, #0]
 8006cb2:	f001 fa48 	bl	8008146 <USB_WritePMA>
 8006cb6:	e3ee      	b.n	8007496 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d177      	bne.n	8006db8 <USB_EPStartXfer+0x650>
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ce8:	4413      	add	r3, r2
 8006cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	011a      	lsls	r2, r3, #4
 8006cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d02:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d12:	801a      	strh	r2, [r3, #0]
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d18:	2b3e      	cmp	r3, #62	@ 0x3e
 8006d1a:	d921      	bls.n	8006d60 <USB_EPStartXfer+0x5f8>
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <USB_EPStartXfer+0x5d4>
 8006d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d36:	3b01      	subs	r3, #1
 8006d38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	029b      	lsls	r3, r3, #10
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d5c:	801a      	strh	r2, [r3, #0]
 8006d5e:	e056      	b.n	8006e0e <USB_EPStartXfer+0x6a6>
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <USB_EPStartXfer+0x616>
 8006d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e047      	b.n	8006e0e <USB_EPStartXfer+0x6a6>
 8006d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d82:	085b      	lsrs	r3, r3, #1
 8006d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d004      	beq.n	8006d9e <USB_EPStartXfer+0x636>
 8006d94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d98:	3301      	adds	r3, #1
 8006d9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	029b      	lsls	r3, r3, #10
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db4:	801a      	strh	r2, [r3, #0]
 8006db6:	e02a      	b.n	8006e0e <USB_EPStartXfer+0x6a6>
 8006db8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	785b      	ldrb	r3, [r3, #1]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d122      	bne.n	8006e0e <USB_EPStartXfer+0x6a6>
 8006dc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de8:	4413      	add	r3, r2
 8006dea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	011a      	lsls	r2, r3, #4
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006e02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	891b      	ldrh	r3, [r3, #8]
 8006e1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6959      	ldr	r1, [r3, #20]
 8006e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006e34:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006e38:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006e3c:	6800      	ldr	r0, [r0, #0]
 8006e3e:	f001 f982 	bl	8008146 <USB_WritePMA>
            ep->xfer_buff += len;
 8006e42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e52:	441a      	add	r2, r3
 8006e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6a1a      	ldr	r2, [r3, #32]
 8006e6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d90f      	bls.n	8006e9c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a1a      	ldr	r2, [r3, #32]
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8c:	1ad2      	subs	r2, r2, r3
 8006e8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	621a      	str	r2, [r3, #32]
 8006e9a:	e00e      	b.n	8006eba <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	785b      	ldrb	r3, [r3, #1]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d177      	bne.n	8006fc6 <USB_EPStartXfer+0x85e>
 8006ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef6:	4413      	add	r3, r2
 8006ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	011a      	lsls	r2, r3, #4
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f26:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f28:	d921      	bls.n	8006f6e <USB_EPStartXfer+0x806>
 8006f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	f003 031f 	and.w	r3, r3, #31
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <USB_EPStartXfer+0x7e2>
 8006f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f44:	3b01      	subs	r3, #1
 8006f46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	029b      	lsls	r3, r3, #10
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6a:	801a      	strh	r2, [r3, #0]
 8006f6c:	e050      	b.n	8007010 <USB_EPStartXfer+0x8a8>
 8006f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d10a      	bne.n	8006f8c <USB_EPStartXfer+0x824>
 8006f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f88:	801a      	strh	r2, [r3, #0]
 8006f8a:	e041      	b.n	8007010 <USB_EPStartXfer+0x8a8>
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f90:	085b      	lsrs	r3, r3, #1
 8006f92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <USB_EPStartXfer+0x844>
 8006fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	881b      	ldrh	r3, [r3, #0]
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	029b      	lsls	r3, r3, #10
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc2:	801a      	strh	r2, [r3, #0]
 8006fc4:	e024      	b.n	8007010 <USB_EPStartXfer+0x8a8>
 8006fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	785b      	ldrb	r3, [r3, #1]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d11c      	bne.n	8007010 <USB_EPStartXfer+0x8a8>
 8006fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fea:	4413      	add	r3, r2
 8006fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	011a      	lsls	r2, r3, #4
 8006ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ffe:	4413      	add	r3, r2
 8007000:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800700a:	b29a      	uxth	r2, r3
 800700c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800700e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	895b      	ldrh	r3, [r3, #10]
 800701c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6959      	ldr	r1, [r3, #20]
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007030:	b29b      	uxth	r3, r3
 8007032:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007036:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800703a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800703e:	6800      	ldr	r0, [r0, #0]
 8007040:	f001 f881 	bl	8008146 <USB_WritePMA>
 8007044:	e227      	b.n	8007496 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007078:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007084:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800709e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	461a      	mov	r2, r3
 80070d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070d2:	4413      	add	r3, r2
 80070d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80070d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	011a      	lsls	r2, r3, #4
 80070e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070e6:	4413      	add	r3, r2
 80070e8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80070ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	891b      	ldrh	r3, [r3, #8]
 8007104:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6959      	ldr	r1, [r3, #20]
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007118:	b29b      	uxth	r3, r3
 800711a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800711e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007122:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007126:	6800      	ldr	r0, [r0, #0]
 8007128:	f001 f80d 	bl	8008146 <USB_WritePMA>
 800712c:	e1b3      	b.n	8007496 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800712e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	1ad2      	subs	r2, r2, r3
 8007140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	881b      	ldrh	r3, [r3, #0]
 8007168:	b29b      	uxth	r3, r3
 800716a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 80c6 	beq.w	8007300 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d177      	bne.n	8007280 <USB_EPStartXfer+0xb18>
 8007190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007194:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800719c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	461a      	mov	r2, r3
 80071ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071b0:	4413      	add	r3, r2
 80071b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	011a      	lsls	r2, r3, #4
 80071c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071c4:	4413      	add	r3, r2
 80071c6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80071cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ce:	881b      	ldrh	r3, [r3, #0]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071da:	801a      	strh	r2, [r3, #0]
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80071e2:	d921      	bls.n	8007228 <USB_EPStartXfer+0xac0>
 80071e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e8:	095b      	lsrs	r3, r3, #5
 80071ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <USB_EPStartXfer+0xa9c>
 80071fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80071fe:	3b01      	subs	r3, #1
 8007200:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	b29a      	uxth	r2, r3
 800720a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800720e:	b29b      	uxth	r3, r3
 8007210:	029b      	lsls	r3, r3, #10
 8007212:	b29b      	uxth	r3, r3
 8007214:	4313      	orrs	r3, r2
 8007216:	b29b      	uxth	r3, r3
 8007218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800721c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007220:	b29a      	uxth	r2, r3
 8007222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	e050      	b.n	80072ca <USB_EPStartXfer+0xb62>
 8007228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10a      	bne.n	8007246 <USB_EPStartXfer+0xade>
 8007230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007232:	881b      	ldrh	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723e:	b29a      	uxth	r2, r3
 8007240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	e041      	b.n	80072ca <USB_EPStartXfer+0xb62>
 8007246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <USB_EPStartXfer+0xafe>
 800725c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007260:	3301      	adds	r3, #1
 8007262:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	b29a      	uxth	r2, r3
 800726c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007270:	b29b      	uxth	r3, r3
 8007272:	029b      	lsls	r3, r3, #10
 8007274:	b29b      	uxth	r3, r3
 8007276:	4313      	orrs	r3, r2
 8007278:	b29a      	uxth	r2, r3
 800727a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800727c:	801a      	strh	r2, [r3, #0]
 800727e:	e024      	b.n	80072ca <USB_EPStartXfer+0xb62>
 8007280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d11c      	bne.n	80072ca <USB_EPStartXfer+0xb62>
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072a4:	4413      	add	r3, r2
 80072a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80072a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	011a      	lsls	r2, r3, #4
 80072b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072b8:	4413      	add	r3, r2
 80072ba:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80072be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	895b      	ldrh	r3, [r3, #10]
 80072d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6959      	ldr	r1, [r3, #20]
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80072f0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80072f4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80072f8:	6800      	ldr	r0, [r0, #0]
 80072fa:	f000 ff24 	bl	8008146 <USB_WritePMA>
 80072fe:	e0ca      	b.n	8007496 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	785b      	ldrb	r3, [r3, #1]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d177      	bne.n	8007400 <USB_EPStartXfer+0xc98>
 8007310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800731c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800732a:	b29b      	uxth	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007330:	4413      	add	r3, r2
 8007332:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007338:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	011a      	lsls	r2, r3, #4
 8007342:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007344:	4413      	add	r3, r2
 8007346:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800734a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800734c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007356:	b29a      	uxth	r2, r3
 8007358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007360:	2b3e      	cmp	r3, #62	@ 0x3e
 8007362:	d921      	bls.n	80073a8 <USB_EPStartXfer+0xc40>
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007368:	095b      	lsrs	r3, r3, #5
 800736a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800736e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	2b00      	cmp	r3, #0
 8007378:	d104      	bne.n	8007384 <USB_EPStartXfer+0xc1c>
 800737a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800737e:	3b01      	subs	r3, #1
 8007380:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	b29a      	uxth	r2, r3
 800738a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800738e:	b29b      	uxth	r3, r3
 8007390:	029b      	lsls	r3, r3, #10
 8007392:	b29b      	uxth	r3, r3
 8007394:	4313      	orrs	r3, r2
 8007396:	b29b      	uxth	r3, r3
 8007398:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800739c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	e05c      	b.n	8007462 <USB_EPStartXfer+0xcfa>
 80073a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10a      	bne.n	80073c6 <USB_EPStartXfer+0xc5e>
 80073b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073be:	b29a      	uxth	r2, r3
 80073c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	e04d      	b.n	8007462 <USB_EPStartXfer+0xcfa>
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	f003 0301 	and.w	r3, r3, #1
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <USB_EPStartXfer+0xc7e>
 80073dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073e0:	3301      	adds	r3, #1
 80073e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80073e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	029b      	lsls	r3, r3, #10
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	4313      	orrs	r3, r2
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	e030      	b.n	8007462 <USB_EPStartXfer+0xcfa>
 8007400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	785b      	ldrb	r3, [r3, #1]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d128      	bne.n	8007462 <USB_EPStartXfer+0xcfa>
 8007410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800741e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007434:	4413      	add	r3, r2
 8007436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800743a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	011a      	lsls	r2, r3, #4
 8007448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800744c:	4413      	add	r3, r2
 800744e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800745a:	b29a      	uxth	r2, r3
 800745c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007460:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	891b      	ldrh	r3, [r3, #8]
 800746e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6959      	ldr	r1, [r3, #20]
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	b29b      	uxth	r3, r3
 8007484:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007488:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800748c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007490:	6800      	ldr	r0, [r0, #0]
 8007492:	f000 fe58 	bl	8008146 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074bc:	817b      	strh	r3, [r7, #10]
 80074be:	897b      	ldrh	r3, [r7, #10]
 80074c0:	f083 0310 	eor.w	r3, r3, #16
 80074c4:	817b      	strh	r3, [r7, #10]
 80074c6:	897b      	ldrh	r3, [r7, #10]
 80074c8:	f083 0320 	eor.w	r3, r3, #32
 80074cc:	817b      	strh	r3, [r7, #10]
 80074ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	441a      	add	r2, r3
 80074e8:	897b      	ldrh	r3, [r7, #10]
 80074ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	8013      	strh	r3, [r2, #0]
 80074fe:	f000 bcde 	b.w	8007ebe <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	7b1b      	ldrb	r3, [r3, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	f040 80bb 	bne.w	800768a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	699a      	ldr	r2, [r3, #24]
 8007520:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	429a      	cmp	r2, r3
 800752e:	d917      	bls.n	8007560 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007550:	1ad2      	subs	r2, r2, r3
 8007552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	619a      	str	r2, [r3, #24]
 800755e:	e00e      	b.n	800757e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2200      	movs	r2, #0
 800757c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800757e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800758c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007590:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800759a:	b29b      	uxth	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075a2:	4413      	add	r3, r2
 80075a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	011a      	lsls	r2, r3, #4
 80075b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075ba:	4413      	add	r3, r2
 80075bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80075de:	d924      	bls.n	800762a <USB_EPStartXfer+0xec2>
 80075e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <USB_EPStartXfer+0xe98>
 80075f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80075fa:	3b01      	subs	r3, #1
 80075fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007600:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29a      	uxth	r2, r3
 8007608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800760c:	b29b      	uxth	r3, r3
 800760e:	029b      	lsls	r3, r3, #10
 8007610:	b29b      	uxth	r3, r3
 8007612:	4313      	orrs	r3, r2
 8007614:	b29b      	uxth	r3, r3
 8007616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800761e:	b29a      	uxth	r2, r3
 8007620:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	f000 bc10 	b.w	8007e4a <USB_EPStartXfer+0x16e2>
 800762a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10c      	bne.n	800764c <USB_EPStartXfer+0xee4>
 8007632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007636:	881b      	ldrh	r3, [r3, #0]
 8007638:	b29b      	uxth	r3, r3
 800763a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800763e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007642:	b29a      	uxth	r2, r3
 8007644:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007648:	801a      	strh	r2, [r3, #0]
 800764a:	e3fe      	b.n	8007e4a <USB_EPStartXfer+0x16e2>
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007650:	085b      	lsrs	r3, r3, #1
 8007652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <USB_EPStartXfer+0xf04>
 8007662:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007666:	3301      	adds	r3, #1
 8007668:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800766c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29a      	uxth	r2, r3
 8007674:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007678:	b29b      	uxth	r3, r3
 800767a:	029b      	lsls	r3, r3, #10
 800767c:	b29b      	uxth	r3, r3
 800767e:	4313      	orrs	r3, r2
 8007680:	b29a      	uxth	r2, r3
 8007682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007686:	801a      	strh	r2, [r3, #0]
 8007688:	e3df      	b.n	8007e4a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800768a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	78db      	ldrb	r3, [r3, #3]
 8007696:	2b02      	cmp	r3, #2
 8007698:	f040 8218 	bne.w	8007acc <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f040 809d 	bne.w	80077e8 <USB_EPStartXfer+0x1080>
 80076ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d2:	4413      	add	r3, r2
 80076d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	011a      	lsls	r2, r3, #4
 80076e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076ea:	4413      	add	r3, r2
 80076ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076f8:	881b      	ldrh	r3, [r3, #0]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007700:	b29a      	uxth	r2, r3
 8007702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	2b3e      	cmp	r3, #62	@ 0x3e
 8007716:	d92b      	bls.n	8007770 <USB_EPStartXfer+0x1008>
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 031f 	and.w	r3, r3, #31
 800773a:	2b00      	cmp	r3, #0
 800773c:	d104      	bne.n	8007748 <USB_EPStartXfer+0xfe0>
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007742:	3b01      	subs	r3, #1
 8007744:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	b29a      	uxth	r2, r3
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007754:	b29b      	uxth	r3, r3
 8007756:	029b      	lsls	r3, r3, #10
 8007758:	b29b      	uxth	r3, r3
 800775a:	4313      	orrs	r3, r2
 800775c:	b29b      	uxth	r3, r3
 800775e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007766:	b29a      	uxth	r2, r3
 8007768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800776c:	801a      	strh	r2, [r3, #0]
 800776e:	e070      	b.n	8007852 <USB_EPStartXfer+0x10ea>
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <USB_EPStartXfer+0x1032>
 8007780:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007790:	b29a      	uxth	r2, r3
 8007792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e05b      	b.n	8007852 <USB_EPStartXfer+0x10ea>
 800779a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <USB_EPStartXfer+0x1062>
 80077c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c4:	3301      	adds	r3, #1
 80077c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80077ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	b29b      	uxth	r3, r3
 80077dc:	4313      	orrs	r3, r2
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	e034      	b.n	8007852 <USB_EPStartXfer+0x10ea>
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d12c      	bne.n	8007852 <USB_EPStartXfer+0x10ea>
 80077f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007814:	b29b      	uxth	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800781c:	4413      	add	r3, r2
 800781e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	011a      	lsls	r2, r3, #4
 8007830:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007834:	4413      	add	r3, r2
 8007836:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800783a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800783e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	b29a      	uxth	r2, r3
 800784c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007856:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	785b      	ldrb	r3, [r3, #1]
 800786c:	2b00      	cmp	r3, #0
 800786e:	f040 809d 	bne.w	80079ac <USB_EPStartXfer+0x1244>
 8007872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800788e:	b29b      	uxth	r3, r3
 8007890:	461a      	mov	r2, r3
 8007892:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007896:	4413      	add	r3, r2
 8007898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	011a      	lsls	r2, r3, #4
 80078aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078ae:	4413      	add	r3, r2
 80078b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078ca:	801a      	strh	r2, [r3, #0]
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80078da:	d92b      	bls.n	8007934 <USB_EPStartXfer+0x11cc>
 80078dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	f003 031f 	and.w	r3, r3, #31
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d104      	bne.n	800790c <USB_EPStartXfer+0x11a4>
 8007902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007906:	3b01      	subs	r3, #1
 8007908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800790c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	b29a      	uxth	r2, r3
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007918:	b29b      	uxth	r3, r3
 800791a:	029b      	lsls	r3, r3, #10
 800791c:	b29b      	uxth	r3, r3
 800791e:	4313      	orrs	r3, r2
 8007920:	b29b      	uxth	r3, r3
 8007922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	e069      	b.n	8007a08 <USB_EPStartXfer+0x12a0>
 8007934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10c      	bne.n	800795e <USB_EPStartXfer+0x11f6>
 8007944:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007954:	b29a      	uxth	r2, r3
 8007956:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	e054      	b.n	8007a08 <USB_EPStartXfer+0x12a0>
 800795e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	085b      	lsrs	r3, r3, #1
 800796c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d004      	beq.n	800798e <USB_EPStartXfer+0x1226>
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007988:	3301      	adds	r3, #1
 800798a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800798e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	b29a      	uxth	r2, r3
 8007996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800799a:	b29b      	uxth	r3, r3
 800799c:	029b      	lsls	r3, r3, #10
 800799e:	b29b      	uxth	r3, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e02d      	b.n	8007a08 <USB_EPStartXfer+0x12a0>
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d125      	bne.n	8007a08 <USB_EPStartXfer+0x12a0>
 80079bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079d2:	4413      	add	r3, r2
 80079d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	011a      	lsls	r2, r3, #4
 80079e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80079ea:	4413      	add	r3, r2
 80079ec:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a06:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007a08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8218 	beq.w	8007e4a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a3a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d005      	beq.n	8007a52 <USB_EPStartXfer+0x12ea>
 8007a46:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10d      	bne.n	8007a6e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 81f5 	bne.w	8007e4a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007a60:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 81ee 	bne.w	8007e4a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	441a      	add	r2, r3
 8007ab2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007aba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007abe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ac2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	8013      	strh	r3, [r2, #0]
 8007aca:	e1be      	b.n	8007e4a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	78db      	ldrb	r3, [r3, #3]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	f040 81b4 	bne.w	8007e46 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d917      	bls.n	8007b2a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007afa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	619a      	str	r2, [r3, #24]
 8007b28:	e00e      	b.n	8007b48 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2200      	movs	r2, #0
 8007b46:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f040 8085 	bne.w	8007c64 <USB_EPStartXfer+0x14fc>
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	461a      	mov	r2, r3
 8007b7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b7e:	4413      	add	r3, r2
 8007b80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	011a      	lsls	r2, r3, #4
 8007b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007b96:	4413      	add	r3, r2
 8007b98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ba0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bb2:	801a      	strh	r2, [r3, #0]
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bba:	d923      	bls.n	8007c04 <USB_EPStartXfer+0x149c>
 8007bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc0:	095b      	lsrs	r3, r3, #5
 8007bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bca:	f003 031f 	and.w	r3, r3, #31
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <USB_EPStartXfer+0x1474>
 8007bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007bdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	029b      	lsls	r3, r3, #10
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c00:	801a      	strh	r2, [r3, #0]
 8007c02:	e060      	b.n	8007cc6 <USB_EPStartXfer+0x155e>
 8007c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d10c      	bne.n	8007c26 <USB_EPStartXfer+0x14be>
 8007c0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c22:	801a      	strh	r2, [r3, #0]
 8007c24:	e04f      	b.n	8007cc6 <USB_EPStartXfer+0x155e>
 8007c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c2a:	085b      	lsrs	r3, r3, #1
 8007c2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d004      	beq.n	8007c46 <USB_EPStartXfer+0x14de>
 8007c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c40:	3301      	adds	r3, #1
 8007c42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	029b      	lsls	r3, r3, #10
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	e030      	b.n	8007cc6 <USB_EPStartXfer+0x155e>
 8007c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d128      	bne.n	8007cc6 <USB_EPStartXfer+0x155e>
 8007c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	461a      	mov	r2, r3
 8007c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c98:	4413      	add	r3, r2
 8007c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	011a      	lsls	r2, r3, #4
 8007cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007cb6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f040 8085 	bne.w	8007df0 <USB_EPStartXfer+0x1688>
 8007ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	011a      	lsls	r2, r3, #4
 8007d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d22:	4413      	add	r3, r2
 8007d24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d44:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d46:	d923      	bls.n	8007d90 <USB_EPStartXfer+0x1628>
 8007d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d4c:	095b      	lsrs	r3, r3, #5
 8007d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d56:	f003 031f 	and.w	r3, r3, #31
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <USB_EPStartXfer+0x1600>
 8007d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d62:	3b01      	subs	r3, #1
 8007d64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	029b      	lsls	r3, r3, #10
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d8c:	801a      	strh	r2, [r3, #0]
 8007d8e:	e05c      	b.n	8007e4a <USB_EPStartXfer+0x16e2>
 8007d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <USB_EPStartXfer+0x164a>
 8007d98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d9c:	881b      	ldrh	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dae:	801a      	strh	r2, [r3, #0]
 8007db0:	e04b      	b.n	8007e4a <USB_EPStartXfer+0x16e2>
 8007db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <USB_EPStartXfer+0x166a>
 8007dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dcc:	3301      	adds	r3, #1
 8007dce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007dd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	029b      	lsls	r3, r3, #10
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	4313      	orrs	r3, r2
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dec:	801a      	strh	r2, [r3, #0]
 8007dee:	e02c      	b.n	8007e4a <USB_EPStartXfer+0x16e2>
 8007df0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	785b      	ldrb	r3, [r3, #1]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d124      	bne.n	8007e4a <USB_EPStartXfer+0x16e2>
 8007e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e16:	4413      	add	r3, r2
 8007e18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	011a      	lsls	r2, r3, #4
 8007e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007e2e:	4413      	add	r3, r2
 8007e30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007e34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e3c:	b29a      	uxth	r2, r3
 8007e3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e001      	b.n	8007e4a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e03a      	b.n	8007ec0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e78:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e7c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007e84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	441a      	add	r2, r3
 8007ea6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007eb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	785b      	ldrb	r3, [r3, #1]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d020      	beq.n	8007f1e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ef2:	81bb      	strh	r3, [r7, #12]
 8007ef4:	89bb      	ldrh	r3, [r7, #12]
 8007ef6:	f083 0310 	eor.w	r3, r3, #16
 8007efa:	81bb      	strh	r3, [r7, #12]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	441a      	add	r2, r3
 8007f06:	89bb      	ldrh	r3, [r7, #12]
 8007f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	8013      	strh	r3, [r2, #0]
 8007f1c:	e01f      	b.n	8007f5e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f34:	81fb      	strh	r3, [r7, #14]
 8007f36:	89fb      	ldrh	r3, [r7, #14]
 8007f38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f3c:	81fb      	strh	r3, [r7, #14]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	441a      	add	r2, r3
 8007f48:	89fb      	ldrh	r3, [r7, #14]
 8007f4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr

08007f6a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b087      	sub	sp, #28
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	7b1b      	ldrb	r3, [r3, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f040 809d 	bne.w	80080b8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	785b      	ldrb	r3, [r3, #1]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d04c      	beq.n	8008020 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	823b      	strh	r3, [r7, #16]
 8007f94:	8a3b      	ldrh	r3, [r7, #16]
 8007f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01b      	beq.n	8007fd6 <USB_EPClearStall+0x6c>
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb4:	81fb      	strh	r3, [r7, #14]
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	441a      	add	r2, r3
 8007fc0:	89fb      	ldrh	r3, [r7, #14]
 8007fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	78db      	ldrb	r3, [r3, #3]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d06c      	beq.n	80080b8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	881b      	ldrh	r3, [r3, #0]
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ff4:	81bb      	strh	r3, [r7, #12]
 8007ff6:	89bb      	ldrh	r3, [r7, #12]
 8007ff8:	f083 0320 	eor.w	r3, r3, #32
 8007ffc:	81bb      	strh	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	441a      	add	r2, r3
 8008008:	89bb      	ldrh	r3, [r7, #12]
 800800a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800800e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800801a:	b29b      	uxth	r3, r3
 800801c:	8013      	strh	r3, [r2, #0]
 800801e:	e04b      	b.n	80080b8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	82fb      	strh	r3, [r7, #22]
 800802e:	8afb      	ldrh	r3, [r7, #22]
 8008030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d01b      	beq.n	8008070 <USB_EPClearStall+0x106>
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	881b      	ldrh	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800804a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804e:	82bb      	strh	r3, [r7, #20]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	8abb      	ldrh	r3, [r7, #20]
 800805c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008064:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806c:	b29b      	uxth	r3, r3
 800806e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008086:	827b      	strh	r3, [r7, #18]
 8008088:	8a7b      	ldrh	r3, [r7, #18]
 800808a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800808e:	827b      	strh	r3, [r7, #18]
 8008090:	8a7b      	ldrh	r3, [r7, #18]
 8008092:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008096:	827b      	strh	r3, [r7, #18]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	441a      	add	r2, r3
 80080a2:	8a7b      	ldrh	r3, [r7, #18]
 80080a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d103      	bne.n	80080de <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2280      	movs	r2, #128	@ 0x80
 80080da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bc80      	pop	{r7}
 80080e8:	4770      	bx	lr

080080ea <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr

08008112 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008120:	b29b      	uxth	r3, r3
 8008122:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008124:	68fb      	ldr	r3, [r7, #12]
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr

08008130 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008146:	b480      	push	{r7}
 8008148:	b08b      	sub	sp, #44	@ 0x2c
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	60b9      	str	r1, [r7, #8]
 8008150:	4611      	mov	r1, r2
 8008152:	461a      	mov	r2, r3
 8008154:	460b      	mov	r3, r1
 8008156:	80fb      	strh	r3, [r7, #6]
 8008158:	4613      	mov	r3, r2
 800815a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800815c:	88bb      	ldrh	r3, [r7, #4]
 800815e:	3301      	adds	r3, #1
 8008160:	085b      	lsrs	r3, r3, #1
 8008162:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800816c:	88fb      	ldrh	r3, [r7, #6]
 800816e:	005a      	lsls	r2, r3, #1
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008178:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	627b      	str	r3, [r7, #36]	@ 0x24
 800817e:	e01f      	b.n	80081c0 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	3301      	adds	r3, #1
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b21b      	sxth	r3, r3
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	b21a      	sxth	r2, r3
 8008192:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008196:	4313      	orrs	r3, r2
 8008198:	b21b      	sxth	r3, r3
 800819a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	8a7a      	ldrh	r2, [r7, #18]
 80081a0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80081a2:	6a3b      	ldr	r3, [r7, #32]
 80081a4:	3302      	adds	r3, #2
 80081a6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80081a8:	6a3b      	ldr	r3, [r7, #32]
 80081aa:	3302      	adds	r3, #2
 80081ac:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	3301      	adds	r3, #1
 80081b2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	3301      	adds	r3, #1
 80081b8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	3b01      	subs	r3, #1
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1dc      	bne.n	8008180 <USB_WritePMA+0x3a>
  }
}
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	372c      	adds	r7, #44	@ 0x2c
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bc80      	pop	{r7}
 80081d0:	4770      	bx	lr

080081d2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b08b      	sub	sp, #44	@ 0x2c
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	4611      	mov	r1, r2
 80081de:	461a      	mov	r2, r3
 80081e0:	460b      	mov	r3, r1
 80081e2:	80fb      	strh	r3, [r7, #6]
 80081e4:	4613      	mov	r3, r2
 80081e6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80081e8:	88bb      	ldrh	r3, [r7, #4]
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	005a      	lsls	r2, r3, #1
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008204:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
 800820a:	e01b      	b.n	8008244 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800820c:	6a3b      	ldr	r3, [r7, #32]
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	3302      	adds	r3, #2
 8008218:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	b2da      	uxtb	r2, r3
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	3301      	adds	r3, #1
 8008226:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	b2da      	uxtb	r2, r3
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	3301      	adds	r3, #1
 8008236:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	3302      	adds	r3, #2
 800823c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	3b01      	subs	r3, #1
 8008242:	627b      	str	r3, [r7, #36]	@ 0x24
 8008244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e0      	bne.n	800820c <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800824a:	88bb      	ldrh	r3, [r7, #4]
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	b29b      	uxth	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	b2da      	uxtb	r2, r3
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	701a      	strb	r2, [r3, #0]
  }
}
 8008266:	bf00      	nop
 8008268:	372c      	adds	r7, #44	@ 0x2c
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr

08008270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	7c1b      	ldrb	r3, [r3, #16]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d115      	bne.n	80082b4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800828c:	2202      	movs	r2, #2
 800828e:	2181      	movs	r1, #129	@ 0x81
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 fe5e 	bl	8009f52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800829c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082a0:	2202      	movs	r2, #2
 80082a2:	2101      	movs	r1, #1
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f001 fe54 	bl	8009f52 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80082b2:	e012      	b.n	80082da <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082b4:	2340      	movs	r3, #64	@ 0x40
 80082b6:	2202      	movs	r2, #2
 80082b8:	2181      	movs	r1, #129	@ 0x81
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fe49 	bl	8009f52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082c6:	2340      	movs	r3, #64	@ 0x40
 80082c8:	2202      	movs	r2, #2
 80082ca:	2101      	movs	r1, #1
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fe40 	bl	8009f52 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082da:	2308      	movs	r3, #8
 80082dc:	2203      	movs	r2, #3
 80082de:	2182      	movs	r1, #130	@ 0x82
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fe36 	bl	8009f52 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80082f0:	f001 ff56 	bl	800a1a0 <USBD_static_malloc>
 80082f4:	4602      	mov	r2, r0
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d102      	bne.n	800830c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008306:	2301      	movs	r3, #1
 8008308:	73fb      	strb	r3, [r7, #15]
 800830a:	e026      	b.n	800835a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008312:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	2200      	movs	r2, #0
 800832a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	7c1b      	ldrb	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800833c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008340:	2101      	movs	r1, #1
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 fef5 	bl	800a132 <USBD_LL_PrepareReceive>
 8008348:	e007      	b.n	800835a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008350:	2340      	movs	r3, #64	@ 0x40
 8008352:	2101      	movs	r1, #1
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f001 feec 	bl	800a132 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008374:	2181      	movs	r1, #129	@ 0x81
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fe11 	bl	8009f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008382:	2101      	movs	r1, #1
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 fe0a 	bl	8009f9e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008392:	2182      	movs	r1, #130	@ 0x82
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f001 fe02 	bl	8009f9e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00e      	beq.n	80083c8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fefc 	bl	800a1b8 <USBD_static_free>
    pdev->pClassData = NULL;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b086      	sub	sp, #24
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d039      	beq.n	8008470 <USBD_CDC_Setup+0x9e>
 80083fc:	2b20      	cmp	r3, #32
 80083fe:	d17f      	bne.n	8008500 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	88db      	ldrh	r3, [r3, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d029      	beq.n	800845c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	b25b      	sxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	da11      	bge.n	8008436 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800841e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	88d2      	ldrh	r2, [r2, #6]
 8008424:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008426:	6939      	ldr	r1, [r7, #16]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	88db      	ldrh	r3, [r3, #6]
 800842c:	461a      	mov	r2, r3
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 f9d6 	bl	80097e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008434:	e06b      	b.n	800850e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	785a      	ldrb	r2, [r3, #1]
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	88db      	ldrh	r3, [r3, #6]
 8008444:	b2da      	uxtb	r2, r3
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800844c:	6939      	ldr	r1, [r7, #16]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	88db      	ldrh	r3, [r3, #6]
 8008452:	461a      	mov	r2, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 f9f1 	bl	800983c <USBD_CtlPrepareRx>
      break;
 800845a:	e058      	b.n	800850e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	7850      	ldrb	r0, [r2, #1]
 8008468:	2200      	movs	r2, #0
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	4798      	blx	r3
      break;
 800846e:	e04e      	b.n	800850e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	785b      	ldrb	r3, [r3, #1]
 8008474:	2b0b      	cmp	r3, #11
 8008476:	d02e      	beq.n	80084d6 <USBD_CDC_Setup+0x104>
 8008478:	2b0b      	cmp	r3, #11
 800847a:	dc38      	bgt.n	80084ee <USBD_CDC_Setup+0x11c>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <USBD_CDC_Setup+0xb4>
 8008480:	2b0a      	cmp	r3, #10
 8008482:	d014      	beq.n	80084ae <USBD_CDC_Setup+0xdc>
 8008484:	e033      	b.n	80084ee <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800848c:	2b03      	cmp	r3, #3
 800848e:	d107      	bne.n	80084a0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	2202      	movs	r2, #2
 8008496:	4619      	mov	r1, r3
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 f9a1 	bl	80097e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800849e:	e02e      	b.n	80084fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 f932 	bl	800970c <USBD_CtlError>
            ret = USBD_FAIL;
 80084a8:	2302      	movs	r3, #2
 80084aa:	75fb      	strb	r3, [r7, #23]
          break;
 80084ac:	e027      	b.n	80084fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d107      	bne.n	80084c8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80084b8:	f107 030f 	add.w	r3, r7, #15
 80084bc:	2201      	movs	r2, #1
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f98d 	bl	80097e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80084c6:	e01a      	b.n	80084fe <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 f91e 	bl	800970c <USBD_CtlError>
            ret = USBD_FAIL;
 80084d0:	2302      	movs	r3, #2
 80084d2:	75fb      	strb	r3, [r7, #23]
          break;
 80084d4:	e013      	b.n	80084fe <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d00d      	beq.n	80084fc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 f912 	bl	800970c <USBD_CtlError>
            ret = USBD_FAIL;
 80084e8:	2302      	movs	r3, #2
 80084ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084ec:	e006      	b.n	80084fc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 f90b 	bl	800970c <USBD_CtlError>
          ret = USBD_FAIL;
 80084f6:	2302      	movs	r3, #2
 80084f8:	75fb      	strb	r3, [r7, #23]
          break;
 80084fa:	e000      	b.n	80084fe <USBD_CDC_Setup+0x12c>
          break;
 80084fc:	bf00      	nop
      }
      break;
 80084fe:	e006      	b.n	800850e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 f902 	bl	800970c <USBD_CtlError>
      ret = USBD_FAIL;
 8008508:	2302      	movs	r3, #2
 800850a:	75fb      	strb	r3, [r7, #23]
      break;
 800850c:	bf00      	nop
  }

  return ret;
 800850e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800852a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008532:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800853a:	2b00      	cmp	r3, #0
 800853c:	d03a      	beq.n	80085b4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	331c      	adds	r3, #28
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d029      	beq.n	80085a8 <USBD_CDC_DataIn+0x90>
 8008554:	78fa      	ldrb	r2, [r7, #3]
 8008556:	6879      	ldr	r1, [r7, #4]
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	331c      	adds	r3, #28
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	78f9      	ldrb	r1, [r7, #3]
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	460b      	mov	r3, r1
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	00db      	lsls	r3, r3, #3
 8008572:	4403      	add	r3, r0
 8008574:	3320      	adds	r3, #32
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	fbb2 f1f3 	udiv	r1, r2, r3
 800857c:	fb01 f303 	mul.w	r3, r1, r3
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b00      	cmp	r3, #0
 8008584:	d110      	bne.n	80085a8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	331c      	adds	r3, #28
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800859a:	78f9      	ldrb	r1, [r7, #3]
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fda3 	bl	800a0ec <USBD_LL_Transmit>
 80085a6:	e003      	b.n	80085b0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	e000      	b.n	80085b6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80085b4:	2302      	movs	r3, #2
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b084      	sub	sp, #16
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085d0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f001 fdce 	bl	800a178 <USBD_LL_GetRxDataSize>
 80085dc:	4602      	mov	r2, r0
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008602:	4611      	mov	r1, r2
 8008604:	4798      	blx	r3

    return USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	e000      	b.n	800860c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800860a:	2302      	movs	r3, #2
  }
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008622:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800862a:	2b00      	cmp	r3, #0
 800862c:	d014      	beq.n	8008658 <USBD_CDC_EP0_RxReady+0x44>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008634:	2bff      	cmp	r3, #255	@ 0xff
 8008636:	d00f      	beq.n	8008658 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008646:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800864e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	22ff      	movs	r2, #255	@ 0xff
 8008654:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
	...

08008664 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2243      	movs	r2, #67	@ 0x43
 8008670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008672:	4b03      	ldr	r3, [pc, #12]	@ (8008680 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008674:	4618      	mov	r0, r3
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	200000a4 	.word	0x200000a4

08008684 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2243      	movs	r2, #67	@ 0x43
 8008690:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008692:	4b03      	ldr	r3, [pc, #12]	@ (80086a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20000060 	.word	0x20000060

080086a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2243      	movs	r2, #67	@ 0x43
 80086b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80086b2:	4b03      	ldr	r3, [pc, #12]	@ (80086c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bc80      	pop	{r7}
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	200000e8 	.word	0x200000e8

080086c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	220a      	movs	r2, #10
 80086d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80086d2:	4b03      	ldr	r3, [pc, #12]	@ (80086e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	2000001c 	.word	0x2000001c

080086e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80086ee:	2302      	movs	r3, #2
 80086f0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	4613      	mov	r3, r2
 800871c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008724:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800872e:	88fa      	ldrh	r2, [r7, #6]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008752:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	bc80      	pop	{r7}
 8008766:	4770      	bx	lr

08008768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008776:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d017      	beq.n	80087b2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7c1b      	ldrb	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008790:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008794:	2101      	movs	r1, #1
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 fccb 	bl	800a132 <USBD_LL_PrepareReceive>
 800879c:	e007      	b.n	80087ae <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80087a4:	2340      	movs	r3, #64	@ 0x40
 80087a6:	2101      	movs	r1, #1
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 fcc2 	bl	800a132 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e000      	b.n	80087b4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80087b2:	2302      	movs	r3, #2
  }
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80087d0:	2302      	movs	r3, #2
 80087d2:	e01a      	b.n	800880a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d003      	beq.n	80087e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	79fa      	ldrb	r2, [r7, #7]
 8008800:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f001 fb30 	bl	8009e68 <USBD_LL_Init>

  return USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008812:	b480      	push	{r7}
 8008814:	b085      	sub	sp, #20
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
 800881a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d006      	beq.n	8008834 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800882e:	2300      	movs	r3, #0
 8008830:	73fb      	strb	r3, [r7, #15]
 8008832:	e001      	b.n	8008838 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008834:	2302      	movs	r3, #2
 8008836:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr

08008844 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fb65 	bl	8009f1c <USBD_LL_Start>

  return USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800887c:	2302      	movs	r3, #2
 800887e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00c      	beq.n	80088a4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	78fa      	ldrb	r2, [r7, #3]
 8008894:	4611      	mov	r1, r2
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	460b      	mov	r3, r1
 80088b8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	4611      	mov	r1, r2
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3

  return USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f000 fed7 	bl	800969a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80088fa:	461a      	mov	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008908:	f003 031f 	and.w	r3, r3, #31
 800890c:	2b02      	cmp	r3, #2
 800890e:	d016      	beq.n	800893e <USBD_LL_SetupStage+0x6a>
 8008910:	2b02      	cmp	r3, #2
 8008912:	d81c      	bhi.n	800894e <USBD_LL_SetupStage+0x7a>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d002      	beq.n	800891e <USBD_LL_SetupStage+0x4a>
 8008918:	2b01      	cmp	r3, #1
 800891a:	d008      	beq.n	800892e <USBD_LL_SetupStage+0x5a>
 800891c:	e017      	b.n	800894e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f9ca 	bl	8008cc0 <USBD_StdDevReq>
      break;
 800892c:	e01a      	b.n	8008964 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa2c 	bl	8008d94 <USBD_StdItfReq>
      break;
 800893c:	e012      	b.n	8008964 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fa6c 	bl	8008e24 <USBD_StdEPReq>
      break;
 800894c:	e00a      	b.n	8008964 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008954:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008958:	b2db      	uxtb	r3, r3
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fb3d 	bl	8009fdc <USBD_LL_StallEP>
      break;
 8008962:	bf00      	nop
  }

  return USBD_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b086      	sub	sp, #24
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	460b      	mov	r3, r1
 8008978:	607a      	str	r2, [r7, #4]
 800897a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800897c:	7afb      	ldrb	r3, [r7, #11]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d14b      	bne.n	8008a1a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008988:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008990:	2b03      	cmp	r3, #3
 8008992:	d134      	bne.n	80089fe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d919      	bls.n	80089d4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	1ad2      	subs	r2, r2, r3
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d203      	bcs.n	80089c2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80089be:	b29b      	uxth	r3, r3
 80089c0:	e002      	b.n	80089c8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	461a      	mov	r2, r3
 80089ca:	6879      	ldr	r1, [r7, #4]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 ff53 	bl	8009878 <USBD_CtlContinueRx>
 80089d2:	e038      	b.n	8008a46 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00a      	beq.n	80089f6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d105      	bne.n	80089f6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f000 ff50 	bl	800989c <USBD_CtlSendStatus>
 80089fc:	e023      	b.n	8008a46 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a04:	2b05      	cmp	r3, #5
 8008a06:	d11e      	bne.n	8008a46 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f001 fae2 	bl	8009fdc <USBD_LL_StallEP>
 8008a18:	e015      	b.n	8008a46 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00d      	beq.n	8008a42 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d108      	bne.n	8008a42 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	7afa      	ldrb	r2, [r7, #11]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	4798      	blx	r3
 8008a40:	e001      	b.n	8008a46 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a42:	2302      	movs	r3, #2
 8008a44:	e000      	b.n	8008a48 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3718      	adds	r7, #24
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d17f      	bne.n	8008b64 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3314      	adds	r3, #20
 8008a68:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d15c      	bne.n	8008b2e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d915      	bls.n	8008aac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	1ad2      	subs	r2, r2, r3
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	6879      	ldr	r1, [r7, #4]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 febd 	bl	8009818 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f001 fb44 	bl	800a132 <USBD_LL_PrepareReceive>
 8008aaa:	e04e      	b.n	8008b4a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	697a      	ldr	r2, [r7, #20]
 8008ab2:	6912      	ldr	r2, [r2, #16]
 8008ab4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ab8:	fb01 f202 	mul.w	r2, r1, r2
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d11c      	bne.n	8008afc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d316      	bcc.n	8008afc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	689a      	ldr	r2, [r3, #8]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d20f      	bcs.n	8008afc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008adc:	2200      	movs	r2, #0
 8008ade:	2100      	movs	r1, #0
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 fe99 	bl	8009818 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008aee:	2300      	movs	r3, #0
 8008af0:	2200      	movs	r2, #0
 8008af2:	2100      	movs	r1, #0
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f001 fb1c 	bl	800a132 <USBD_LL_PrepareReceive>
 8008afa:	e026      	b.n	8008b4a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d105      	bne.n	8008b1e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008b1e:	2180      	movs	r1, #128	@ 0x80
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f001 fa5b 	bl	8009fdc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 fecb 	bl	80098c2 <USBD_CtlReceiveStatus>
 8008b2c:	e00d      	b.n	8008b4a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d004      	beq.n	8008b42 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d103      	bne.n	8008b4a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008b42:	2180      	movs	r1, #128	@ 0x80
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f001 fa49 	bl	8009fdc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d11d      	bne.n	8008b90 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f7ff fe81 	bl	800885c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008b62:	e015      	b.n	8008b90 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00d      	beq.n	8008b8c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d108      	bne.n	8008b8c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	7afa      	ldrb	r2, [r7, #11]
 8008b84:	4611      	mov	r1, r2
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	4798      	blx	r3
 8008b8a:	e001      	b.n	8008b90 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e000      	b.n	8008b92 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3718      	adds	r7, #24
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ba2:	2340      	movs	r3, #64	@ 0x40
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f9d2 	bl	8009f52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2240      	movs	r2, #64	@ 0x40
 8008bba:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008bbe:	2340      	movs	r3, #64	@ 0x40
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2180      	movs	r1, #128	@ 0x80
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f9c4 	bl	8009f52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2240      	movs	r2, #64	@ 0x40
 8008bd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d009      	beq.n	8008c12 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6852      	ldr	r2, [r2, #4]
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	4611      	mov	r1, r2
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
  }

  return USBD_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bc80      	pop	{r7}
 8008c38:	4770      	bx	lr

08008c3a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2204      	movs	r2, #4
 8008c52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bc80      	pop	{r7}
 8008c60:	4770      	bx	lr

08008c62 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d105      	bne.n	8008c80 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bc80      	pop	{r7}
 8008c8a:	4770      	bx	lr

08008c8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d10b      	bne.n	8008cb6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cd6:	2b40      	cmp	r3, #64	@ 0x40
 8008cd8:	d005      	beq.n	8008ce6 <USBD_StdDevReq+0x26>
 8008cda:	2b40      	cmp	r3, #64	@ 0x40
 8008cdc:	d84f      	bhi.n	8008d7e <USBD_StdDevReq+0xbe>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d009      	beq.n	8008cf6 <USBD_StdDevReq+0x36>
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d14b      	bne.n	8008d7e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
      break;
 8008cf4:	e048      	b.n	8008d88 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	2b09      	cmp	r3, #9
 8008cfc:	d839      	bhi.n	8008d72 <USBD_StdDevReq+0xb2>
 8008cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008d04 <USBD_StdDevReq+0x44>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d55 	.word	0x08008d55
 8008d08:	08008d69 	.word	0x08008d69
 8008d0c:	08008d73 	.word	0x08008d73
 8008d10:	08008d5f 	.word	0x08008d5f
 8008d14:	08008d73 	.word	0x08008d73
 8008d18:	08008d37 	.word	0x08008d37
 8008d1c:	08008d2d 	.word	0x08008d2d
 8008d20:	08008d73 	.word	0x08008d73
 8008d24:	08008d4b 	.word	0x08008d4b
 8008d28:	08008d41 	.word	0x08008d41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f9dc 	bl	80090ec <USBD_GetDescriptor>
          break;
 8008d34:	e022      	b.n	8008d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb3f 	bl	80093bc <USBD_SetAddress>
          break;
 8008d3e:	e01d      	b.n	8008d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fb7e 	bl	8009444 <USBD_SetConfig>
          break;
 8008d48:	e018      	b.n	8008d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fc07 	bl	8009560 <USBD_GetConfig>
          break;
 8008d52:	e013      	b.n	8008d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fc37 	bl	80095ca <USBD_GetStatus>
          break;
 8008d5c:	e00e      	b.n	8008d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fc65 	bl	8009630 <USBD_SetFeature>
          break;
 8008d66:	e009      	b.n	8008d7c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fc74 	bl	8009658 <USBD_ClrFeature>
          break;
 8008d70:	e004      	b.n	8008d7c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fcc9 	bl	800970c <USBD_CtlError>
          break;
 8008d7a:	bf00      	nop
      }
      break;
 8008d7c:	e004      	b.n	8008d88 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 fcc3 	bl	800970c <USBD_CtlError>
      break;
 8008d86:	bf00      	nop
  }

  return ret;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop

08008d94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008daa:	2b40      	cmp	r3, #64	@ 0x40
 8008dac:	d005      	beq.n	8008dba <USBD_StdItfReq+0x26>
 8008dae:	2b40      	cmp	r3, #64	@ 0x40
 8008db0:	d82e      	bhi.n	8008e10 <USBD_StdItfReq+0x7c>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <USBD_StdItfReq+0x26>
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d12a      	bne.n	8008e10 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d81d      	bhi.n	8008e02 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	889b      	ldrh	r3, [r3, #4]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d813      	bhi.n	8008df8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
 8008dde:	4603      	mov	r3, r0
 8008de0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	88db      	ldrh	r3, [r3, #6]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d110      	bne.n	8008e0c <USBD_StdItfReq+0x78>
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10d      	bne.n	8008e0c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fd53 	bl	800989c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008df6:	e009      	b.n	8008e0c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fc86 	bl	800970c <USBD_CtlError>
          break;
 8008e00:	e004      	b.n	8008e0c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fc81 	bl	800970c <USBD_CtlError>
          break;
 8008e0a:	e000      	b.n	8008e0e <USBD_StdItfReq+0x7a>
          break;
 8008e0c:	bf00      	nop
      }
      break;
 8008e0e:	e004      	b.n	8008e1a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fc7a 	bl	800970c <USBD_CtlError>
      break;
 8008e18:	bf00      	nop
  }

  return USBD_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	889b      	ldrh	r3, [r3, #4]
 8008e36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e40:	2b40      	cmp	r3, #64	@ 0x40
 8008e42:	d007      	beq.n	8008e54 <USBD_StdEPReq+0x30>
 8008e44:	2b40      	cmp	r3, #64	@ 0x40
 8008e46:	f200 8146 	bhi.w	80090d6 <USBD_StdEPReq+0x2b2>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <USBD_StdEPReq+0x40>
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	f040 8141 	bne.w	80090d6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
      break;
 8008e62:	e13d      	b.n	80090e0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008e6c:	2b20      	cmp	r3, #32
 8008e6e:	d10a      	bne.n	8008e86 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	e12d      	b.n	80090e2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d007      	beq.n	8008e9e <USBD_StdEPReq+0x7a>
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	f300 811b 	bgt.w	80090ca <USBD_StdEPReq+0x2a6>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d072      	beq.n	8008f7e <USBD_StdEPReq+0x15a>
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d03a      	beq.n	8008f12 <USBD_StdEPReq+0xee>
 8008e9c:	e115      	b.n	80090ca <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea4:	2b02      	cmp	r3, #2
 8008ea6:	d002      	beq.n	8008eae <USBD_StdEPReq+0x8a>
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d015      	beq.n	8008ed8 <USBD_StdEPReq+0xb4>
 8008eac:	e02b      	b.n	8008f06 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00c      	beq.n	8008ece <USBD_StdEPReq+0xaa>
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	2b80      	cmp	r3, #128	@ 0x80
 8008eb8:	d009      	beq.n	8008ece <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 f88c 	bl	8009fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ec4:	2180      	movs	r1, #128	@ 0x80
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 f888 	bl	8009fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ecc:	e020      	b.n	8008f10 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fc1b 	bl	800970c <USBD_CtlError>
              break;
 8008ed6:	e01b      	b.n	8008f10 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	885b      	ldrh	r3, [r3, #2]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10e      	bne.n	8008efe <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008ee0:	7bbb      	ldrb	r3, [r7, #14]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00b      	beq.n	8008efe <USBD_StdEPReq+0xda>
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b80      	cmp	r3, #128	@ 0x80
 8008eea:	d008      	beq.n	8008efe <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	88db      	ldrh	r3, [r3, #6]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 f86f 	bl	8009fdc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fccc 	bl	800989c <USBD_CtlSendStatus>

              break;
 8008f04:	e004      	b.n	8008f10 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fbff 	bl	800970c <USBD_CtlError>
              break;
 8008f0e:	bf00      	nop
          }
          break;
 8008f10:	e0e0      	b.n	80090d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d002      	beq.n	8008f22 <USBD_StdEPReq+0xfe>
 8008f1c:	2b03      	cmp	r3, #3
 8008f1e:	d015      	beq.n	8008f4c <USBD_StdEPReq+0x128>
 8008f20:	e026      	b.n	8008f70 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00c      	beq.n	8008f42 <USBD_StdEPReq+0x11e>
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b80      	cmp	r3, #128	@ 0x80
 8008f2c:	d009      	beq.n	8008f42 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f2e:	7bbb      	ldrb	r3, [r7, #14]
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f001 f852 	bl	8009fdc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f38:	2180      	movs	r1, #128	@ 0x80
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 f84e 	bl	8009fdc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f40:	e01c      	b.n	8008f7c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fbe1 	bl	800970c <USBD_CtlError>
              break;
 8008f4a:	e017      	b.n	8008f7c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	885b      	ldrh	r3, [r3, #2]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d112      	bne.n	8008f7a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d004      	beq.n	8008f68 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	4619      	mov	r1, r3
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 f859 	bl	800a01a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fc97 	bl	800989c <USBD_CtlSendStatus>
              }
              break;
 8008f6e:	e004      	b.n	8008f7a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 fbca 	bl	800970c <USBD_CtlError>
              break;
 8008f78:	e000      	b.n	8008f7c <USBD_StdEPReq+0x158>
              break;
 8008f7a:	bf00      	nop
          }
          break;
 8008f7c:	e0aa      	b.n	80090d4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d002      	beq.n	8008f8e <USBD_StdEPReq+0x16a>
 8008f88:	2b03      	cmp	r3, #3
 8008f8a:	d032      	beq.n	8008ff2 <USBD_StdEPReq+0x1ce>
 8008f8c:	e097      	b.n	80090be <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <USBD_StdEPReq+0x180>
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b80      	cmp	r3, #128	@ 0x80
 8008f98:	d004      	beq.n	8008fa4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fbb5 	bl	800970c <USBD_CtlError>
                break;
 8008fa2:	e091      	b.n	80090c8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	da0b      	bge.n	8008fc4 <USBD_StdEPReq+0x1a0>
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	3310      	adds	r3, #16
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	e00b      	b.n	8008fdc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	4413      	add	r3, r2
 8008fda:	3304      	adds	r3, #4
 8008fdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fbf8 	bl	80097e0 <USBD_CtlSendData>
              break;
 8008ff0:	e06a      	b.n	80090c8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da11      	bge.n	800901e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	f003 020f 	and.w	r2, r3, #15
 8009000:	6879      	ldr	r1, [r7, #4]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	440b      	add	r3, r1
 800900c:	3318      	adds	r3, #24
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d117      	bne.n	8009044 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fb78 	bl	800970c <USBD_CtlError>
                  break;
 800901c:	e054      	b.n	80090c8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	f003 020f 	and.w	r2, r3, #15
 8009024:	6879      	ldr	r1, [r7, #4]
 8009026:	4613      	mov	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	440b      	add	r3, r1
 8009030:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fb65 	bl	800970c <USBD_CtlError>
                  break;
 8009042:	e041      	b.n	80090c8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009048:	2b00      	cmp	r3, #0
 800904a:	da0b      	bge.n	8009064 <USBD_StdEPReq+0x240>
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009052:	4613      	mov	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	3310      	adds	r3, #16
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	4413      	add	r3, r2
 8009060:	3304      	adds	r3, #4
 8009062:	e00b      	b.n	800907c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	3304      	adds	r3, #4
 800907c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <USBD_StdEPReq+0x266>
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b80      	cmp	r3, #128	@ 0x80
 8009088:	d103      	bne.n	8009092 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	e00e      	b.n	80090b0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 ffde 	bl	800a058 <USBD_LL_IsStallEP>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	2201      	movs	r2, #1
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e002      	b.n	80090b0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2202      	movs	r2, #2
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fb92 	bl	80097e0 <USBD_CtlSendData>
              break;
 80090bc:	e004      	b.n	80090c8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80090be:	6839      	ldr	r1, [r7, #0]
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 fb23 	bl	800970c <USBD_CtlError>
              break;
 80090c6:	bf00      	nop
          }
          break;
 80090c8:	e004      	b.n	80090d4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80090ca:	6839      	ldr	r1, [r7, #0]
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fb1d 	bl	800970c <USBD_CtlError>
          break;
 80090d2:	bf00      	nop
      }
      break;
 80090d4:	e004      	b.n	80090e0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80090d6:	6839      	ldr	r1, [r7, #0]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fb17 	bl	800970c <USBD_CtlError>
      break;
 80090de:	bf00      	nop
  }

  return ret;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	0a1b      	lsrs	r3, r3, #8
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	2b06      	cmp	r3, #6
 800910e:	f200 8128 	bhi.w	8009362 <USBD_GetDescriptor+0x276>
 8009112:	a201      	add	r2, pc, #4	@ (adr r2, 8009118 <USBD_GetDescriptor+0x2c>)
 8009114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009118:	08009135 	.word	0x08009135
 800911c:	0800914d 	.word	0x0800914d
 8009120:	0800918d 	.word	0x0800918d
 8009124:	08009363 	.word	0x08009363
 8009128:	08009363 	.word	0x08009363
 800912c:	08009303 	.word	0x08009303
 8009130:	0800932f 	.word	0x0800932f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	7c12      	ldrb	r2, [r2, #16]
 8009140:	f107 0108 	add.w	r1, r7, #8
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
 8009148:	60f8      	str	r0, [r7, #12]
      break;
 800914a:	e112      	b.n	8009372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7c1b      	ldrb	r3, [r3, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10d      	bne.n	8009170 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800915a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800915c:	f107 0208 	add.w	r2, r7, #8
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
 8009164:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	3301      	adds	r3, #1
 800916a:	2202      	movs	r2, #2
 800916c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800916e:	e100      	b.n	8009372 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	f107 0208 	add.w	r2, r7, #8
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
 8009180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3301      	adds	r3, #1
 8009186:	2202      	movs	r2, #2
 8009188:	701a      	strb	r2, [r3, #0]
      break;
 800918a:	e0f2      	b.n	8009372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	885b      	ldrh	r3, [r3, #2]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b05      	cmp	r3, #5
 8009194:	f200 80ac 	bhi.w	80092f0 <USBD_GetDescriptor+0x204>
 8009198:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <USBD_GetDescriptor+0xb4>)
 800919a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919e:	bf00      	nop
 80091a0:	080091b9 	.word	0x080091b9
 80091a4:	080091ed 	.word	0x080091ed
 80091a8:	08009221 	.word	0x08009221
 80091ac:	08009255 	.word	0x08009255
 80091b0:	08009289 	.word	0x08009289
 80091b4:	080092bd 	.word	0x080092bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00b      	beq.n	80091dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	7c12      	ldrb	r2, [r2, #16]
 80091d0:	f107 0108 	add.w	r1, r7, #8
 80091d4:	4610      	mov	r0, r2
 80091d6:	4798      	blx	r3
 80091d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091da:	e091      	b.n	8009300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa94 	bl	800970c <USBD_CtlError>
            err++;
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	3301      	adds	r3, #1
 80091e8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ea:	e089      	b.n	8009300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	7c12      	ldrb	r2, [r2, #16]
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	4610      	mov	r0, r2
 800920a:	4798      	blx	r3
 800920c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920e:	e077      	b.n	8009300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 fa7a 	bl	800970c <USBD_CtlError>
            err++;
 8009218:	7afb      	ldrb	r3, [r7, #11]
 800921a:	3301      	adds	r3, #1
 800921c:	72fb      	strb	r3, [r7, #11]
          break;
 800921e:	e06f      	b.n	8009300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	7c12      	ldrb	r2, [r2, #16]
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
 8009240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009242:	e05d      	b.n	8009300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa60 	bl	800970c <USBD_CtlError>
            err++;
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	3301      	adds	r3, #1
 8009250:	72fb      	strb	r3, [r7, #11]
          break;
 8009252:	e055      	b.n	8009300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00b      	beq.n	8009278 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	7c12      	ldrb	r2, [r2, #16]
 800926c:	f107 0108 	add.w	r1, r7, #8
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
 8009274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009276:	e043      	b.n	8009300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fa46 	bl	800970c <USBD_CtlError>
            err++;
 8009280:	7afb      	ldrb	r3, [r7, #11]
 8009282:	3301      	adds	r3, #1
 8009284:	72fb      	strb	r3, [r7, #11]
          break;
 8009286:	e03b      	b.n	8009300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	7c12      	ldrb	r2, [r2, #16]
 80092a0:	f107 0108 	add.w	r1, r7, #8
 80092a4:	4610      	mov	r0, r2
 80092a6:	4798      	blx	r3
 80092a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092aa:	e029      	b.n	8009300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa2c 	bl	800970c <USBD_CtlError>
            err++;
 80092b4:	7afb      	ldrb	r3, [r7, #11]
 80092b6:	3301      	adds	r3, #1
 80092b8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ba:	e021      	b.n	8009300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	7c12      	ldrb	r2, [r2, #16]
 80092d4:	f107 0108 	add.w	r1, r7, #8
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092de:	e00f      	b.n	8009300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 fa12 	bl	800970c <USBD_CtlError>
            err++;
 80092e8:	7afb      	ldrb	r3, [r7, #11]
 80092ea:	3301      	adds	r3, #1
 80092ec:	72fb      	strb	r3, [r7, #11]
          break;
 80092ee:	e007      	b.n	8009300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fa0a 	bl	800970c <USBD_CtlError>
          err++;
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	3301      	adds	r3, #1
 80092fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80092fe:	e038      	b.n	8009372 <USBD_GetDescriptor+0x286>
 8009300:	e037      	b.n	8009372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	7c1b      	ldrb	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d109      	bne.n	800931e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009312:	f107 0208 	add.w	r2, r7, #8
 8009316:	4610      	mov	r0, r2
 8009318:	4798      	blx	r3
 800931a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800931c:	e029      	b.n	8009372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f9f3 	bl	800970c <USBD_CtlError>
        err++;
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	3301      	adds	r3, #1
 800932a:	72fb      	strb	r3, [r7, #11]
      break;
 800932c:	e021      	b.n	8009372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	7c1b      	ldrb	r3, [r3, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10d      	bne.n	8009352 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800933c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933e:	f107 0208 	add.w	r2, r7, #8
 8009342:	4610      	mov	r0, r2
 8009344:	4798      	blx	r3
 8009346:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3301      	adds	r3, #1
 800934c:	2207      	movs	r2, #7
 800934e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009350:	e00f      	b.n	8009372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f9d9 	bl	800970c <USBD_CtlError>
        err++;
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	3301      	adds	r3, #1
 800935e:	72fb      	strb	r3, [r7, #11]
      break;
 8009360:	e007      	b.n	8009372 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f9d1 	bl	800970c <USBD_CtlError>
      err++;
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	3301      	adds	r3, #1
 800936e:	72fb      	strb	r3, [r7, #11]
      break;
 8009370:	bf00      	nop
  }

  if (err != 0U)
 8009372:	7afb      	ldrb	r3, [r7, #11]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d11c      	bne.n	80093b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009378:	893b      	ldrh	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d011      	beq.n	80093a2 <USBD_GetDescriptor+0x2b6>
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	88db      	ldrh	r3, [r3, #6]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00d      	beq.n	80093a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	88da      	ldrh	r2, [r3, #6]
 800938a:	893b      	ldrh	r3, [r7, #8]
 800938c:	4293      	cmp	r3, r2
 800938e:	bf28      	it	cs
 8009390:	4613      	movcs	r3, r2
 8009392:	b29b      	uxth	r3, r3
 8009394:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009396:	893b      	ldrh	r3, [r7, #8]
 8009398:	461a      	mov	r2, r3
 800939a:	68f9      	ldr	r1, [r7, #12]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fa1f 	bl	80097e0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	88db      	ldrh	r3, [r3, #6]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d104      	bne.n	80093b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fa76 	bl	800989c <USBD_CtlSendStatus>
 80093b0:	e000      	b.n	80093b4 <USBD_GetDescriptor+0x2c8>
    return;
 80093b2:	bf00      	nop
    }
  }
}
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop

080093bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	889b      	ldrh	r3, [r3, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d130      	bne.n	8009430 <USBD_SetAddress+0x74>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	88db      	ldrh	r3, [r3, #6]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d12c      	bne.n	8009430 <USBD_SetAddress+0x74>
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	885b      	ldrh	r3, [r3, #2]
 80093da:	2b7f      	cmp	r3, #127	@ 0x7f
 80093dc:	d828      	bhi.n	8009430 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	885b      	ldrh	r3, [r3, #2]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093f0:	2b03      	cmp	r3, #3
 80093f2:	d104      	bne.n	80093fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f988 	bl	800970c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fc:	e01d      	b.n	800943a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	7bfa      	ldrb	r2, [r7, #15]
 8009402:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fe4f 	bl	800a0ae <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fa43 	bl	800989c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009424:	e009      	b.n	800943a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800942e:	e004      	b.n	800943a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f96a 	bl	800970c <USBD_CtlError>
  }
}
 8009438:	bf00      	nop
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	885b      	ldrh	r3, [r3, #2]
 8009452:	b2da      	uxtb	r2, r3
 8009454:	4b41      	ldr	r3, [pc, #260]	@ (800955c <USBD_SetConfig+0x118>)
 8009456:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009458:	4b40      	ldr	r3, [pc, #256]	@ (800955c <USBD_SetConfig+0x118>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d904      	bls.n	800946a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f952 	bl	800970c <USBD_CtlError>
 8009468:	e075      	b.n	8009556 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009470:	2b02      	cmp	r3, #2
 8009472:	d002      	beq.n	800947a <USBD_SetConfig+0x36>
 8009474:	2b03      	cmp	r3, #3
 8009476:	d023      	beq.n	80094c0 <USBD_SetConfig+0x7c>
 8009478:	e062      	b.n	8009540 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800947a:	4b38      	ldr	r3, [pc, #224]	@ (800955c <USBD_SetConfig+0x118>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d01a      	beq.n	80094b8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009482:	4b36      	ldr	r3, [pc, #216]	@ (800955c <USBD_SetConfig+0x118>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2203      	movs	r2, #3
 8009490:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009494:	4b31      	ldr	r3, [pc, #196]	@ (800955c <USBD_SetConfig+0x118>)
 8009496:	781b      	ldrb	r3, [r3, #0]
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff f9e8 	bl	8008870 <USBD_SetClassConfig>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d104      	bne.n	80094b0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f92f 	bl	800970c <USBD_CtlError>
            return;
 80094ae:	e052      	b.n	8009556 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f9f3 	bl	800989c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094b6:	e04e      	b.n	8009556 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f9ef 	bl	800989c <USBD_CtlSendStatus>
        break;
 80094be:	e04a      	b.n	8009556 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80094c0:	4b26      	ldr	r3, [pc, #152]	@ (800955c <USBD_SetConfig+0x118>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d112      	bne.n	80094ee <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80094d0:	4b22      	ldr	r3, [pc, #136]	@ (800955c <USBD_SetConfig+0x118>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80094da:	4b20      	ldr	r3, [pc, #128]	@ (800955c <USBD_SetConfig+0x118>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff f9e4 	bl	80088ae <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f9d8 	bl	800989c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094ec:	e033      	b.n	8009556 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80094ee:	4b1b      	ldr	r3, [pc, #108]	@ (800955c <USBD_SetConfig+0x118>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d01d      	beq.n	8009538 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	b2db      	uxtb	r3, r3
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff f9d2 	bl	80088ae <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800950a:	4b14      	ldr	r3, [pc, #80]	@ (800955c <USBD_SetConfig+0x118>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009514:	4b11      	ldr	r3, [pc, #68]	@ (800955c <USBD_SetConfig+0x118>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff f9a8 	bl	8008870 <USBD_SetClassConfig>
 8009520:	4603      	mov	r3, r0
 8009522:	2b02      	cmp	r3, #2
 8009524:	d104      	bne.n	8009530 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f8ef 	bl	800970c <USBD_CtlError>
            return;
 800952e:	e012      	b.n	8009556 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f9b3 	bl	800989c <USBD_CtlSendStatus>
        break;
 8009536:	e00e      	b.n	8009556 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9af 	bl	800989c <USBD_CtlSendStatus>
        break;
 800953e:	e00a      	b.n	8009556 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009540:	6839      	ldr	r1, [r7, #0]
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f8e2 	bl	800970c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009548:	4b04      	ldr	r3, [pc, #16]	@ (800955c <USBD_SetConfig+0x118>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff f9ad 	bl	80088ae <USBD_ClrClassConfig>
        break;
 8009554:	bf00      	nop
    }
  }
}
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20000420 	.word	0x20000420

08009560 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	88db      	ldrh	r3, [r3, #6]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d004      	beq.n	800957c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f8c9 	bl	800970c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800957a:	e022      	b.n	80095c2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009582:	2b02      	cmp	r3, #2
 8009584:	dc02      	bgt.n	800958c <USBD_GetConfig+0x2c>
 8009586:	2b00      	cmp	r3, #0
 8009588:	dc03      	bgt.n	8009592 <USBD_GetConfig+0x32>
 800958a:	e015      	b.n	80095b8 <USBD_GetConfig+0x58>
 800958c:	2b03      	cmp	r3, #3
 800958e:	d00b      	beq.n	80095a8 <USBD_GetConfig+0x48>
 8009590:	e012      	b.n	80095b8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3308      	adds	r3, #8
 800959c:	2201      	movs	r2, #1
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f91d 	bl	80097e0 <USBD_CtlSendData>
        break;
 80095a6:	e00c      	b.n	80095c2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3304      	adds	r3, #4
 80095ac:	2201      	movs	r2, #1
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f915 	bl	80097e0 <USBD_CtlSendData>
        break;
 80095b6:	e004      	b.n	80095c2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f8a6 	bl	800970c <USBD_CtlError>
        break;
 80095c0:	bf00      	nop
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095da:	3b01      	subs	r3, #1
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d81e      	bhi.n	800961e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	88db      	ldrh	r3, [r3, #6]
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d004      	beq.n	80095f2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f88e 	bl	800970c <USBD_CtlError>
        break;
 80095f0:	e01a      	b.n	8009628 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f043 0202 	orr.w	r2, r3, #2
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	330c      	adds	r3, #12
 8009612:	2202      	movs	r2, #2
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f8e2 	bl	80097e0 <USBD_CtlSendData>
      break;
 800961c:	e004      	b.n	8009628 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f873 	bl	800970c <USBD_CtlError>
      break;
 8009626:	bf00      	nop
  }
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	885b      	ldrh	r3, [r3, #2]
 800963e:	2b01      	cmp	r3, #1
 8009640:	d106      	bne.n	8009650 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 f926 	bl	800989c <USBD_CtlSendStatus>
  }
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009668:	3b01      	subs	r3, #1
 800966a:	2b02      	cmp	r3, #2
 800966c:	d80b      	bhi.n	8009686 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	885b      	ldrh	r3, [r3, #2]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d10c      	bne.n	8009690 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f90c 	bl	800989c <USBD_CtlSendStatus>
      }
      break;
 8009684:	e004      	b.n	8009690 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f83f 	bl	800970c <USBD_CtlError>
      break;
 800968e:	e000      	b.n	8009692 <USBD_ClrFeature+0x3a>
      break;
 8009690:	bf00      	nop
  }
}
 8009692:	bf00      	nop
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	781a      	ldrb	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	785a      	ldrb	r2, [r3, #1]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	3302      	adds	r3, #2
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	461a      	mov	r2, r3
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	3303      	adds	r3, #3
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	021b      	lsls	r3, r3, #8
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	4413      	add	r3, r2
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	3304      	adds	r3, #4
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	3305      	adds	r3, #5
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	b29b      	uxth	r3, r3
 80096e0:	4413      	add	r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	3306      	adds	r3, #6
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	3307      	adds	r3, #7
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4413      	add	r3, r2
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	80da      	strh	r2, [r3, #6]

}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr

0800970c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009716:	2180      	movs	r1, #128	@ 0x80
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fc5f 	bl	8009fdc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800971e:	2100      	movs	r1, #0
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fc5b 	bl	8009fdc <USBD_LL_StallEP>
}
 8009726:	bf00      	nop
 8009728:	3708      	adds	r7, #8
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	60f8      	str	r0, [r7, #12]
 8009736:	60b9      	str	r1, [r7, #8]
 8009738:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d032      	beq.n	80097aa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 f834 	bl	80097b2 <USBD_GetLen>
 800974a:	4603      	mov	r3, r0
 800974c:	3301      	adds	r3, #1
 800974e:	b29b      	uxth	r3, r3
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	b29a      	uxth	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	1c5a      	adds	r2, r3, #1
 800975c:	75fa      	strb	r2, [r7, #23]
 800975e:	461a      	mov	r2, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	4413      	add	r3, r2
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	7812      	ldrb	r2, [r2, #0]
 8009768:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800976a:	7dfb      	ldrb	r3, [r7, #23]
 800976c:	1c5a      	adds	r2, r3, #1
 800976e:	75fa      	strb	r2, [r7, #23]
 8009770:	461a      	mov	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4413      	add	r3, r2
 8009776:	2203      	movs	r2, #3
 8009778:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800977a:	e012      	b.n	80097a2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	1c5a      	adds	r2, r3, #1
 8009780:	60fa      	str	r2, [r7, #12]
 8009782:	7dfa      	ldrb	r2, [r7, #23]
 8009784:	1c51      	adds	r1, r2, #1
 8009786:	75f9      	strb	r1, [r7, #23]
 8009788:	4611      	mov	r1, r2
 800978a:	68ba      	ldr	r2, [r7, #8]
 800978c:	440a      	add	r2, r1
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	1c5a      	adds	r2, r3, #1
 8009796:	75fa      	strb	r2, [r7, #23]
 8009798:	461a      	mov	r2, r3
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	4413      	add	r3, r2
 800979e:	2200      	movs	r2, #0
 80097a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e8      	bne.n	800977c <USBD_GetString+0x4e>
    }
  }
}
 80097aa:	bf00      	nop
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b085      	sub	sp, #20
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80097be:	e005      	b.n	80097cc <USBD_GetLen+0x1a>
  {
    len++;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	3301      	adds	r3, #1
 80097c4:	73fb      	strb	r3, [r7, #15]
    buf++;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3301      	adds	r3, #1
 80097ca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1f5      	bne.n	80097c0 <USBD_GetLen+0xe>
  }

  return len;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	bc80      	pop	{r7}
 80097de:	4770      	bx	lr

080097e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	4613      	mov	r3, r2
 80097ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2202      	movs	r2, #2
 80097f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80097f6:	88fa      	ldrh	r2, [r7, #6]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80097fc:	88fa      	ldrh	r2, [r7, #6]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fc6f 	bl	800a0ec <USBD_LL_Transmit>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	4613      	mov	r3, r2
 8009824:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009826:	88fb      	ldrh	r3, [r7, #6]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	2100      	movs	r1, #0
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f000 fc5d 	bl	800a0ec <USBD_LL_Transmit>

  return USBD_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2203      	movs	r2, #3
 800984e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009852:	88fa      	ldrh	r2, [r7, #6]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800985a:	88fa      	ldrh	r2, [r7, #6]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009862:	88fb      	ldrh	r3, [r7, #6]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	2100      	movs	r1, #0
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 fc62 	bl	800a132 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4613      	mov	r3, r2
 8009884:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009886:	88fb      	ldrh	r3, [r7, #6]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	2100      	movs	r1, #0
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fc50 	bl	800a132 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2204      	movs	r2, #4
 80098a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098ac:	2300      	movs	r3, #0
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fc1a 	bl	800a0ec <USBD_LL_Transmit>

  return USBD_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2205      	movs	r2, #5
 80098ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098d2:	2300      	movs	r3, #0
 80098d4:	2200      	movs	r2, #0
 80098d6:	2100      	movs	r1, #0
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc2a 	bl	800a132 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4912      	ldr	r1, [pc, #72]	@ (8009938 <MX_USB_DEVICE_Init+0x50>)
 80098f0:	4812      	ldr	r0, [pc, #72]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 80098f2:	f7fe ff63 	bl	80087bc <USBD_Init>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098fc:	f7f8 fe4e 	bl	800259c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009900:	490f      	ldr	r1, [pc, #60]	@ (8009940 <MX_USB_DEVICE_Init+0x58>)
 8009902:	480e      	ldr	r0, [pc, #56]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 8009904:	f7fe ff85 	bl	8008812 <USBD_RegisterClass>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800990e:	f7f8 fe45 	bl	800259c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009912:	490c      	ldr	r1, [pc, #48]	@ (8009944 <MX_USB_DEVICE_Init+0x5c>)
 8009914:	4809      	ldr	r0, [pc, #36]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 8009916:	f7fe fee5 	bl	80086e4 <USBD_CDC_RegisterInterface>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009920:	f7f8 fe3c 	bl	800259c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009924:	4805      	ldr	r0, [pc, #20]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 8009926:	f7fe ff8d 	bl	8008844 <USBD_Start>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009930:	f7f8 fe34 	bl	800259c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009934:	bf00      	nop
 8009936:	bd80      	pop	{r7, pc}
 8009938:	2000013c 	.word	0x2000013c
 800993c:	20000424 	.word	0x20000424
 8009940:	20000028 	.word	0x20000028
 8009944:	2000012c 	.word	0x2000012c

08009948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800994c:	2200      	movs	r2, #0
 800994e:	4905      	ldr	r1, [pc, #20]	@ (8009964 <CDC_Init_FS+0x1c>)
 8009950:	4805      	ldr	r0, [pc, #20]	@ (8009968 <CDC_Init_FS+0x20>)
 8009952:	f7fe fedd 	bl	8008710 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009956:	4905      	ldr	r1, [pc, #20]	@ (800996c <CDC_Init_FS+0x24>)
 8009958:	4803      	ldr	r0, [pc, #12]	@ (8009968 <CDC_Init_FS+0x20>)
 800995a:	f7fe fef2 	bl	8008742 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800995e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009960:	4618      	mov	r0, r3
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20000ae8 	.word	0x20000ae8
 8009968:	20000424 	.word	0x20000424
 800996c:	200006e8 	.word	0x200006e8

08009970 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009974:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009976:	4618      	mov	r0, r3
 8009978:	46bd      	mov	sp, r7
 800997a:	bc80      	pop	{r7}
 800997c:	4770      	bx	lr
	...

08009980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
 800998c:	4613      	mov	r3, r2
 800998e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	2b23      	cmp	r3, #35	@ 0x23
 8009994:	d84a      	bhi.n	8009a2c <CDC_Control_FS+0xac>
 8009996:	a201      	add	r2, pc, #4	@ (adr r2, 800999c <CDC_Control_FS+0x1c>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	08009a2d 	.word	0x08009a2d
 80099a0:	08009a2d 	.word	0x08009a2d
 80099a4:	08009a2d 	.word	0x08009a2d
 80099a8:	08009a2d 	.word	0x08009a2d
 80099ac:	08009a2d 	.word	0x08009a2d
 80099b0:	08009a2d 	.word	0x08009a2d
 80099b4:	08009a2d 	.word	0x08009a2d
 80099b8:	08009a2d 	.word	0x08009a2d
 80099bc:	08009a2d 	.word	0x08009a2d
 80099c0:	08009a2d 	.word	0x08009a2d
 80099c4:	08009a2d 	.word	0x08009a2d
 80099c8:	08009a2d 	.word	0x08009a2d
 80099cc:	08009a2d 	.word	0x08009a2d
 80099d0:	08009a2d 	.word	0x08009a2d
 80099d4:	08009a2d 	.word	0x08009a2d
 80099d8:	08009a2d 	.word	0x08009a2d
 80099dc:	08009a2d 	.word	0x08009a2d
 80099e0:	08009a2d 	.word	0x08009a2d
 80099e4:	08009a2d 	.word	0x08009a2d
 80099e8:	08009a2d 	.word	0x08009a2d
 80099ec:	08009a2d 	.word	0x08009a2d
 80099f0:	08009a2d 	.word	0x08009a2d
 80099f4:	08009a2d 	.word	0x08009a2d
 80099f8:	08009a2d 	.word	0x08009a2d
 80099fc:	08009a2d 	.word	0x08009a2d
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	08009a2d 	.word	0x08009a2d
 8009a08:	08009a2d 	.word	0x08009a2d
 8009a0c:	08009a2d 	.word	0x08009a2d
 8009a10:	08009a2d 	.word	0x08009a2d
 8009a14:	08009a2d 	.word	0x08009a2d
 8009a18:	08009a2d 	.word	0x08009a2d
 8009a1c:	08009a2d 	.word	0x08009a2d
 8009a20:	08009a2d 	.word	0x08009a2d
 8009a24:	08009a2d 	.word	0x08009a2d
 8009a28:	08009a2d 	.word	0x08009a2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a2c:	bf00      	nop
  }

  return (USBD_OK);
 8009a2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop

08009a3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	481b      	ldr	r0, [pc, #108]	@ (8009ab8 <CDC_Receive_FS+0x7c>)
 8009a4a:	f7fe fe7a 	bl	8008742 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a4e:	481a      	ldr	r0, [pc, #104]	@ (8009ab8 <CDC_Receive_FS+0x7c>)
 8009a50:	f7fe fe8a 	bl	8008768 <USBD_CDC_ReceivePacket>

    for (uint32_t j = 0; j < *Len; j++) {
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	e023      	b.n	8009aa2 <CDC_Receive_FS+0x66>
        buffer[i++] = Buf[j];
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	441a      	add	r2, r3
 8009a60:	4b16      	ldr	r3, [pc, #88]	@ (8009abc <CDC_Receive_FS+0x80>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	1c59      	adds	r1, r3, #1
 8009a68:	b2c8      	uxtb	r0, r1
 8009a6a:	4914      	ldr	r1, [pc, #80]	@ (8009abc <CDC_Receive_FS+0x80>)
 8009a6c:	7008      	strb	r0, [r1, #0]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	7812      	ldrb	r2, [r2, #0]
 8009a72:	4b13      	ldr	r3, [pc, #76]	@ (8009ac0 <CDC_Receive_FS+0x84>)
 8009a74:	545a      	strb	r2, [r3, r1]

        if (Buf[j] == '\n'){
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	2b0a      	cmp	r3, #10
 8009a80:	d10c      	bne.n	8009a9c <CDC_Receive_FS+0x60>
            buffer[i] = '\0';
 8009a82:	4b0e      	ldr	r3, [pc, #56]	@ (8009abc <CDC_Receive_FS+0x80>)
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <CDC_Receive_FS+0x84>)
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	5499      	strb	r1, [r3, r2]
            datareceived = 1;
 8009a90:	4b0c      	ldr	r3, [pc, #48]	@ (8009ac4 <CDC_Receive_FS+0x88>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	701a      	strb	r2, [r3, #0]
            i = 0;
 8009a96:	4b09      	ldr	r3, [pc, #36]	@ (8009abc <CDC_Receive_FS+0x80>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	701a      	strb	r2, [r3, #0]
    for (uint32_t j = 0; j < *Len; j++) {
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	60fb      	str	r3, [r7, #12]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d3d6      	bcc.n	8009a5a <CDC_Receive_FS+0x1e>

        }
    }
  return (USBD_OK);
 8009aac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000424 	.word	0x20000424
 8009abc:	200003c8 	.word	0x200003c8
 8009ac0:	200003b8 	.word	0x200003b8
 8009ac4:	200003c9 	.word	0x200003c9

08009ac8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	6039      	str	r1, [r7, #0]
 8009ad2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	2212      	movs	r2, #18
 8009ad8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ada:	4b03      	ldr	r3, [pc, #12]	@ (8009ae8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bc80      	pop	{r7}
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20000158 	.word	0x20000158

08009aec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	6039      	str	r1, [r7, #0]
 8009af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2204      	movs	r2, #4
 8009afc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009afe:	4b03      	ldr	r3, [pc, #12]	@ (8009b0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bc80      	pop	{r7}
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	2000016c 	.word	0x2000016c

08009b10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	6039      	str	r1, [r7, #0]
 8009b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d105      	bne.n	8009b2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4907      	ldr	r1, [pc, #28]	@ (8009b44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b26:	4808      	ldr	r0, [pc, #32]	@ (8009b48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b28:	f7ff fe01 	bl	800972e <USBD_GetString>
 8009b2c:	e004      	b.n	8009b38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	4904      	ldr	r1, [pc, #16]	@ (8009b44 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b32:	4805      	ldr	r0, [pc, #20]	@ (8009b48 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b34:	f7ff fdfb 	bl	800972e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b38:	4b02      	ldr	r3, [pc, #8]	@ (8009b44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000ee8 	.word	0x20000ee8
 8009b48:	0800e680 	.word	0x0800e680

08009b4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	6039      	str	r1, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	4904      	ldr	r1, [pc, #16]	@ (8009b6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b5c:	4804      	ldr	r0, [pc, #16]	@ (8009b70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b5e:	f7ff fde6 	bl	800972e <USBD_GetString>
  return USBD_StrDesc;
 8009b62:	4b02      	ldr	r3, [pc, #8]	@ (8009b6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20000ee8 	.word	0x20000ee8
 8009b70:	0800e694 	.word	0x0800e694

08009b74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	6039      	str	r1, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	221a      	movs	r2, #26
 8009b84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b86:	f000 f843 	bl	8009c10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b8a:	4b02      	ldr	r3, [pc, #8]	@ (8009b94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000170 	.word	0x20000170

08009b98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	6039      	str	r1, [r7, #0]
 8009ba2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ba4:	79fb      	ldrb	r3, [r7, #7]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d105      	bne.n	8009bb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009baa:	683a      	ldr	r2, [r7, #0]
 8009bac:	4907      	ldr	r1, [pc, #28]	@ (8009bcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bae:	4808      	ldr	r0, [pc, #32]	@ (8009bd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bb0:	f7ff fdbd 	bl	800972e <USBD_GetString>
 8009bb4:	e004      	b.n	8009bc0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	4904      	ldr	r1, [pc, #16]	@ (8009bcc <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bba:	4805      	ldr	r0, [pc, #20]	@ (8009bd0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bbc:	f7ff fdb7 	bl	800972e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bc0:	4b02      	ldr	r3, [pc, #8]	@ (8009bcc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	20000ee8 	.word	0x20000ee8
 8009bd0:	0800e6a8 	.word	0x0800e6a8

08009bd4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	6039      	str	r1, [r7, #0]
 8009bde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009be0:	79fb      	ldrb	r3, [r7, #7]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d105      	bne.n	8009bf2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	4907      	ldr	r1, [pc, #28]	@ (8009c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bea:	4808      	ldr	r0, [pc, #32]	@ (8009c0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bec:	f7ff fd9f 	bl	800972e <USBD_GetString>
 8009bf0:	e004      	b.n	8009bfc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	4904      	ldr	r1, [pc, #16]	@ (8009c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bf6:	4805      	ldr	r0, [pc, #20]	@ (8009c0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bf8:	f7ff fd99 	bl	800972e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bfc:	4b02      	ldr	r3, [pc, #8]	@ (8009c08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3708      	adds	r7, #8
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000ee8 	.word	0x20000ee8
 8009c0c:	0800e6b4 	.word	0x0800e6b4

08009c10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c16:	4b0f      	ldr	r3, [pc, #60]	@ (8009c54 <Get_SerialNum+0x44>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c58 <Get_SerialNum+0x48>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c22:	4b0e      	ldr	r3, [pc, #56]	@ (8009c5c <Get_SerialNum+0x4c>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d009      	beq.n	8009c4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c36:	2208      	movs	r2, #8
 8009c38:	4909      	ldr	r1, [pc, #36]	@ (8009c60 <Get_SerialNum+0x50>)
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 f814 	bl	8009c68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c40:	2204      	movs	r2, #4
 8009c42:	4908      	ldr	r1, [pc, #32]	@ (8009c64 <Get_SerialNum+0x54>)
 8009c44:	68b8      	ldr	r0, [r7, #8]
 8009c46:	f000 f80f 	bl	8009c68 <IntToUnicode>
  }
}
 8009c4a:	bf00      	nop
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	1ffff7e8 	.word	0x1ffff7e8
 8009c58:	1ffff7ec 	.word	0x1ffff7ec
 8009c5c:	1ffff7f0 	.word	0x1ffff7f0
 8009c60:	20000172 	.word	0x20000172
 8009c64:	20000182 	.word	0x20000182

08009c68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	75fb      	strb	r3, [r7, #23]
 8009c7e:	e027      	b.n	8009cd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	0f1b      	lsrs	r3, r3, #28
 8009c84:	2b09      	cmp	r3, #9
 8009c86:	d80b      	bhi.n	8009ca0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	0f1b      	lsrs	r3, r3, #28
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	005b      	lsls	r3, r3, #1
 8009c92:	4619      	mov	r1, r3
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	440b      	add	r3, r1
 8009c98:	3230      	adds	r2, #48	@ 0x30
 8009c9a:	b2d2      	uxtb	r2, r2
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	e00a      	b.n	8009cb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	0f1b      	lsrs	r3, r3, #28
 8009ca4:	b2da      	uxtb	r2, r3
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	4619      	mov	r1, r3
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	440b      	add	r3, r1
 8009cb0:	3237      	adds	r2, #55	@ 0x37
 8009cb2:	b2d2      	uxtb	r2, r2
 8009cb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	75fb      	strb	r3, [r7, #23]
 8009cd0:	7dfa      	ldrb	r2, [r7, #23]
 8009cd2:	79fb      	ldrb	r3, [r7, #7]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d3d3      	bcc.n	8009c80 <IntToUnicode+0x18>
  }
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	371c      	adds	r7, #28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bc80      	pop	{r7}
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8009d28 <HAL_PCD_MspInit+0x44>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d113      	bne.n	8009d1e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8009d2c <HAL_PCD_MspInit+0x48>)
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8009d2c <HAL_PCD_MspInit+0x48>)
 8009cfc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009d00:	61d3      	str	r3, [r2, #28]
 8009d02:	4b0a      	ldr	r3, [pc, #40]	@ (8009d2c <HAL_PCD_MspInit+0x48>)
 8009d04:	69db      	ldr	r3, [r3, #28]
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2100      	movs	r1, #0
 8009d12:	2014      	movs	r0, #20
 8009d14:	f7f8 ff23 	bl	8002b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009d18:	2014      	movs	r0, #20
 8009d1a:	f7f8 ff3c 	bl	8002b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	40005c00 	.word	0x40005c00
 8009d2c:	40021000 	.word	0x40021000

08009d30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7fe fdc4 	bl	80088d4 <USBD_LL_SetupStage>
}
 8009d4c:	bf00      	nop
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009d66:	78fa      	ldrb	r2, [r7, #3]
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	440b      	add	r3, r1
 8009d74:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f7fe fdf6 	bl	800896e <USBD_LL_DataOutStage>
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009d9c:	78fa      	ldrb	r2, [r7, #3]
 8009d9e:	6879      	ldr	r1, [r7, #4]
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	00db      	lsls	r3, r3, #3
 8009da8:	440b      	add	r3, r1
 8009daa:	3324      	adds	r3, #36	@ 0x24
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	4619      	mov	r1, r3
 8009db2:	f7fe fe4d 	bl	8008a50 <USBD_LL_DataInStage>
}
 8009db6:	bf00      	nop
 8009db8:	3708      	adds	r7, #8
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b082      	sub	sp, #8
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe ff5d 	bl	8008c8c <USBD_LL_SOF>
}
 8009dd2:	bf00      	nop
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009de2:	2301      	movs	r3, #1
 8009de4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	799b      	ldrb	r3, [r3, #6]
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d001      	beq.n	8009df2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009dee:	f7f8 fbd5 	bl	800259c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009df8:	7bfa      	ldrb	r2, [r7, #15]
 8009dfa:	4611      	mov	r1, r2
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe ff0d 	bl	8008c1c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7fe fec6 	bl	8008b9a <USBD_LL_Reset>
}
 8009e0e:	bf00      	nop
 8009e10:	3710      	adds	r7, #16
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e26:	4618      	mov	r0, r3
 8009e28:	f7fe ff07 	bl	8008c3a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7a9b      	ldrb	r3, [r3, #10]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d005      	beq.n	8009e40 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e34:	4b04      	ldr	r3, [pc, #16]	@ (8009e48 <HAL_PCD_SuspendCallback+0x30>)
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	4a03      	ldr	r2, [pc, #12]	@ (8009e48 <HAL_PCD_SuspendCallback+0x30>)
 8009e3a:	f043 0306 	orr.w	r3, r3, #6
 8009e3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e40:	bf00      	nop
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	e000ed00 	.word	0xe000ed00

08009e4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe ff01 	bl	8008c62 <USBD_LL_Resume>
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009e70:	4a28      	ldr	r2, [pc, #160]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a26      	ldr	r2, [pc, #152]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009e7c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009e80:	4b24      	ldr	r3, [pc, #144]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009e82:	4a25      	ldr	r2, [pc, #148]	@ (8009f18 <USBD_LL_Init+0xb0>)
 8009e84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009e86:	4b23      	ldr	r3, [pc, #140]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009e88:	2208      	movs	r2, #8
 8009e8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009e8c:	4b21      	ldr	r3, [pc, #132]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009e8e:	2202      	movs	r2, #2
 8009e90:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009e92:	4b20      	ldr	r3, [pc, #128]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009e98:	4b1e      	ldr	r3, [pc, #120]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009ea4:	481b      	ldr	r0, [pc, #108]	@ (8009f14 <USBD_LL_Init+0xac>)
 8009ea6:	f7f9 f82d 	bl	8002f04 <HAL_PCD_Init>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009eb0:	f7f8 fb74 	bl	800259c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009eba:	2318      	movs	r3, #24
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	f7fa fd3e 	bl	8004940 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009eca:	2358      	movs	r3, #88	@ 0x58
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2180      	movs	r1, #128	@ 0x80
 8009ed0:	f7fa fd36 	bl	8004940 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009eda:	23c0      	movs	r3, #192	@ 0xc0
 8009edc:	2200      	movs	r2, #0
 8009ede:	2181      	movs	r1, #129	@ 0x81
 8009ee0:	f7fa fd2e 	bl	8004940 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009eea:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	f7fa fd25 	bl	8004940 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009f00:	2200      	movs	r2, #0
 8009f02:	2182      	movs	r1, #130	@ 0x82
 8009f04:	f7fa fd1c 	bl	8004940 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	200010e8 	.word	0x200010e8
 8009f18:	40005c00 	.word	0x40005c00

08009f1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7f9 f8dc 	bl	80030f0 <HAL_PCD_Start>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f3c:	7bfb      	ldrb	r3, [r7, #15]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f94e 	bl	800a1e0 <USBD_Get_USB_Status>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b084      	sub	sp, #16
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	4608      	mov	r0, r1
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4603      	mov	r3, r0
 8009f62:	70fb      	strb	r3, [r7, #3]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70bb      	strb	r3, [r7, #2]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f7a:	78bb      	ldrb	r3, [r7, #2]
 8009f7c:	883a      	ldrh	r2, [r7, #0]
 8009f7e:	78f9      	ldrb	r1, [r7, #3]
 8009f80:	f7f9 fa30 	bl	80033e4 <HAL_PCD_EP_Open>
 8009f84:	4603      	mov	r3, r0
 8009f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f88:	7bfb      	ldrb	r3, [r7, #15]
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 f928 	bl	800a1e0 <USBD_Get_USB_Status>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b084      	sub	sp, #16
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f9 fa6e 	bl	800349e <HAL_PCD_EP_Close>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f000 f909 	bl	800a1e0 <USBD_Get_USB_Status>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f9 fb16 	bl	800362c <HAL_PCD_EP_SetStall>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f8ea 	bl	800a1e0 <USBD_Get_USB_Status>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a010:	7bbb      	ldrb	r3, [r7, #14]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b084      	sub	sp, #16
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	460b      	mov	r3, r1
 800a024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a034:	78fa      	ldrb	r2, [r7, #3]
 800a036:	4611      	mov	r1, r2
 800a038:	4618      	mov	r0, r3
 800a03a:	f7f9 fb57 	bl	80036ec <HAL_PCD_EP_ClrStall>
 800a03e:	4603      	mov	r3, r0
 800a040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a042:	7bfb      	ldrb	r3, [r7, #15]
 800a044:	4618      	mov	r0, r3
 800a046:	f000 f8cb 	bl	800a1e0 <USBD_Get_USB_Status>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a06a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a06c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a070:	2b00      	cmp	r3, #0
 800a072:	da0b      	bge.n	800a08c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	440b      	add	r3, r1
 800a086:	3312      	adds	r3, #18
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	e00b      	b.n	800a0a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a08c:	78fb      	ldrb	r3, [r7, #3]
 800a08e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a092:	68f9      	ldr	r1, [r7, #12]
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	440b      	add	r3, r1
 800a09e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800a0a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3714      	adds	r7, #20
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bc80      	pop	{r7}
 800a0ac:	4770      	bx	lr

0800a0ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a0c8:	78fa      	ldrb	r2, [r7, #3]
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7f9 f965 	bl	800339c <HAL_PCD_SetAddress>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 f881 	bl	800a1e0 <USBD_Get_USB_Status>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	607a      	str	r2, [r7, #4]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	72fb      	strb	r3, [r7, #11]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a10e:	893b      	ldrh	r3, [r7, #8]
 800a110:	7af9      	ldrb	r1, [r7, #11]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	f7f9 fa53 	bl	80035be <HAL_PCD_EP_Transmit>
 800a118:	4603      	mov	r3, r0
 800a11a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 f85e 	bl	800a1e0 <USBD_Get_USB_Status>
 800a124:	4603      	mov	r3, r0
 800a126:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a128:	7dbb      	ldrb	r3, [r7, #22]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b086      	sub	sp, #24
 800a136:	af00      	add	r7, sp, #0
 800a138:	60f8      	str	r0, [r7, #12]
 800a13a:	607a      	str	r2, [r7, #4]
 800a13c:	461a      	mov	r2, r3
 800a13e:	460b      	mov	r3, r1
 800a140:	72fb      	strb	r3, [r7, #11]
 800a142:	4613      	mov	r3, r2
 800a144:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a14a:	2300      	movs	r3, #0
 800a14c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a154:	893b      	ldrh	r3, [r7, #8]
 800a156:	7af9      	ldrb	r1, [r7, #11]
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	f7f9 f9e8 	bl	800352e <HAL_PCD_EP_Receive>
 800a15e:	4603      	mov	r3, r0
 800a160:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	4618      	mov	r0, r3
 800a166:	f000 f83b 	bl	800a1e0 <USBD_Get_USB_Status>
 800a16a:	4603      	mov	r3, r0
 800a16c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a16e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	460b      	mov	r3, r1
 800a182:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800a18a:	78fa      	ldrb	r2, [r7, #3]
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f7f9 f9fe 	bl	8003590 <HAL_PCD_EP_GetRxCount>
 800a194:	4603      	mov	r3, r0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3708      	adds	r7, #8
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1a8:	4b02      	ldr	r3, [pc, #8]	@ (800a1b4 <USBD_static_malloc+0x14>)
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bc80      	pop	{r7}
 800a1b2:	4770      	bx	lr
 800a1b4:	200013c0 	.word	0x200013c0

0800a1b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]

}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr

0800a1ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bc80      	pop	{r7}
 800a1de:	4770      	bx	lr

0800a1e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d817      	bhi.n	800a224 <USBD_Get_USB_Status+0x44>
 800a1f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a1fc <USBD_Get_USB_Status+0x1c>)
 800a1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fa:	bf00      	nop
 800a1fc:	0800a20d 	.word	0x0800a20d
 800a200:	0800a213 	.word	0x0800a213
 800a204:	0800a219 	.word	0x0800a219
 800a208:	0800a21f 	.word	0x0800a21f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
    break;
 800a210:	e00b      	b.n	800a22a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a212:	2302      	movs	r3, #2
 800a214:	73fb      	strb	r3, [r7, #15]
    break;
 800a216:	e008      	b.n	800a22a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a218:	2301      	movs	r3, #1
 800a21a:	73fb      	strb	r3, [r7, #15]
    break;
 800a21c:	e005      	b.n	800a22a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a21e:	2302      	movs	r3, #2
 800a220:	73fb      	strb	r3, [r7, #15]
    break;
 800a222:	e002      	b.n	800a22a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a224:	2302      	movs	r3, #2
 800a226:	73fb      	strb	r3, [r7, #15]
    break;
 800a228:	bf00      	nop
  }
  return usb_status;
 800a22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	bc80      	pop	{r7}
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop

0800a238 <_scanf_float>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	b087      	sub	sp, #28
 800a23e:	9303      	str	r3, [sp, #12]
 800a240:	688b      	ldr	r3, [r1, #8]
 800a242:	4691      	mov	r9, r2
 800a244:	1e5a      	subs	r2, r3, #1
 800a246:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a24a:	bf82      	ittt	hi
 800a24c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a250:	eb03 0b05 	addhi.w	fp, r3, r5
 800a254:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a258:	460a      	mov	r2, r1
 800a25a:	f04f 0500 	mov.w	r5, #0
 800a25e:	bf88      	it	hi
 800a260:	608b      	strhi	r3, [r1, #8]
 800a262:	680b      	ldr	r3, [r1, #0]
 800a264:	4680      	mov	r8, r0
 800a266:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a26a:	f842 3b1c 	str.w	r3, [r2], #28
 800a26e:	460c      	mov	r4, r1
 800a270:	bf98      	it	ls
 800a272:	f04f 0b00 	movls.w	fp, #0
 800a276:	4616      	mov	r6, r2
 800a278:	46aa      	mov	sl, r5
 800a27a:	462f      	mov	r7, r5
 800a27c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a280:	9201      	str	r2, [sp, #4]
 800a282:	9502      	str	r5, [sp, #8]
 800a284:	68a2      	ldr	r2, [r4, #8]
 800a286:	b15a      	cbz	r2, 800a2a0 <_scanf_float+0x68>
 800a288:	f8d9 3000 	ldr.w	r3, [r9]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b4e      	cmp	r3, #78	@ 0x4e
 800a290:	d862      	bhi.n	800a358 <_scanf_float+0x120>
 800a292:	2b40      	cmp	r3, #64	@ 0x40
 800a294:	d83a      	bhi.n	800a30c <_scanf_float+0xd4>
 800a296:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a29a:	b2c8      	uxtb	r0, r1
 800a29c:	280e      	cmp	r0, #14
 800a29e:	d938      	bls.n	800a312 <_scanf_float+0xda>
 800a2a0:	b11f      	cbz	r7, 800a2aa <_scanf_float+0x72>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2ae:	f1ba 0f01 	cmp.w	sl, #1
 800a2b2:	f200 8114 	bhi.w	800a4de <_scanf_float+0x2a6>
 800a2b6:	9b01      	ldr	r3, [sp, #4]
 800a2b8:	429e      	cmp	r6, r3
 800a2ba:	f200 8105 	bhi.w	800a4c8 <_scanf_float+0x290>
 800a2be:	2001      	movs	r0, #1
 800a2c0:	b007      	add	sp, #28
 800a2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a2ca:	2a0d      	cmp	r2, #13
 800a2cc:	d8e8      	bhi.n	800a2a0 <_scanf_float+0x68>
 800a2ce:	a101      	add	r1, pc, #4	@ (adr r1, 800a2d4 <_scanf_float+0x9c>)
 800a2d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a2d4:	0800a41d 	.word	0x0800a41d
 800a2d8:	0800a2a1 	.word	0x0800a2a1
 800a2dc:	0800a2a1 	.word	0x0800a2a1
 800a2e0:	0800a2a1 	.word	0x0800a2a1
 800a2e4:	0800a479 	.word	0x0800a479
 800a2e8:	0800a453 	.word	0x0800a453
 800a2ec:	0800a2a1 	.word	0x0800a2a1
 800a2f0:	0800a2a1 	.word	0x0800a2a1
 800a2f4:	0800a42b 	.word	0x0800a42b
 800a2f8:	0800a2a1 	.word	0x0800a2a1
 800a2fc:	0800a2a1 	.word	0x0800a2a1
 800a300:	0800a2a1 	.word	0x0800a2a1
 800a304:	0800a2a1 	.word	0x0800a2a1
 800a308:	0800a3e7 	.word	0x0800a3e7
 800a30c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a310:	e7db      	b.n	800a2ca <_scanf_float+0x92>
 800a312:	290e      	cmp	r1, #14
 800a314:	d8c4      	bhi.n	800a2a0 <_scanf_float+0x68>
 800a316:	a001      	add	r0, pc, #4	@ (adr r0, 800a31c <_scanf_float+0xe4>)
 800a318:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a31c:	0800a3d7 	.word	0x0800a3d7
 800a320:	0800a2a1 	.word	0x0800a2a1
 800a324:	0800a3d7 	.word	0x0800a3d7
 800a328:	0800a467 	.word	0x0800a467
 800a32c:	0800a2a1 	.word	0x0800a2a1
 800a330:	0800a379 	.word	0x0800a379
 800a334:	0800a3bd 	.word	0x0800a3bd
 800a338:	0800a3bd 	.word	0x0800a3bd
 800a33c:	0800a3bd 	.word	0x0800a3bd
 800a340:	0800a3bd 	.word	0x0800a3bd
 800a344:	0800a3bd 	.word	0x0800a3bd
 800a348:	0800a3bd 	.word	0x0800a3bd
 800a34c:	0800a3bd 	.word	0x0800a3bd
 800a350:	0800a3bd 	.word	0x0800a3bd
 800a354:	0800a3bd 	.word	0x0800a3bd
 800a358:	2b6e      	cmp	r3, #110	@ 0x6e
 800a35a:	d809      	bhi.n	800a370 <_scanf_float+0x138>
 800a35c:	2b60      	cmp	r3, #96	@ 0x60
 800a35e:	d8b2      	bhi.n	800a2c6 <_scanf_float+0x8e>
 800a360:	2b54      	cmp	r3, #84	@ 0x54
 800a362:	d07b      	beq.n	800a45c <_scanf_float+0x224>
 800a364:	2b59      	cmp	r3, #89	@ 0x59
 800a366:	d19b      	bne.n	800a2a0 <_scanf_float+0x68>
 800a368:	2d07      	cmp	r5, #7
 800a36a:	d199      	bne.n	800a2a0 <_scanf_float+0x68>
 800a36c:	2508      	movs	r5, #8
 800a36e:	e02f      	b.n	800a3d0 <_scanf_float+0x198>
 800a370:	2b74      	cmp	r3, #116	@ 0x74
 800a372:	d073      	beq.n	800a45c <_scanf_float+0x224>
 800a374:	2b79      	cmp	r3, #121	@ 0x79
 800a376:	e7f6      	b.n	800a366 <_scanf_float+0x12e>
 800a378:	6821      	ldr	r1, [r4, #0]
 800a37a:	05c8      	lsls	r0, r1, #23
 800a37c:	d51e      	bpl.n	800a3bc <_scanf_float+0x184>
 800a37e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a382:	6021      	str	r1, [r4, #0]
 800a384:	3701      	adds	r7, #1
 800a386:	f1bb 0f00 	cmp.w	fp, #0
 800a38a:	d003      	beq.n	800a394 <_scanf_float+0x15c>
 800a38c:	3201      	adds	r2, #1
 800a38e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a392:	60a2      	str	r2, [r4, #8]
 800a394:	68a3      	ldr	r3, [r4, #8]
 800a396:	3b01      	subs	r3, #1
 800a398:	60a3      	str	r3, [r4, #8]
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	3301      	adds	r3, #1
 800a39e:	6123      	str	r3, [r4, #16]
 800a3a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f8c9 3004 	str.w	r3, [r9, #4]
 800a3ac:	f340 8083 	ble.w	800a4b6 <_scanf_float+0x27e>
 800a3b0:	f8d9 3000 	ldr.w	r3, [r9]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	f8c9 3000 	str.w	r3, [r9]
 800a3ba:	e763      	b.n	800a284 <_scanf_float+0x4c>
 800a3bc:	eb1a 0105 	adds.w	r1, sl, r5
 800a3c0:	f47f af6e 	bne.w	800a2a0 <_scanf_float+0x68>
 800a3c4:	460d      	mov	r5, r1
 800a3c6:	468a      	mov	sl, r1
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a3ce:	6022      	str	r2, [r4, #0]
 800a3d0:	f806 3b01 	strb.w	r3, [r6], #1
 800a3d4:	e7de      	b.n	800a394 <_scanf_float+0x15c>
 800a3d6:	6822      	ldr	r2, [r4, #0]
 800a3d8:	0610      	lsls	r0, r2, #24
 800a3da:	f57f af61 	bpl.w	800a2a0 <_scanf_float+0x68>
 800a3de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3e2:	6022      	str	r2, [r4, #0]
 800a3e4:	e7f4      	b.n	800a3d0 <_scanf_float+0x198>
 800a3e6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ea:	d10c      	bne.n	800a406 <_scanf_float+0x1ce>
 800a3ec:	b977      	cbnz	r7, 800a40c <_scanf_float+0x1d4>
 800a3ee:	6822      	ldr	r2, [r4, #0]
 800a3f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a3f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a3f8:	d108      	bne.n	800a40c <_scanf_float+0x1d4>
 800a3fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a3fe:	f04f 0a01 	mov.w	sl, #1
 800a402:	6022      	str	r2, [r4, #0]
 800a404:	e7e4      	b.n	800a3d0 <_scanf_float+0x198>
 800a406:	f1ba 0f02 	cmp.w	sl, #2
 800a40a:	d051      	beq.n	800a4b0 <_scanf_float+0x278>
 800a40c:	2d01      	cmp	r5, #1
 800a40e:	d002      	beq.n	800a416 <_scanf_float+0x1de>
 800a410:	2d04      	cmp	r5, #4
 800a412:	f47f af45 	bne.w	800a2a0 <_scanf_float+0x68>
 800a416:	3501      	adds	r5, #1
 800a418:	b2ed      	uxtb	r5, r5
 800a41a:	e7d9      	b.n	800a3d0 <_scanf_float+0x198>
 800a41c:	f1ba 0f01 	cmp.w	sl, #1
 800a420:	f47f af3e 	bne.w	800a2a0 <_scanf_float+0x68>
 800a424:	f04f 0a02 	mov.w	sl, #2
 800a428:	e7d2      	b.n	800a3d0 <_scanf_float+0x198>
 800a42a:	b975      	cbnz	r5, 800a44a <_scanf_float+0x212>
 800a42c:	2f00      	cmp	r7, #0
 800a42e:	f47f af38 	bne.w	800a2a2 <_scanf_float+0x6a>
 800a432:	6822      	ldr	r2, [r4, #0]
 800a434:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a438:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a43c:	f040 80ff 	bne.w	800a63e <_scanf_float+0x406>
 800a440:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a444:	2501      	movs	r5, #1
 800a446:	6022      	str	r2, [r4, #0]
 800a448:	e7c2      	b.n	800a3d0 <_scanf_float+0x198>
 800a44a:	2d03      	cmp	r5, #3
 800a44c:	d0e3      	beq.n	800a416 <_scanf_float+0x1de>
 800a44e:	2d05      	cmp	r5, #5
 800a450:	e7df      	b.n	800a412 <_scanf_float+0x1da>
 800a452:	2d02      	cmp	r5, #2
 800a454:	f47f af24 	bne.w	800a2a0 <_scanf_float+0x68>
 800a458:	2503      	movs	r5, #3
 800a45a:	e7b9      	b.n	800a3d0 <_scanf_float+0x198>
 800a45c:	2d06      	cmp	r5, #6
 800a45e:	f47f af1f 	bne.w	800a2a0 <_scanf_float+0x68>
 800a462:	2507      	movs	r5, #7
 800a464:	e7b4      	b.n	800a3d0 <_scanf_float+0x198>
 800a466:	6822      	ldr	r2, [r4, #0]
 800a468:	0591      	lsls	r1, r2, #22
 800a46a:	f57f af19 	bpl.w	800a2a0 <_scanf_float+0x68>
 800a46e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a472:	6022      	str	r2, [r4, #0]
 800a474:	9702      	str	r7, [sp, #8]
 800a476:	e7ab      	b.n	800a3d0 <_scanf_float+0x198>
 800a478:	6822      	ldr	r2, [r4, #0]
 800a47a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a47e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a482:	d005      	beq.n	800a490 <_scanf_float+0x258>
 800a484:	0550      	lsls	r0, r2, #21
 800a486:	f57f af0b 	bpl.w	800a2a0 <_scanf_float+0x68>
 800a48a:	2f00      	cmp	r7, #0
 800a48c:	f000 80d7 	beq.w	800a63e <_scanf_float+0x406>
 800a490:	0591      	lsls	r1, r2, #22
 800a492:	bf58      	it	pl
 800a494:	9902      	ldrpl	r1, [sp, #8]
 800a496:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a49a:	bf58      	it	pl
 800a49c:	1a79      	subpl	r1, r7, r1
 800a49e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a4a2:	f04f 0700 	mov.w	r7, #0
 800a4a6:	bf58      	it	pl
 800a4a8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	e78f      	b.n	800a3d0 <_scanf_float+0x198>
 800a4b0:	f04f 0a03 	mov.w	sl, #3
 800a4b4:	e78c      	b.n	800a3d0 <_scanf_float+0x198>
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a4be:	4798      	blx	r3
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f43f aedf 	beq.w	800a284 <_scanf_float+0x4c>
 800a4c6:	e6eb      	b.n	800a2a0 <_scanf_float+0x68>
 800a4c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4cc:	464a      	mov	r2, r9
 800a4ce:	4640      	mov	r0, r8
 800a4d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4d4:	4798      	blx	r3
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	6123      	str	r3, [r4, #16]
 800a4dc:	e6eb      	b.n	800a2b6 <_scanf_float+0x7e>
 800a4de:	1e6b      	subs	r3, r5, #1
 800a4e0:	2b06      	cmp	r3, #6
 800a4e2:	d824      	bhi.n	800a52e <_scanf_float+0x2f6>
 800a4e4:	2d02      	cmp	r5, #2
 800a4e6:	d836      	bhi.n	800a556 <_scanf_float+0x31e>
 800a4e8:	9b01      	ldr	r3, [sp, #4]
 800a4ea:	429e      	cmp	r6, r3
 800a4ec:	f67f aee7 	bls.w	800a2be <_scanf_float+0x86>
 800a4f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a4f4:	464a      	mov	r2, r9
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4fc:	4798      	blx	r3
 800a4fe:	6923      	ldr	r3, [r4, #16]
 800a500:	3b01      	subs	r3, #1
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	e7f0      	b.n	800a4e8 <_scanf_float+0x2b0>
 800a506:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a50a:	464a      	mov	r2, r9
 800a50c:	4640      	mov	r0, r8
 800a50e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a512:	4798      	blx	r3
 800a514:	6923      	ldr	r3, [r4, #16]
 800a516:	3b01      	subs	r3, #1
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a51e:	fa5f fa8a 	uxtb.w	sl, sl
 800a522:	f1ba 0f02 	cmp.w	sl, #2
 800a526:	d1ee      	bne.n	800a506 <_scanf_float+0x2ce>
 800a528:	3d03      	subs	r5, #3
 800a52a:	b2ed      	uxtb	r5, r5
 800a52c:	1b76      	subs	r6, r6, r5
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	05da      	lsls	r2, r3, #23
 800a532:	d530      	bpl.n	800a596 <_scanf_float+0x35e>
 800a534:	055b      	lsls	r3, r3, #21
 800a536:	d511      	bpl.n	800a55c <_scanf_float+0x324>
 800a538:	9b01      	ldr	r3, [sp, #4]
 800a53a:	429e      	cmp	r6, r3
 800a53c:	f67f aebf 	bls.w	800a2be <_scanf_float+0x86>
 800a540:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a544:	464a      	mov	r2, r9
 800a546:	4640      	mov	r0, r8
 800a548:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a54c:	4798      	blx	r3
 800a54e:	6923      	ldr	r3, [r4, #16]
 800a550:	3b01      	subs	r3, #1
 800a552:	6123      	str	r3, [r4, #16]
 800a554:	e7f0      	b.n	800a538 <_scanf_float+0x300>
 800a556:	46aa      	mov	sl, r5
 800a558:	46b3      	mov	fp, r6
 800a55a:	e7de      	b.n	800a51a <_scanf_float+0x2e2>
 800a55c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a560:	6923      	ldr	r3, [r4, #16]
 800a562:	2965      	cmp	r1, #101	@ 0x65
 800a564:	f103 33ff 	add.w	r3, r3, #4294967295
 800a568:	f106 35ff 	add.w	r5, r6, #4294967295
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	d00c      	beq.n	800a58a <_scanf_float+0x352>
 800a570:	2945      	cmp	r1, #69	@ 0x45
 800a572:	d00a      	beq.n	800a58a <_scanf_float+0x352>
 800a574:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a578:	464a      	mov	r2, r9
 800a57a:	4640      	mov	r0, r8
 800a57c:	4798      	blx	r3
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a584:	3b01      	subs	r3, #1
 800a586:	1eb5      	subs	r5, r6, #2
 800a588:	6123      	str	r3, [r4, #16]
 800a58a:	464a      	mov	r2, r9
 800a58c:	4640      	mov	r0, r8
 800a58e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a592:	4798      	blx	r3
 800a594:	462e      	mov	r6, r5
 800a596:	6822      	ldr	r2, [r4, #0]
 800a598:	f012 0210 	ands.w	r2, r2, #16
 800a59c:	d001      	beq.n	800a5a2 <_scanf_float+0x36a>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e68e      	b.n	800a2c0 <_scanf_float+0x88>
 800a5a2:	7032      	strb	r2, [r6, #0]
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a5aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5ae:	d125      	bne.n	800a5fc <_scanf_float+0x3c4>
 800a5b0:	9b02      	ldr	r3, [sp, #8]
 800a5b2:	429f      	cmp	r7, r3
 800a5b4:	d00a      	beq.n	800a5cc <_scanf_float+0x394>
 800a5b6:	1bda      	subs	r2, r3, r7
 800a5b8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a5bc:	429e      	cmp	r6, r3
 800a5be:	bf28      	it	cs
 800a5c0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	491f      	ldr	r1, [pc, #124]	@ (800a644 <_scanf_float+0x40c>)
 800a5c8:	f000 f902 	bl	800a7d0 <siprintf>
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	9901      	ldr	r1, [sp, #4]
 800a5d2:	f001 f901 	bl	800b7d8 <_strtod_r>
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	6825      	ldr	r5, [r4, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f015 0f02 	tst.w	r5, #2
 800a5e0:	4606      	mov	r6, r0
 800a5e2:	460f      	mov	r7, r1
 800a5e4:	f103 0204 	add.w	r2, r3, #4
 800a5e8:	d015      	beq.n	800a616 <_scanf_float+0x3de>
 800a5ea:	9903      	ldr	r1, [sp, #12]
 800a5ec:	600a      	str	r2, [r1, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	e9c3 6700 	strd	r6, r7, [r3]
 800a5f4:	68e3      	ldr	r3, [r4, #12]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	60e3      	str	r3, [r4, #12]
 800a5fa:	e7d0      	b.n	800a59e <_scanf_float+0x366>
 800a5fc:	9b04      	ldr	r3, [sp, #16]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0e4      	beq.n	800a5cc <_scanf_float+0x394>
 800a602:	9905      	ldr	r1, [sp, #20]
 800a604:	230a      	movs	r3, #10
 800a606:	4640      	mov	r0, r8
 800a608:	3101      	adds	r1, #1
 800a60a:	f001 f965 	bl	800b8d8 <_strtol_r>
 800a60e:	9b04      	ldr	r3, [sp, #16]
 800a610:	9e05      	ldr	r6, [sp, #20]
 800a612:	1ac2      	subs	r2, r0, r3
 800a614:	e7d0      	b.n	800a5b8 <_scanf_float+0x380>
 800a616:	076d      	lsls	r5, r5, #29
 800a618:	d4e7      	bmi.n	800a5ea <_scanf_float+0x3b2>
 800a61a:	9d03      	ldr	r5, [sp, #12]
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	681d      	ldr	r5, [r3, #0]
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	f7f6 f9f2 	bl	8000a0c <__aeabi_dcmpun>
 800a628:	b120      	cbz	r0, 800a634 <_scanf_float+0x3fc>
 800a62a:	4807      	ldr	r0, [pc, #28]	@ (800a648 <_scanf_float+0x410>)
 800a62c:	f000 f9e0 	bl	800a9f0 <nanf>
 800a630:	6028      	str	r0, [r5, #0]
 800a632:	e7df      	b.n	800a5f4 <_scanf_float+0x3bc>
 800a634:	4630      	mov	r0, r6
 800a636:	4639      	mov	r1, r7
 800a638:	f7f6 fa46 	bl	8000ac8 <__aeabi_d2f>
 800a63c:	e7f8      	b.n	800a630 <_scanf_float+0x3f8>
 800a63e:	2700      	movs	r7, #0
 800a640:	e633      	b.n	800a2aa <_scanf_float+0x72>
 800a642:	bf00      	nop
 800a644:	0800e722 	.word	0x0800e722
 800a648:	0800e8a7 	.word	0x0800e8a7

0800a64c <std>:
 800a64c:	2300      	movs	r3, #0
 800a64e:	b510      	push	{r4, lr}
 800a650:	4604      	mov	r4, r0
 800a652:	e9c0 3300 	strd	r3, r3, [r0]
 800a656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a65a:	6083      	str	r3, [r0, #8]
 800a65c:	8181      	strh	r1, [r0, #12]
 800a65e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a660:	81c2      	strh	r2, [r0, #14]
 800a662:	6183      	str	r3, [r0, #24]
 800a664:	4619      	mov	r1, r3
 800a666:	2208      	movs	r2, #8
 800a668:	305c      	adds	r0, #92	@ 0x5c
 800a66a:	f000 f944 	bl	800a8f6 <memset>
 800a66e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <std+0x58>)
 800a670:	6224      	str	r4, [r4, #32]
 800a672:	6263      	str	r3, [r4, #36]	@ 0x24
 800a674:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a8 <std+0x5c>)
 800a676:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a678:	4b0c      	ldr	r3, [pc, #48]	@ (800a6ac <std+0x60>)
 800a67a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a67c:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b0 <std+0x64>)
 800a67e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a680:	4b0c      	ldr	r3, [pc, #48]	@ (800a6b4 <std+0x68>)
 800a682:	429c      	cmp	r4, r3
 800a684:	d006      	beq.n	800a694 <std+0x48>
 800a686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a68a:	4294      	cmp	r4, r2
 800a68c:	d002      	beq.n	800a694 <std+0x48>
 800a68e:	33d0      	adds	r3, #208	@ 0xd0
 800a690:	429c      	cmp	r4, r3
 800a692:	d105      	bne.n	800a6a0 <std+0x54>
 800a694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a69c:	f000 b9a4 	b.w	800a9e8 <__retarget_lock_init_recursive>
 800a6a0:	bd10      	pop	{r4, pc}
 800a6a2:	bf00      	nop
 800a6a4:	0800a86d 	.word	0x0800a86d
 800a6a8:	0800a893 	.word	0x0800a893
 800a6ac:	0800a8cb 	.word	0x0800a8cb
 800a6b0:	0800a8ef 	.word	0x0800a8ef
 800a6b4:	200015e0 	.word	0x200015e0

0800a6b8 <stdio_exit_handler>:
 800a6b8:	4a02      	ldr	r2, [pc, #8]	@ (800a6c4 <stdio_exit_handler+0xc>)
 800a6ba:	4903      	ldr	r1, [pc, #12]	@ (800a6c8 <stdio_exit_handler+0x10>)
 800a6bc:	4803      	ldr	r0, [pc, #12]	@ (800a6cc <stdio_exit_handler+0x14>)
 800a6be:	f000 b869 	b.w	800a794 <_fwalk_sglue>
 800a6c2:	bf00      	nop
 800a6c4:	2000018c 	.word	0x2000018c
 800a6c8:	0800c5e1 	.word	0x0800c5e1
 800a6cc:	2000019c 	.word	0x2000019c

0800a6d0 <cleanup_stdio>:
 800a6d0:	6841      	ldr	r1, [r0, #4]
 800a6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a704 <cleanup_stdio+0x34>)
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	4604      	mov	r4, r0
 800a6da:	d001      	beq.n	800a6e0 <cleanup_stdio+0x10>
 800a6dc:	f001 ff80 	bl	800c5e0 <_fflush_r>
 800a6e0:	68a1      	ldr	r1, [r4, #8]
 800a6e2:	4b09      	ldr	r3, [pc, #36]	@ (800a708 <cleanup_stdio+0x38>)
 800a6e4:	4299      	cmp	r1, r3
 800a6e6:	d002      	beq.n	800a6ee <cleanup_stdio+0x1e>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f001 ff79 	bl	800c5e0 <_fflush_r>
 800a6ee:	68e1      	ldr	r1, [r4, #12]
 800a6f0:	4b06      	ldr	r3, [pc, #24]	@ (800a70c <cleanup_stdio+0x3c>)
 800a6f2:	4299      	cmp	r1, r3
 800a6f4:	d004      	beq.n	800a700 <cleanup_stdio+0x30>
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6fc:	f001 bf70 	b.w	800c5e0 <_fflush_r>
 800a700:	bd10      	pop	{r4, pc}
 800a702:	bf00      	nop
 800a704:	200015e0 	.word	0x200015e0
 800a708:	20001648 	.word	0x20001648
 800a70c:	200016b0 	.word	0x200016b0

0800a710 <global_stdio_init.part.0>:
 800a710:	b510      	push	{r4, lr}
 800a712:	4b0b      	ldr	r3, [pc, #44]	@ (800a740 <global_stdio_init.part.0+0x30>)
 800a714:	4c0b      	ldr	r4, [pc, #44]	@ (800a744 <global_stdio_init.part.0+0x34>)
 800a716:	4a0c      	ldr	r2, [pc, #48]	@ (800a748 <global_stdio_init.part.0+0x38>)
 800a718:	4620      	mov	r0, r4
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	2104      	movs	r1, #4
 800a71e:	2200      	movs	r2, #0
 800a720:	f7ff ff94 	bl	800a64c <std>
 800a724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a728:	2201      	movs	r2, #1
 800a72a:	2109      	movs	r1, #9
 800a72c:	f7ff ff8e 	bl	800a64c <std>
 800a730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a734:	2202      	movs	r2, #2
 800a736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a73a:	2112      	movs	r1, #18
 800a73c:	f7ff bf86 	b.w	800a64c <std>
 800a740:	20001718 	.word	0x20001718
 800a744:	200015e0 	.word	0x200015e0
 800a748:	0800a6b9 	.word	0x0800a6b9

0800a74c <__sfp_lock_acquire>:
 800a74c:	4801      	ldr	r0, [pc, #4]	@ (800a754 <__sfp_lock_acquire+0x8>)
 800a74e:	f000 b94c 	b.w	800a9ea <__retarget_lock_acquire_recursive>
 800a752:	bf00      	nop
 800a754:	20001721 	.word	0x20001721

0800a758 <__sfp_lock_release>:
 800a758:	4801      	ldr	r0, [pc, #4]	@ (800a760 <__sfp_lock_release+0x8>)
 800a75a:	f000 b947 	b.w	800a9ec <__retarget_lock_release_recursive>
 800a75e:	bf00      	nop
 800a760:	20001721 	.word	0x20001721

0800a764 <__sinit>:
 800a764:	b510      	push	{r4, lr}
 800a766:	4604      	mov	r4, r0
 800a768:	f7ff fff0 	bl	800a74c <__sfp_lock_acquire>
 800a76c:	6a23      	ldr	r3, [r4, #32]
 800a76e:	b11b      	cbz	r3, 800a778 <__sinit+0x14>
 800a770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a774:	f7ff bff0 	b.w	800a758 <__sfp_lock_release>
 800a778:	4b04      	ldr	r3, [pc, #16]	@ (800a78c <__sinit+0x28>)
 800a77a:	6223      	str	r3, [r4, #32]
 800a77c:	4b04      	ldr	r3, [pc, #16]	@ (800a790 <__sinit+0x2c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d1f5      	bne.n	800a770 <__sinit+0xc>
 800a784:	f7ff ffc4 	bl	800a710 <global_stdio_init.part.0>
 800a788:	e7f2      	b.n	800a770 <__sinit+0xc>
 800a78a:	bf00      	nop
 800a78c:	0800a6d1 	.word	0x0800a6d1
 800a790:	20001718 	.word	0x20001718

0800a794 <_fwalk_sglue>:
 800a794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a798:	4607      	mov	r7, r0
 800a79a:	4688      	mov	r8, r1
 800a79c:	4614      	mov	r4, r2
 800a79e:	2600      	movs	r6, #0
 800a7a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7a4:	f1b9 0901 	subs.w	r9, r9, #1
 800a7a8:	d505      	bpl.n	800a7b6 <_fwalk_sglue+0x22>
 800a7aa:	6824      	ldr	r4, [r4, #0]
 800a7ac:	2c00      	cmp	r4, #0
 800a7ae:	d1f7      	bne.n	800a7a0 <_fwalk_sglue+0xc>
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b6:	89ab      	ldrh	r3, [r5, #12]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d907      	bls.n	800a7cc <_fwalk_sglue+0x38>
 800a7bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	d003      	beq.n	800a7cc <_fwalk_sglue+0x38>
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	4638      	mov	r0, r7
 800a7c8:	47c0      	blx	r8
 800a7ca:	4306      	orrs	r6, r0
 800a7cc:	3568      	adds	r5, #104	@ 0x68
 800a7ce:	e7e9      	b.n	800a7a4 <_fwalk_sglue+0x10>

0800a7d0 <siprintf>:
 800a7d0:	b40e      	push	{r1, r2, r3}
 800a7d2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7d6:	b510      	push	{r4, lr}
 800a7d8:	2400      	movs	r4, #0
 800a7da:	b09d      	sub	sp, #116	@ 0x74
 800a7dc:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a7de:	9002      	str	r0, [sp, #8]
 800a7e0:	9006      	str	r0, [sp, #24]
 800a7e2:	9107      	str	r1, [sp, #28]
 800a7e4:	9104      	str	r1, [sp, #16]
 800a7e6:	4809      	ldr	r0, [pc, #36]	@ (800a80c <siprintf+0x3c>)
 800a7e8:	4909      	ldr	r1, [pc, #36]	@ (800a810 <siprintf+0x40>)
 800a7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ee:	9105      	str	r1, [sp, #20]
 800a7f0:	6800      	ldr	r0, [r0, #0]
 800a7f2:	a902      	add	r1, sp, #8
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a7f8:	f001 f8cc 	bl	800b994 <_svfiprintf_r>
 800a7fc:	9b02      	ldr	r3, [sp, #8]
 800a7fe:	701c      	strb	r4, [r3, #0]
 800a800:	b01d      	add	sp, #116	@ 0x74
 800a802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a806:	b003      	add	sp, #12
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	20000198 	.word	0x20000198
 800a810:	ffff0208 	.word	0xffff0208

0800a814 <siscanf>:
 800a814:	b40e      	push	{r1, r2, r3}
 800a816:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a81a:	b570      	push	{r4, r5, r6, lr}
 800a81c:	2500      	movs	r5, #0
 800a81e:	b09d      	sub	sp, #116	@ 0x74
 800a820:	ac21      	add	r4, sp, #132	@ 0x84
 800a822:	f854 6b04 	ldr.w	r6, [r4], #4
 800a826:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a82a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a82c:	9002      	str	r0, [sp, #8]
 800a82e:	9006      	str	r0, [sp, #24]
 800a830:	f7f5 fc8e 	bl	8000150 <strlen>
 800a834:	4b0b      	ldr	r3, [pc, #44]	@ (800a864 <siscanf+0x50>)
 800a836:	9003      	str	r0, [sp, #12]
 800a838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a83a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a83e:	9007      	str	r0, [sp, #28]
 800a840:	4809      	ldr	r0, [pc, #36]	@ (800a868 <siscanf+0x54>)
 800a842:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a846:	4632      	mov	r2, r6
 800a848:	4623      	mov	r3, r4
 800a84a:	a902      	add	r1, sp, #8
 800a84c:	6800      	ldr	r0, [r0, #0]
 800a84e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a850:	9514      	str	r5, [sp, #80]	@ 0x50
 800a852:	9401      	str	r4, [sp, #4]
 800a854:	f001 f9f4 	bl	800bc40 <__ssvfiscanf_r>
 800a858:	b01d      	add	sp, #116	@ 0x74
 800a85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a85e:	b003      	add	sp, #12
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	0800a88f 	.word	0x0800a88f
 800a868:	20000198 	.word	0x20000198

0800a86c <__sread>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	460c      	mov	r4, r1
 800a870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a874:	f000 f86a 	bl	800a94c <_read_r>
 800a878:	2800      	cmp	r0, #0
 800a87a:	bfab      	itete	ge
 800a87c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a87e:	89a3      	ldrhlt	r3, [r4, #12]
 800a880:	181b      	addge	r3, r3, r0
 800a882:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a886:	bfac      	ite	ge
 800a888:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a88a:	81a3      	strhlt	r3, [r4, #12]
 800a88c:	bd10      	pop	{r4, pc}

0800a88e <__seofread>:
 800a88e:	2000      	movs	r0, #0
 800a890:	4770      	bx	lr

0800a892 <__swrite>:
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	461f      	mov	r7, r3
 800a898:	898b      	ldrh	r3, [r1, #12]
 800a89a:	4605      	mov	r5, r0
 800a89c:	05db      	lsls	r3, r3, #23
 800a89e:	460c      	mov	r4, r1
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	d505      	bpl.n	800a8b0 <__swrite+0x1e>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ac:	f000 f83c 	bl	800a928 <_lseek_r>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	4632      	mov	r2, r6
 800a8b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	463b      	mov	r3, r7
 800a8be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c6:	f000 b853 	b.w	800a970 <_write_r>

0800a8ca <__sseek>:
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d2:	f000 f829 	bl	800a928 <_lseek_r>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	bf15      	itete	ne
 800a8dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a8de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a8e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8e6:	81a3      	strheq	r3, [r4, #12]
 800a8e8:	bf18      	it	ne
 800a8ea:	81a3      	strhne	r3, [r4, #12]
 800a8ec:	bd10      	pop	{r4, pc}

0800a8ee <__sclose>:
 800a8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f2:	f000 b809 	b.w	800a908 <_close_r>

0800a8f6 <memset>:
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	4402      	add	r2, r0
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d100      	bne.n	800a900 <memset+0xa>
 800a8fe:	4770      	bx	lr
 800a900:	f803 1b01 	strb.w	r1, [r3], #1
 800a904:	e7f9      	b.n	800a8fa <memset+0x4>
	...

0800a908 <_close_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	2300      	movs	r3, #0
 800a90c:	4d05      	ldr	r5, [pc, #20]	@ (800a924 <_close_r+0x1c>)
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	f7f7 ff57 	bl	80027c6 <_close>
 800a918:	1c43      	adds	r3, r0, #1
 800a91a:	d102      	bne.n	800a922 <_close_r+0x1a>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	b103      	cbz	r3, 800a922 <_close_r+0x1a>
 800a920:	6023      	str	r3, [r4, #0]
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	2000171c 	.word	0x2000171c

0800a928 <_lseek_r>:
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	4611      	mov	r1, r2
 800a930:	2200      	movs	r2, #0
 800a932:	4d05      	ldr	r5, [pc, #20]	@ (800a948 <_lseek_r+0x20>)
 800a934:	602a      	str	r2, [r5, #0]
 800a936:	461a      	mov	r2, r3
 800a938:	f7f7 ff69 	bl	800280e <_lseek>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_lseek_r+0x1e>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_lseek_r+0x1e>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	2000171c 	.word	0x2000171c

0800a94c <_read_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	4611      	mov	r1, r2
 800a954:	2200      	movs	r2, #0
 800a956:	4d05      	ldr	r5, [pc, #20]	@ (800a96c <_read_r+0x20>)
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7f7 fefa 	bl	8002754 <_read>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_read_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_read_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	2000171c 	.word	0x2000171c

0800a970 <_write_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4604      	mov	r4, r0
 800a974:	4608      	mov	r0, r1
 800a976:	4611      	mov	r1, r2
 800a978:	2200      	movs	r2, #0
 800a97a:	4d05      	ldr	r5, [pc, #20]	@ (800a990 <_write_r+0x20>)
 800a97c:	602a      	str	r2, [r5, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	f7f7 ff05 	bl	800278e <_write>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d102      	bne.n	800a98e <_write_r+0x1e>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	b103      	cbz	r3, 800a98e <_write_r+0x1e>
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	2000171c 	.word	0x2000171c

0800a994 <__errno>:
 800a994:	4b01      	ldr	r3, [pc, #4]	@ (800a99c <__errno+0x8>)
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20000198 	.word	0x20000198

0800a9a0 <__libc_init_array>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	2600      	movs	r6, #0
 800a9a4:	4d0c      	ldr	r5, [pc, #48]	@ (800a9d8 <__libc_init_array+0x38>)
 800a9a6:	4c0d      	ldr	r4, [pc, #52]	@ (800a9dc <__libc_init_array+0x3c>)
 800a9a8:	1b64      	subs	r4, r4, r5
 800a9aa:	10a4      	asrs	r4, r4, #2
 800a9ac:	42a6      	cmp	r6, r4
 800a9ae:	d109      	bne.n	800a9c4 <__libc_init_array+0x24>
 800a9b0:	f003 fe56 	bl	800e660 <_init>
 800a9b4:	2600      	movs	r6, #0
 800a9b6:	4d0a      	ldr	r5, [pc, #40]	@ (800a9e0 <__libc_init_array+0x40>)
 800a9b8:	4c0a      	ldr	r4, [pc, #40]	@ (800a9e4 <__libc_init_array+0x44>)
 800a9ba:	1b64      	subs	r4, r4, r5
 800a9bc:	10a4      	asrs	r4, r4, #2
 800a9be:	42a6      	cmp	r6, r4
 800a9c0:	d105      	bne.n	800a9ce <__libc_init_array+0x2e>
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c8:	4798      	blx	r3
 800a9ca:	3601      	adds	r6, #1
 800a9cc:	e7ee      	b.n	800a9ac <__libc_init_array+0xc>
 800a9ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9d2:	4798      	blx	r3
 800a9d4:	3601      	adds	r6, #1
 800a9d6:	e7f2      	b.n	800a9be <__libc_init_array+0x1e>
 800a9d8:	0800eb10 	.word	0x0800eb10
 800a9dc:	0800eb10 	.word	0x0800eb10
 800a9e0:	0800eb10 	.word	0x0800eb10
 800a9e4:	0800eb14 	.word	0x0800eb14

0800a9e8 <__retarget_lock_init_recursive>:
 800a9e8:	4770      	bx	lr

0800a9ea <__retarget_lock_acquire_recursive>:
 800a9ea:	4770      	bx	lr

0800a9ec <__retarget_lock_release_recursive>:
 800a9ec:	4770      	bx	lr
	...

0800a9f0 <nanf>:
 800a9f0:	4800      	ldr	r0, [pc, #0]	@ (800a9f4 <nanf+0x4>)
 800a9f2:	4770      	bx	lr
 800a9f4:	7fc00000 	.word	0x7fc00000

0800a9f8 <_free_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	d040      	beq.n	800aa82 <_free_r+0x8a>
 800aa00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa04:	1f0c      	subs	r4, r1, #4
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	bfb8      	it	lt
 800aa0a:	18e4      	addlt	r4, r4, r3
 800aa0c:	f000 f8de 	bl	800abcc <__malloc_lock>
 800aa10:	4a1c      	ldr	r2, [pc, #112]	@ (800aa84 <_free_r+0x8c>)
 800aa12:	6813      	ldr	r3, [r2, #0]
 800aa14:	b933      	cbnz	r3, 800aa24 <_free_r+0x2c>
 800aa16:	6063      	str	r3, [r4, #4]
 800aa18:	6014      	str	r4, [r2, #0]
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa20:	f000 b8da 	b.w	800abd8 <__malloc_unlock>
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	d908      	bls.n	800aa3a <_free_r+0x42>
 800aa28:	6820      	ldr	r0, [r4, #0]
 800aa2a:	1821      	adds	r1, r4, r0
 800aa2c:	428b      	cmp	r3, r1
 800aa2e:	bf01      	itttt	eq
 800aa30:	6819      	ldreq	r1, [r3, #0]
 800aa32:	685b      	ldreq	r3, [r3, #4]
 800aa34:	1809      	addeq	r1, r1, r0
 800aa36:	6021      	streq	r1, [r4, #0]
 800aa38:	e7ed      	b.n	800aa16 <_free_r+0x1e>
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	b10b      	cbz	r3, 800aa44 <_free_r+0x4c>
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	d9fa      	bls.n	800aa3a <_free_r+0x42>
 800aa44:	6811      	ldr	r1, [r2, #0]
 800aa46:	1850      	adds	r0, r2, r1
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d10b      	bne.n	800aa64 <_free_r+0x6c>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	4401      	add	r1, r0
 800aa50:	1850      	adds	r0, r2, r1
 800aa52:	4283      	cmp	r3, r0
 800aa54:	6011      	str	r1, [r2, #0]
 800aa56:	d1e0      	bne.n	800aa1a <_free_r+0x22>
 800aa58:	6818      	ldr	r0, [r3, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4408      	add	r0, r1
 800aa5e:	6010      	str	r0, [r2, #0]
 800aa60:	6053      	str	r3, [r2, #4]
 800aa62:	e7da      	b.n	800aa1a <_free_r+0x22>
 800aa64:	d902      	bls.n	800aa6c <_free_r+0x74>
 800aa66:	230c      	movs	r3, #12
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	e7d6      	b.n	800aa1a <_free_r+0x22>
 800aa6c:	6820      	ldr	r0, [r4, #0]
 800aa6e:	1821      	adds	r1, r4, r0
 800aa70:	428b      	cmp	r3, r1
 800aa72:	bf01      	itttt	eq
 800aa74:	6819      	ldreq	r1, [r3, #0]
 800aa76:	685b      	ldreq	r3, [r3, #4]
 800aa78:	1809      	addeq	r1, r1, r0
 800aa7a:	6021      	streq	r1, [r4, #0]
 800aa7c:	6063      	str	r3, [r4, #4]
 800aa7e:	6054      	str	r4, [r2, #4]
 800aa80:	e7cb      	b.n	800aa1a <_free_r+0x22>
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	20001728 	.word	0x20001728

0800aa88 <sbrk_aligned>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	4e0f      	ldr	r6, [pc, #60]	@ (800aac8 <sbrk_aligned+0x40>)
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	6831      	ldr	r1, [r6, #0]
 800aa90:	4605      	mov	r5, r0
 800aa92:	b911      	cbnz	r1, 800aa9a <sbrk_aligned+0x12>
 800aa94:	f001 fe6a 	bl	800c76c <_sbrk_r>
 800aa98:	6030      	str	r0, [r6, #0]
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f001 fe65 	bl	800c76c <_sbrk_r>
 800aaa2:	1c43      	adds	r3, r0, #1
 800aaa4:	d103      	bne.n	800aaae <sbrk_aligned+0x26>
 800aaa6:	f04f 34ff 	mov.w	r4, #4294967295
 800aaaa:	4620      	mov	r0, r4
 800aaac:	bd70      	pop	{r4, r5, r6, pc}
 800aaae:	1cc4      	adds	r4, r0, #3
 800aab0:	f024 0403 	bic.w	r4, r4, #3
 800aab4:	42a0      	cmp	r0, r4
 800aab6:	d0f8      	beq.n	800aaaa <sbrk_aligned+0x22>
 800aab8:	1a21      	subs	r1, r4, r0
 800aaba:	4628      	mov	r0, r5
 800aabc:	f001 fe56 	bl	800c76c <_sbrk_r>
 800aac0:	3001      	adds	r0, #1
 800aac2:	d1f2      	bne.n	800aaaa <sbrk_aligned+0x22>
 800aac4:	e7ef      	b.n	800aaa6 <sbrk_aligned+0x1e>
 800aac6:	bf00      	nop
 800aac8:	20001724 	.word	0x20001724

0800aacc <_malloc_r>:
 800aacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad0:	1ccd      	adds	r5, r1, #3
 800aad2:	f025 0503 	bic.w	r5, r5, #3
 800aad6:	3508      	adds	r5, #8
 800aad8:	2d0c      	cmp	r5, #12
 800aada:	bf38      	it	cc
 800aadc:	250c      	movcc	r5, #12
 800aade:	2d00      	cmp	r5, #0
 800aae0:	4606      	mov	r6, r0
 800aae2:	db01      	blt.n	800aae8 <_malloc_r+0x1c>
 800aae4:	42a9      	cmp	r1, r5
 800aae6:	d904      	bls.n	800aaf2 <_malloc_r+0x26>
 800aae8:	230c      	movs	r3, #12
 800aaea:	6033      	str	r3, [r6, #0]
 800aaec:	2000      	movs	r0, #0
 800aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800abc8 <_malloc_r+0xfc>
 800aaf6:	f000 f869 	bl	800abcc <__malloc_lock>
 800aafa:	f8d8 3000 	ldr.w	r3, [r8]
 800aafe:	461c      	mov	r4, r3
 800ab00:	bb44      	cbnz	r4, 800ab54 <_malloc_r+0x88>
 800ab02:	4629      	mov	r1, r5
 800ab04:	4630      	mov	r0, r6
 800ab06:	f7ff ffbf 	bl	800aa88 <sbrk_aligned>
 800ab0a:	1c43      	adds	r3, r0, #1
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	d158      	bne.n	800abc2 <_malloc_r+0xf6>
 800ab10:	f8d8 4000 	ldr.w	r4, [r8]
 800ab14:	4627      	mov	r7, r4
 800ab16:	2f00      	cmp	r7, #0
 800ab18:	d143      	bne.n	800aba2 <_malloc_r+0xd6>
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d04b      	beq.n	800abb6 <_malloc_r+0xea>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	4639      	mov	r1, r7
 800ab22:	4630      	mov	r0, r6
 800ab24:	eb04 0903 	add.w	r9, r4, r3
 800ab28:	f001 fe20 	bl	800c76c <_sbrk_r>
 800ab2c:	4581      	cmp	r9, r0
 800ab2e:	d142      	bne.n	800abb6 <_malloc_r+0xea>
 800ab30:	6821      	ldr	r1, [r4, #0]
 800ab32:	4630      	mov	r0, r6
 800ab34:	1a6d      	subs	r5, r5, r1
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7ff ffa6 	bl	800aa88 <sbrk_aligned>
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d03a      	beq.n	800abb6 <_malloc_r+0xea>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	442b      	add	r3, r5
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	f8d8 3000 	ldr.w	r3, [r8]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	bb62      	cbnz	r2, 800aba8 <_malloc_r+0xdc>
 800ab4e:	f8c8 7000 	str.w	r7, [r8]
 800ab52:	e00f      	b.n	800ab74 <_malloc_r+0xa8>
 800ab54:	6822      	ldr	r2, [r4, #0]
 800ab56:	1b52      	subs	r2, r2, r5
 800ab58:	d420      	bmi.n	800ab9c <_malloc_r+0xd0>
 800ab5a:	2a0b      	cmp	r2, #11
 800ab5c:	d917      	bls.n	800ab8e <_malloc_r+0xc2>
 800ab5e:	1961      	adds	r1, r4, r5
 800ab60:	42a3      	cmp	r3, r4
 800ab62:	6025      	str	r5, [r4, #0]
 800ab64:	bf18      	it	ne
 800ab66:	6059      	strne	r1, [r3, #4]
 800ab68:	6863      	ldr	r3, [r4, #4]
 800ab6a:	bf08      	it	eq
 800ab6c:	f8c8 1000 	streq.w	r1, [r8]
 800ab70:	5162      	str	r2, [r4, r5]
 800ab72:	604b      	str	r3, [r1, #4]
 800ab74:	4630      	mov	r0, r6
 800ab76:	f000 f82f 	bl	800abd8 <__malloc_unlock>
 800ab7a:	f104 000b 	add.w	r0, r4, #11
 800ab7e:	1d23      	adds	r3, r4, #4
 800ab80:	f020 0007 	bic.w	r0, r0, #7
 800ab84:	1ac2      	subs	r2, r0, r3
 800ab86:	bf1c      	itt	ne
 800ab88:	1a1b      	subne	r3, r3, r0
 800ab8a:	50a3      	strne	r3, [r4, r2]
 800ab8c:	e7af      	b.n	800aaee <_malloc_r+0x22>
 800ab8e:	6862      	ldr	r2, [r4, #4]
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	bf0c      	ite	eq
 800ab94:	f8c8 2000 	streq.w	r2, [r8]
 800ab98:	605a      	strne	r2, [r3, #4]
 800ab9a:	e7eb      	b.n	800ab74 <_malloc_r+0xa8>
 800ab9c:	4623      	mov	r3, r4
 800ab9e:	6864      	ldr	r4, [r4, #4]
 800aba0:	e7ae      	b.n	800ab00 <_malloc_r+0x34>
 800aba2:	463c      	mov	r4, r7
 800aba4:	687f      	ldr	r7, [r7, #4]
 800aba6:	e7b6      	b.n	800ab16 <_malloc_r+0x4a>
 800aba8:	461a      	mov	r2, r3
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	42a3      	cmp	r3, r4
 800abae:	d1fb      	bne.n	800aba8 <_malloc_r+0xdc>
 800abb0:	2300      	movs	r3, #0
 800abb2:	6053      	str	r3, [r2, #4]
 800abb4:	e7de      	b.n	800ab74 <_malloc_r+0xa8>
 800abb6:	230c      	movs	r3, #12
 800abb8:	4630      	mov	r0, r6
 800abba:	6033      	str	r3, [r6, #0]
 800abbc:	f000 f80c 	bl	800abd8 <__malloc_unlock>
 800abc0:	e794      	b.n	800aaec <_malloc_r+0x20>
 800abc2:	6005      	str	r5, [r0, #0]
 800abc4:	e7d6      	b.n	800ab74 <_malloc_r+0xa8>
 800abc6:	bf00      	nop
 800abc8:	20001728 	.word	0x20001728

0800abcc <__malloc_lock>:
 800abcc:	4801      	ldr	r0, [pc, #4]	@ (800abd4 <__malloc_lock+0x8>)
 800abce:	f7ff bf0c 	b.w	800a9ea <__retarget_lock_acquire_recursive>
 800abd2:	bf00      	nop
 800abd4:	20001720 	.word	0x20001720

0800abd8 <__malloc_unlock>:
 800abd8:	4801      	ldr	r0, [pc, #4]	@ (800abe0 <__malloc_unlock+0x8>)
 800abda:	f7ff bf07 	b.w	800a9ec <__retarget_lock_release_recursive>
 800abde:	bf00      	nop
 800abe0:	20001720 	.word	0x20001720

0800abe4 <sulp>:
 800abe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe8:	460f      	mov	r7, r1
 800abea:	4690      	mov	r8, r2
 800abec:	f002 fca8 	bl	800d540 <__ulp>
 800abf0:	4604      	mov	r4, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	f1b8 0f00 	cmp.w	r8, #0
 800abf8:	d011      	beq.n	800ac1e <sulp+0x3a>
 800abfa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800abfe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	dd0b      	ble.n	800ac1e <sulp+0x3a>
 800ac06:	2400      	movs	r4, #0
 800ac08:	051b      	lsls	r3, r3, #20
 800ac0a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ac0e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ac12:	4622      	mov	r2, r4
 800ac14:	462b      	mov	r3, r5
 800ac16:	f7f5 fc5f 	bl	80004d8 <__aeabi_dmul>
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ac28 <_strtod_l>:
 800ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac2c:	b09f      	sub	sp, #124	@ 0x7c
 800ac2e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ac30:	2200      	movs	r2, #0
 800ac32:	460c      	mov	r4, r1
 800ac34:	921a      	str	r2, [sp, #104]	@ 0x68
 800ac36:	f04f 0a00 	mov.w	sl, #0
 800ac3a:	f04f 0b00 	mov.w	fp, #0
 800ac3e:	460a      	mov	r2, r1
 800ac40:	9005      	str	r0, [sp, #20]
 800ac42:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac44:	7811      	ldrb	r1, [r2, #0]
 800ac46:	292b      	cmp	r1, #43	@ 0x2b
 800ac48:	d048      	beq.n	800acdc <_strtod_l+0xb4>
 800ac4a:	d836      	bhi.n	800acba <_strtod_l+0x92>
 800ac4c:	290d      	cmp	r1, #13
 800ac4e:	d830      	bhi.n	800acb2 <_strtod_l+0x8a>
 800ac50:	2908      	cmp	r1, #8
 800ac52:	d830      	bhi.n	800acb6 <_strtod_l+0x8e>
 800ac54:	2900      	cmp	r1, #0
 800ac56:	d039      	beq.n	800accc <_strtod_l+0xa4>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac5c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ac5e:	782a      	ldrb	r2, [r5, #0]
 800ac60:	2a30      	cmp	r2, #48	@ 0x30
 800ac62:	f040 80b0 	bne.w	800adc6 <_strtod_l+0x19e>
 800ac66:	786a      	ldrb	r2, [r5, #1]
 800ac68:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac6c:	2a58      	cmp	r2, #88	@ 0x58
 800ac6e:	d16c      	bne.n	800ad4a <_strtod_l+0x122>
 800ac70:	9302      	str	r3, [sp, #8]
 800ac72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac74:	4a8f      	ldr	r2, [pc, #572]	@ (800aeb4 <_strtod_l+0x28c>)
 800ac76:	9301      	str	r3, [sp, #4]
 800ac78:	ab1a      	add	r3, sp, #104	@ 0x68
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	9805      	ldr	r0, [sp, #20]
 800ac7e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ac80:	a919      	add	r1, sp, #100	@ 0x64
 800ac82:	f001 fe0d 	bl	800c8a0 <__gethex>
 800ac86:	f010 060f 	ands.w	r6, r0, #15
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	d005      	beq.n	800ac9a <_strtod_l+0x72>
 800ac8e:	2e06      	cmp	r6, #6
 800ac90:	d126      	bne.n	800ace0 <_strtod_l+0xb8>
 800ac92:	2300      	movs	r3, #0
 800ac94:	3501      	adds	r5, #1
 800ac96:	9519      	str	r5, [sp, #100]	@ 0x64
 800ac98:	930e      	str	r3, [sp, #56]	@ 0x38
 800ac9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f040 8582 	bne.w	800b7a6 <_strtod_l+0xb7e>
 800aca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aca4:	b1bb      	cbz	r3, 800acd6 <_strtod_l+0xae>
 800aca6:	4650      	mov	r0, sl
 800aca8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800acac:	b01f      	add	sp, #124	@ 0x7c
 800acae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb2:	2920      	cmp	r1, #32
 800acb4:	d1d0      	bne.n	800ac58 <_strtod_l+0x30>
 800acb6:	3201      	adds	r2, #1
 800acb8:	e7c3      	b.n	800ac42 <_strtod_l+0x1a>
 800acba:	292d      	cmp	r1, #45	@ 0x2d
 800acbc:	d1cc      	bne.n	800ac58 <_strtod_l+0x30>
 800acbe:	2101      	movs	r1, #1
 800acc0:	910e      	str	r1, [sp, #56]	@ 0x38
 800acc2:	1c51      	adds	r1, r2, #1
 800acc4:	9119      	str	r1, [sp, #100]	@ 0x64
 800acc6:	7852      	ldrb	r2, [r2, #1]
 800acc8:	2a00      	cmp	r2, #0
 800acca:	d1c7      	bne.n	800ac5c <_strtod_l+0x34>
 800accc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800acce:	9419      	str	r4, [sp, #100]	@ 0x64
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f040 8566 	bne.w	800b7a2 <_strtod_l+0xb7a>
 800acd6:	4650      	mov	r0, sl
 800acd8:	4659      	mov	r1, fp
 800acda:	e7e7      	b.n	800acac <_strtod_l+0x84>
 800acdc:	2100      	movs	r1, #0
 800acde:	e7ef      	b.n	800acc0 <_strtod_l+0x98>
 800ace0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ace2:	b13a      	cbz	r2, 800acf4 <_strtod_l+0xcc>
 800ace4:	2135      	movs	r1, #53	@ 0x35
 800ace6:	a81c      	add	r0, sp, #112	@ 0x70
 800ace8:	f002 fd1a 	bl	800d720 <__copybits>
 800acec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800acee:	9805      	ldr	r0, [sp, #20]
 800acf0:	f002 f8fa 	bl	800cee8 <_Bfree>
 800acf4:	3e01      	subs	r6, #1
 800acf6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800acf8:	2e04      	cmp	r6, #4
 800acfa:	d806      	bhi.n	800ad0a <_strtod_l+0xe2>
 800acfc:	e8df f006 	tbb	[pc, r6]
 800ad00:	201d0314 	.word	0x201d0314
 800ad04:	14          	.byte	0x14
 800ad05:	00          	.byte	0x00
 800ad06:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ad0a:	05e1      	lsls	r1, r4, #23
 800ad0c:	bf48      	it	mi
 800ad0e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ad12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad16:	0d1b      	lsrs	r3, r3, #20
 800ad18:	051b      	lsls	r3, r3, #20
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1bd      	bne.n	800ac9a <_strtod_l+0x72>
 800ad1e:	f7ff fe39 	bl	800a994 <__errno>
 800ad22:	2322      	movs	r3, #34	@ 0x22
 800ad24:	6003      	str	r3, [r0, #0]
 800ad26:	e7b8      	b.n	800ac9a <_strtod_l+0x72>
 800ad28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ad2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ad30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ad34:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ad38:	e7e7      	b.n	800ad0a <_strtod_l+0xe2>
 800ad3a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800aeb8 <_strtod_l+0x290>
 800ad3e:	e7e4      	b.n	800ad0a <_strtod_l+0xe2>
 800ad40:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ad44:	f04f 3aff 	mov.w	sl, #4294967295
 800ad48:	e7df      	b.n	800ad0a <_strtod_l+0xe2>
 800ad4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad50:	785b      	ldrb	r3, [r3, #1]
 800ad52:	2b30      	cmp	r3, #48	@ 0x30
 800ad54:	d0f9      	beq.n	800ad4a <_strtod_l+0x122>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d09f      	beq.n	800ac9a <_strtod_l+0x72>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	2700      	movs	r7, #0
 800ad5e:	220a      	movs	r2, #10
 800ad60:	46b9      	mov	r9, r7
 800ad62:	9308      	str	r3, [sp, #32]
 800ad64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad66:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ad68:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad6a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ad6c:	7805      	ldrb	r5, [r0, #0]
 800ad6e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ad72:	b2d9      	uxtb	r1, r3
 800ad74:	2909      	cmp	r1, #9
 800ad76:	d928      	bls.n	800adca <_strtod_l+0x1a2>
 800ad78:	2201      	movs	r2, #1
 800ad7a:	4950      	ldr	r1, [pc, #320]	@ (800aebc <_strtod_l+0x294>)
 800ad7c:	f001 fce3 	bl	800c746 <strncmp>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d032      	beq.n	800adea <_strtod_l+0x1c2>
 800ad84:	2000      	movs	r0, #0
 800ad86:	462a      	mov	r2, r5
 800ad88:	4603      	mov	r3, r0
 800ad8a:	464d      	mov	r5, r9
 800ad8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad8e:	2a65      	cmp	r2, #101	@ 0x65
 800ad90:	d001      	beq.n	800ad96 <_strtod_l+0x16e>
 800ad92:	2a45      	cmp	r2, #69	@ 0x45
 800ad94:	d114      	bne.n	800adc0 <_strtod_l+0x198>
 800ad96:	b91d      	cbnz	r5, 800ada0 <_strtod_l+0x178>
 800ad98:	9a08      	ldr	r2, [sp, #32]
 800ad9a:	4302      	orrs	r2, r0
 800ad9c:	d096      	beq.n	800accc <_strtod_l+0xa4>
 800ad9e:	2500      	movs	r5, #0
 800ada0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ada2:	1c62      	adds	r2, r4, #1
 800ada4:	9219      	str	r2, [sp, #100]	@ 0x64
 800ada6:	7862      	ldrb	r2, [r4, #1]
 800ada8:	2a2b      	cmp	r2, #43	@ 0x2b
 800adaa:	d07a      	beq.n	800aea2 <_strtod_l+0x27a>
 800adac:	2a2d      	cmp	r2, #45	@ 0x2d
 800adae:	d07e      	beq.n	800aeae <_strtod_l+0x286>
 800adb0:	f04f 0c00 	mov.w	ip, #0
 800adb4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800adb8:	2909      	cmp	r1, #9
 800adba:	f240 8085 	bls.w	800aec8 <_strtod_l+0x2a0>
 800adbe:	9419      	str	r4, [sp, #100]	@ 0x64
 800adc0:	f04f 0800 	mov.w	r8, #0
 800adc4:	e0a5      	b.n	800af12 <_strtod_l+0x2ea>
 800adc6:	2300      	movs	r3, #0
 800adc8:	e7c8      	b.n	800ad5c <_strtod_l+0x134>
 800adca:	f1b9 0f08 	cmp.w	r9, #8
 800adce:	bfd8      	it	le
 800add0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800add2:	f100 0001 	add.w	r0, r0, #1
 800add6:	bfd6      	itet	le
 800add8:	fb02 3301 	mlale	r3, r2, r1, r3
 800addc:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ade0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ade2:	f109 0901 	add.w	r9, r9, #1
 800ade6:	9019      	str	r0, [sp, #100]	@ 0x64
 800ade8:	e7bf      	b.n	800ad6a <_strtod_l+0x142>
 800adea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	9219      	str	r2, [sp, #100]	@ 0x64
 800adf0:	785a      	ldrb	r2, [r3, #1]
 800adf2:	f1b9 0f00 	cmp.w	r9, #0
 800adf6:	d03b      	beq.n	800ae70 <_strtod_l+0x248>
 800adf8:	464d      	mov	r5, r9
 800adfa:	900a      	str	r0, [sp, #40]	@ 0x28
 800adfc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ae00:	2b09      	cmp	r3, #9
 800ae02:	d912      	bls.n	800ae2a <_strtod_l+0x202>
 800ae04:	2301      	movs	r3, #1
 800ae06:	e7c2      	b.n	800ad8e <_strtod_l+0x166>
 800ae08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae0a:	3001      	adds	r0, #1
 800ae0c:	1c5a      	adds	r2, r3, #1
 800ae0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae10:	785a      	ldrb	r2, [r3, #1]
 800ae12:	2a30      	cmp	r2, #48	@ 0x30
 800ae14:	d0f8      	beq.n	800ae08 <_strtod_l+0x1e0>
 800ae16:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ae1a:	2b08      	cmp	r3, #8
 800ae1c:	f200 84c8 	bhi.w	800b7b0 <_strtod_l+0xb88>
 800ae20:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae22:	2000      	movs	r0, #0
 800ae24:	4605      	mov	r5, r0
 800ae26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae28:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae2a:	3a30      	subs	r2, #48	@ 0x30
 800ae2c:	f100 0301 	add.w	r3, r0, #1
 800ae30:	d018      	beq.n	800ae64 <_strtod_l+0x23c>
 800ae32:	462e      	mov	r6, r5
 800ae34:	f04f 0e0a 	mov.w	lr, #10
 800ae38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ae3a:	4419      	add	r1, r3
 800ae3c:	910a      	str	r1, [sp, #40]	@ 0x28
 800ae3e:	1c71      	adds	r1, r6, #1
 800ae40:	eba1 0c05 	sub.w	ip, r1, r5
 800ae44:	4563      	cmp	r3, ip
 800ae46:	dc15      	bgt.n	800ae74 <_strtod_l+0x24c>
 800ae48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ae4c:	182b      	adds	r3, r5, r0
 800ae4e:	2b08      	cmp	r3, #8
 800ae50:	f105 0501 	add.w	r5, r5, #1
 800ae54:	4405      	add	r5, r0
 800ae56:	dc1a      	bgt.n	800ae8e <_strtod_l+0x266>
 800ae58:	230a      	movs	r3, #10
 800ae5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ae5c:	fb03 2301 	mla	r3, r3, r1, r2
 800ae60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae62:	2300      	movs	r3, #0
 800ae64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae66:	4618      	mov	r0, r3
 800ae68:	1c51      	adds	r1, r2, #1
 800ae6a:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae6c:	7852      	ldrb	r2, [r2, #1]
 800ae6e:	e7c5      	b.n	800adfc <_strtod_l+0x1d4>
 800ae70:	4648      	mov	r0, r9
 800ae72:	e7ce      	b.n	800ae12 <_strtod_l+0x1ea>
 800ae74:	2e08      	cmp	r6, #8
 800ae76:	dc05      	bgt.n	800ae84 <_strtod_l+0x25c>
 800ae78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ae7a:	fb0e f606 	mul.w	r6, lr, r6
 800ae7e:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ae80:	460e      	mov	r6, r1
 800ae82:	e7dc      	b.n	800ae3e <_strtod_l+0x216>
 800ae84:	2910      	cmp	r1, #16
 800ae86:	bfd8      	it	le
 800ae88:	fb0e f707 	mulle.w	r7, lr, r7
 800ae8c:	e7f8      	b.n	800ae80 <_strtod_l+0x258>
 800ae8e:	2b0f      	cmp	r3, #15
 800ae90:	bfdc      	itt	le
 800ae92:	230a      	movle	r3, #10
 800ae94:	fb03 2707 	mlale	r7, r3, r7, r2
 800ae98:	e7e3      	b.n	800ae62 <_strtod_l+0x23a>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e77a      	b.n	800ad98 <_strtod_l+0x170>
 800aea2:	f04f 0c00 	mov.w	ip, #0
 800aea6:	1ca2      	adds	r2, r4, #2
 800aea8:	9219      	str	r2, [sp, #100]	@ 0x64
 800aeaa:	78a2      	ldrb	r2, [r4, #2]
 800aeac:	e782      	b.n	800adb4 <_strtod_l+0x18c>
 800aeae:	f04f 0c01 	mov.w	ip, #1
 800aeb2:	e7f8      	b.n	800aea6 <_strtod_l+0x27e>
 800aeb4:	0800e8bc 	.word	0x0800e8bc
 800aeb8:	7ff00000 	.word	0x7ff00000
 800aebc:	0800e727 	.word	0x0800e727
 800aec0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aec2:	1c51      	adds	r1, r2, #1
 800aec4:	9119      	str	r1, [sp, #100]	@ 0x64
 800aec6:	7852      	ldrb	r2, [r2, #1]
 800aec8:	2a30      	cmp	r2, #48	@ 0x30
 800aeca:	d0f9      	beq.n	800aec0 <_strtod_l+0x298>
 800aecc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800aed0:	2908      	cmp	r1, #8
 800aed2:	f63f af75 	bhi.w	800adc0 <_strtod_l+0x198>
 800aed6:	f04f 080a 	mov.w	r8, #10
 800aeda:	3a30      	subs	r2, #48	@ 0x30
 800aedc:	9209      	str	r2, [sp, #36]	@ 0x24
 800aede:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aee0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800aee2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800aee4:	1c56      	adds	r6, r2, #1
 800aee6:	9619      	str	r6, [sp, #100]	@ 0x64
 800aee8:	7852      	ldrb	r2, [r2, #1]
 800aeea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800aeee:	f1be 0f09 	cmp.w	lr, #9
 800aef2:	d939      	bls.n	800af68 <_strtod_l+0x340>
 800aef4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aef6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800aefa:	1a76      	subs	r6, r6, r1
 800aefc:	2e08      	cmp	r6, #8
 800aefe:	dc03      	bgt.n	800af08 <_strtod_l+0x2e0>
 800af00:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af02:	4588      	cmp	r8, r1
 800af04:	bfa8      	it	ge
 800af06:	4688      	movge	r8, r1
 800af08:	f1bc 0f00 	cmp.w	ip, #0
 800af0c:	d001      	beq.n	800af12 <_strtod_l+0x2ea>
 800af0e:	f1c8 0800 	rsb	r8, r8, #0
 800af12:	2d00      	cmp	r5, #0
 800af14:	d14e      	bne.n	800afb4 <_strtod_l+0x38c>
 800af16:	9908      	ldr	r1, [sp, #32]
 800af18:	4308      	orrs	r0, r1
 800af1a:	f47f aebe 	bne.w	800ac9a <_strtod_l+0x72>
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f47f aed4 	bne.w	800accc <_strtod_l+0xa4>
 800af24:	2a69      	cmp	r2, #105	@ 0x69
 800af26:	d028      	beq.n	800af7a <_strtod_l+0x352>
 800af28:	dc25      	bgt.n	800af76 <_strtod_l+0x34e>
 800af2a:	2a49      	cmp	r2, #73	@ 0x49
 800af2c:	d025      	beq.n	800af7a <_strtod_l+0x352>
 800af2e:	2a4e      	cmp	r2, #78	@ 0x4e
 800af30:	f47f aecc 	bne.w	800accc <_strtod_l+0xa4>
 800af34:	4999      	ldr	r1, [pc, #612]	@ (800b19c <_strtod_l+0x574>)
 800af36:	a819      	add	r0, sp, #100	@ 0x64
 800af38:	f001 fed4 	bl	800cce4 <__match>
 800af3c:	2800      	cmp	r0, #0
 800af3e:	f43f aec5 	beq.w	800accc <_strtod_l+0xa4>
 800af42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b28      	cmp	r3, #40	@ 0x28
 800af48:	d12e      	bne.n	800afa8 <_strtod_l+0x380>
 800af4a:	4995      	ldr	r1, [pc, #596]	@ (800b1a0 <_strtod_l+0x578>)
 800af4c:	aa1c      	add	r2, sp, #112	@ 0x70
 800af4e:	a819      	add	r0, sp, #100	@ 0x64
 800af50:	f001 fedc 	bl	800cd0c <__hexnan>
 800af54:	2805      	cmp	r0, #5
 800af56:	d127      	bne.n	800afa8 <_strtod_l+0x380>
 800af58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800af5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800af5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800af62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800af66:	e698      	b.n	800ac9a <_strtod_l+0x72>
 800af68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af6a:	fb08 2101 	mla	r1, r8, r1, r2
 800af6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800af72:	9209      	str	r2, [sp, #36]	@ 0x24
 800af74:	e7b5      	b.n	800aee2 <_strtod_l+0x2ba>
 800af76:	2a6e      	cmp	r2, #110	@ 0x6e
 800af78:	e7da      	b.n	800af30 <_strtod_l+0x308>
 800af7a:	498a      	ldr	r1, [pc, #552]	@ (800b1a4 <_strtod_l+0x57c>)
 800af7c:	a819      	add	r0, sp, #100	@ 0x64
 800af7e:	f001 feb1 	bl	800cce4 <__match>
 800af82:	2800      	cmp	r0, #0
 800af84:	f43f aea2 	beq.w	800accc <_strtod_l+0xa4>
 800af88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af8a:	4987      	ldr	r1, [pc, #540]	@ (800b1a8 <_strtod_l+0x580>)
 800af8c:	3b01      	subs	r3, #1
 800af8e:	a819      	add	r0, sp, #100	@ 0x64
 800af90:	9319      	str	r3, [sp, #100]	@ 0x64
 800af92:	f001 fea7 	bl	800cce4 <__match>
 800af96:	b910      	cbnz	r0, 800af9e <_strtod_l+0x376>
 800af98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af9a:	3301      	adds	r3, #1
 800af9c:	9319      	str	r3, [sp, #100]	@ 0x64
 800af9e:	f04f 0a00 	mov.w	sl, #0
 800afa2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800b1ac <_strtod_l+0x584>
 800afa6:	e678      	b.n	800ac9a <_strtod_l+0x72>
 800afa8:	4881      	ldr	r0, [pc, #516]	@ (800b1b0 <_strtod_l+0x588>)
 800afaa:	f001 fc0b 	bl	800c7c4 <nan>
 800afae:	4682      	mov	sl, r0
 800afb0:	468b      	mov	fp, r1
 800afb2:	e672      	b.n	800ac9a <_strtod_l+0x72>
 800afb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afb6:	f1b9 0f00 	cmp.w	r9, #0
 800afba:	bf08      	it	eq
 800afbc:	46a9      	moveq	r9, r5
 800afbe:	eba8 0303 	sub.w	r3, r8, r3
 800afc2:	2d10      	cmp	r5, #16
 800afc4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800afc6:	462c      	mov	r4, r5
 800afc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800afca:	bfa8      	it	ge
 800afcc:	2410      	movge	r4, #16
 800afce:	f7f5 fa09 	bl	80003e4 <__aeabi_ui2d>
 800afd2:	2d09      	cmp	r5, #9
 800afd4:	4682      	mov	sl, r0
 800afd6:	468b      	mov	fp, r1
 800afd8:	dc11      	bgt.n	800affe <_strtod_l+0x3d6>
 800afda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f43f ae5c 	beq.w	800ac9a <_strtod_l+0x72>
 800afe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe4:	dd76      	ble.n	800b0d4 <_strtod_l+0x4ac>
 800afe6:	2b16      	cmp	r3, #22
 800afe8:	dc5d      	bgt.n	800b0a6 <_strtod_l+0x47e>
 800afea:	4972      	ldr	r1, [pc, #456]	@ (800b1b4 <_strtod_l+0x58c>)
 800afec:	4652      	mov	r2, sl
 800afee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aff2:	465b      	mov	r3, fp
 800aff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff8:	f7f5 fa6e 	bl	80004d8 <__aeabi_dmul>
 800affc:	e7d7      	b.n	800afae <_strtod_l+0x386>
 800affe:	4b6d      	ldr	r3, [pc, #436]	@ (800b1b4 <_strtod_l+0x58c>)
 800b000:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b004:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b008:	f7f5 fa66 	bl	80004d8 <__aeabi_dmul>
 800b00c:	4682      	mov	sl, r0
 800b00e:	4638      	mov	r0, r7
 800b010:	468b      	mov	fp, r1
 800b012:	f7f5 f9e7 	bl	80003e4 <__aeabi_ui2d>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4650      	mov	r0, sl
 800b01c:	4659      	mov	r1, fp
 800b01e:	f7f5 f8a5 	bl	800016c <__adddf3>
 800b022:	2d0f      	cmp	r5, #15
 800b024:	4682      	mov	sl, r0
 800b026:	468b      	mov	fp, r1
 800b028:	ddd7      	ble.n	800afda <_strtod_l+0x3b2>
 800b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02c:	1b2c      	subs	r4, r5, r4
 800b02e:	441c      	add	r4, r3
 800b030:	2c00      	cmp	r4, #0
 800b032:	f340 8093 	ble.w	800b15c <_strtod_l+0x534>
 800b036:	f014 030f 	ands.w	r3, r4, #15
 800b03a:	d00a      	beq.n	800b052 <_strtod_l+0x42a>
 800b03c:	495d      	ldr	r1, [pc, #372]	@ (800b1b4 <_strtod_l+0x58c>)
 800b03e:	4652      	mov	r2, sl
 800b040:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b044:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b048:	465b      	mov	r3, fp
 800b04a:	f7f5 fa45 	bl	80004d8 <__aeabi_dmul>
 800b04e:	4682      	mov	sl, r0
 800b050:	468b      	mov	fp, r1
 800b052:	f034 040f 	bics.w	r4, r4, #15
 800b056:	d073      	beq.n	800b140 <_strtod_l+0x518>
 800b058:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b05c:	dd49      	ble.n	800b0f2 <_strtod_l+0x4ca>
 800b05e:	2400      	movs	r4, #0
 800b060:	46a0      	mov	r8, r4
 800b062:	46a1      	mov	r9, r4
 800b064:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b066:	2322      	movs	r3, #34	@ 0x22
 800b068:	f04f 0a00 	mov.w	sl, #0
 800b06c:	9a05      	ldr	r2, [sp, #20]
 800b06e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800b1ac <_strtod_l+0x584>
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b076:	2b00      	cmp	r3, #0
 800b078:	f43f ae0f 	beq.w	800ac9a <_strtod_l+0x72>
 800b07c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b07e:	9805      	ldr	r0, [sp, #20]
 800b080:	f001 ff32 	bl	800cee8 <_Bfree>
 800b084:	4649      	mov	r1, r9
 800b086:	9805      	ldr	r0, [sp, #20]
 800b088:	f001 ff2e 	bl	800cee8 <_Bfree>
 800b08c:	4641      	mov	r1, r8
 800b08e:	9805      	ldr	r0, [sp, #20]
 800b090:	f001 ff2a 	bl	800cee8 <_Bfree>
 800b094:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b096:	9805      	ldr	r0, [sp, #20]
 800b098:	f001 ff26 	bl	800cee8 <_Bfree>
 800b09c:	4621      	mov	r1, r4
 800b09e:	9805      	ldr	r0, [sp, #20]
 800b0a0:	f001 ff22 	bl	800cee8 <_Bfree>
 800b0a4:	e5f9      	b.n	800ac9a <_strtod_l+0x72>
 800b0a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	dbbc      	blt.n	800b02a <_strtod_l+0x402>
 800b0b0:	4c40      	ldr	r4, [pc, #256]	@ (800b1b4 <_strtod_l+0x58c>)
 800b0b2:	f1c5 050f 	rsb	r5, r5, #15
 800b0b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b0ba:	4652      	mov	r2, sl
 800b0bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0c0:	465b      	mov	r3, fp
 800b0c2:	f7f5 fa09 	bl	80004d8 <__aeabi_dmul>
 800b0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c8:	1b5d      	subs	r5, r3, r5
 800b0ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b0ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0d2:	e791      	b.n	800aff8 <_strtod_l+0x3d0>
 800b0d4:	3316      	adds	r3, #22
 800b0d6:	dba8      	blt.n	800b02a <_strtod_l+0x402>
 800b0d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0da:	4650      	mov	r0, sl
 800b0dc:	eba3 0808 	sub.w	r8, r3, r8
 800b0e0:	4b34      	ldr	r3, [pc, #208]	@ (800b1b4 <_strtod_l+0x58c>)
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b0e8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b0ec:	f7f5 fb1e 	bl	800072c <__aeabi_ddiv>
 800b0f0:	e75d      	b.n	800afae <_strtod_l+0x386>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4650      	mov	r0, sl
 800b0f6:	4659      	mov	r1, fp
 800b0f8:	461e      	mov	r6, r3
 800b0fa:	4f2f      	ldr	r7, [pc, #188]	@ (800b1b8 <_strtod_l+0x590>)
 800b0fc:	1124      	asrs	r4, r4, #4
 800b0fe:	2c01      	cmp	r4, #1
 800b100:	dc21      	bgt.n	800b146 <_strtod_l+0x51e>
 800b102:	b10b      	cbz	r3, 800b108 <_strtod_l+0x4e0>
 800b104:	4682      	mov	sl, r0
 800b106:	468b      	mov	fp, r1
 800b108:	492b      	ldr	r1, [pc, #172]	@ (800b1b8 <_strtod_l+0x590>)
 800b10a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b10e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b112:	4652      	mov	r2, sl
 800b114:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b118:	465b      	mov	r3, fp
 800b11a:	f7f5 f9dd 	bl	80004d8 <__aeabi_dmul>
 800b11e:	4b23      	ldr	r3, [pc, #140]	@ (800b1ac <_strtod_l+0x584>)
 800b120:	460a      	mov	r2, r1
 800b122:	400b      	ands	r3, r1
 800b124:	4925      	ldr	r1, [pc, #148]	@ (800b1bc <_strtod_l+0x594>)
 800b126:	4682      	mov	sl, r0
 800b128:	428b      	cmp	r3, r1
 800b12a:	d898      	bhi.n	800b05e <_strtod_l+0x436>
 800b12c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b130:	428b      	cmp	r3, r1
 800b132:	bf86      	itte	hi
 800b134:	f04f 3aff 	movhi.w	sl, #4294967295
 800b138:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800b1c0 <_strtod_l+0x598>
 800b13c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b140:	2300      	movs	r3, #0
 800b142:	9308      	str	r3, [sp, #32]
 800b144:	e076      	b.n	800b234 <_strtod_l+0x60c>
 800b146:	07e2      	lsls	r2, r4, #31
 800b148:	d504      	bpl.n	800b154 <_strtod_l+0x52c>
 800b14a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14e:	f7f5 f9c3 	bl	80004d8 <__aeabi_dmul>
 800b152:	2301      	movs	r3, #1
 800b154:	3601      	adds	r6, #1
 800b156:	1064      	asrs	r4, r4, #1
 800b158:	3708      	adds	r7, #8
 800b15a:	e7d0      	b.n	800b0fe <_strtod_l+0x4d6>
 800b15c:	d0f0      	beq.n	800b140 <_strtod_l+0x518>
 800b15e:	4264      	negs	r4, r4
 800b160:	f014 020f 	ands.w	r2, r4, #15
 800b164:	d00a      	beq.n	800b17c <_strtod_l+0x554>
 800b166:	4b13      	ldr	r3, [pc, #76]	@ (800b1b4 <_strtod_l+0x58c>)
 800b168:	4650      	mov	r0, sl
 800b16a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b16e:	4659      	mov	r1, fp
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f7f5 fada 	bl	800072c <__aeabi_ddiv>
 800b178:	4682      	mov	sl, r0
 800b17a:	468b      	mov	fp, r1
 800b17c:	1124      	asrs	r4, r4, #4
 800b17e:	d0df      	beq.n	800b140 <_strtod_l+0x518>
 800b180:	2c1f      	cmp	r4, #31
 800b182:	dd1f      	ble.n	800b1c4 <_strtod_l+0x59c>
 800b184:	2400      	movs	r4, #0
 800b186:	46a0      	mov	r8, r4
 800b188:	46a1      	mov	r9, r4
 800b18a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b18c:	2322      	movs	r3, #34	@ 0x22
 800b18e:	9a05      	ldr	r2, [sp, #20]
 800b190:	f04f 0a00 	mov.w	sl, #0
 800b194:	f04f 0b00 	mov.w	fp, #0
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	e76b      	b.n	800b074 <_strtod_l+0x44c>
 800b19c:	0800e732 	.word	0x0800e732
 800b1a0:	0800e8a8 	.word	0x0800e8a8
 800b1a4:	0800e729 	.word	0x0800e729
 800b1a8:	0800e72c 	.word	0x0800e72c
 800b1ac:	7ff00000 	.word	0x7ff00000
 800b1b0:	0800e8a7 	.word	0x0800e8a7
 800b1b4:	0800ea30 	.word	0x0800ea30
 800b1b8:	0800ea08 	.word	0x0800ea08
 800b1bc:	7ca00000 	.word	0x7ca00000
 800b1c0:	7fefffff 	.word	0x7fefffff
 800b1c4:	f014 0310 	ands.w	r3, r4, #16
 800b1c8:	bf18      	it	ne
 800b1ca:	236a      	movne	r3, #106	@ 0x6a
 800b1cc:	4650      	mov	r0, sl
 800b1ce:	9308      	str	r3, [sp, #32]
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4e77      	ldr	r6, [pc, #476]	@ (800b3b4 <_strtod_l+0x78c>)
 800b1d6:	07e7      	lsls	r7, r4, #31
 800b1d8:	d504      	bpl.n	800b1e4 <_strtod_l+0x5bc>
 800b1da:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1de:	f7f5 f97b 	bl	80004d8 <__aeabi_dmul>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	1064      	asrs	r4, r4, #1
 800b1e6:	f106 0608 	add.w	r6, r6, #8
 800b1ea:	d1f4      	bne.n	800b1d6 <_strtod_l+0x5ae>
 800b1ec:	b10b      	cbz	r3, 800b1f2 <_strtod_l+0x5ca>
 800b1ee:	4682      	mov	sl, r0
 800b1f0:	468b      	mov	fp, r1
 800b1f2:	9b08      	ldr	r3, [sp, #32]
 800b1f4:	b1b3      	cbz	r3, 800b224 <_strtod_l+0x5fc>
 800b1f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b1fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	4659      	mov	r1, fp
 800b202:	dd0f      	ble.n	800b224 <_strtod_l+0x5fc>
 800b204:	2b1f      	cmp	r3, #31
 800b206:	dd58      	ble.n	800b2ba <_strtod_l+0x692>
 800b208:	2b34      	cmp	r3, #52	@ 0x34
 800b20a:	bfd8      	it	le
 800b20c:	f04f 33ff 	movle.w	r3, #4294967295
 800b210:	f04f 0a00 	mov.w	sl, #0
 800b214:	bfcf      	iteee	gt
 800b216:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b21a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b21e:	4093      	lslle	r3, r2
 800b220:	ea03 0b01 	andle.w	fp, r3, r1
 800b224:	2200      	movs	r2, #0
 800b226:	2300      	movs	r3, #0
 800b228:	4650      	mov	r0, sl
 800b22a:	4659      	mov	r1, fp
 800b22c:	f7f5 fbbc 	bl	80009a8 <__aeabi_dcmpeq>
 800b230:	2800      	cmp	r0, #0
 800b232:	d1a7      	bne.n	800b184 <_strtod_l+0x55c>
 800b234:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b236:	464a      	mov	r2, r9
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b23c:	462b      	mov	r3, r5
 800b23e:	9805      	ldr	r0, [sp, #20]
 800b240:	f001 feba 	bl	800cfb8 <__s2b>
 800b244:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b246:	2800      	cmp	r0, #0
 800b248:	f43f af09 	beq.w	800b05e <_strtod_l+0x436>
 800b24c:	2400      	movs	r4, #0
 800b24e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b252:	2a00      	cmp	r2, #0
 800b254:	eba3 0308 	sub.w	r3, r3, r8
 800b258:	bfa8      	it	ge
 800b25a:	2300      	movge	r3, #0
 800b25c:	46a0      	mov	r8, r4
 800b25e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b260:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b264:	9316      	str	r3, [sp, #88]	@ 0x58
 800b266:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b268:	9805      	ldr	r0, [sp, #20]
 800b26a:	6859      	ldr	r1, [r3, #4]
 800b26c:	f001 fdfc 	bl	800ce68 <_Balloc>
 800b270:	4681      	mov	r9, r0
 800b272:	2800      	cmp	r0, #0
 800b274:	f43f aef7 	beq.w	800b066 <_strtod_l+0x43e>
 800b278:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b27a:	300c      	adds	r0, #12
 800b27c:	691a      	ldr	r2, [r3, #16]
 800b27e:	f103 010c 	add.w	r1, r3, #12
 800b282:	3202      	adds	r2, #2
 800b284:	0092      	lsls	r2, r2, #2
 800b286:	f001 fa8f 	bl	800c7a8 <memcpy>
 800b28a:	ab1c      	add	r3, sp, #112	@ 0x70
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4652      	mov	r2, sl
 800b294:	465b      	mov	r3, fp
 800b296:	9805      	ldr	r0, [sp, #20]
 800b298:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b29c:	f002 f9b8 	bl	800d610 <__d2b>
 800b2a0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	f43f aedf 	beq.w	800b066 <_strtod_l+0x43e>
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	9805      	ldr	r0, [sp, #20]
 800b2ac:	f001 ff1a 	bl	800d0e4 <__i2b>
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	b948      	cbnz	r0, 800b2c8 <_strtod_l+0x6a0>
 800b2b4:	f04f 0800 	mov.w	r8, #0
 800b2b8:	e6d5      	b.n	800b066 <_strtod_l+0x43e>
 800b2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b2be:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c2:	ea03 0a0a 	and.w	sl, r3, sl
 800b2c6:	e7ad      	b.n	800b224 <_strtod_l+0x5fc>
 800b2c8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b2ca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b2cc:	2d00      	cmp	r5, #0
 800b2ce:	bfab      	itete	ge
 800b2d0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b2d2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b2d4:	18ef      	addge	r7, r5, r3
 800b2d6:	1b5e      	sublt	r6, r3, r5
 800b2d8:	9b08      	ldr	r3, [sp, #32]
 800b2da:	bfa8      	it	ge
 800b2dc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b2de:	eba5 0503 	sub.w	r5, r5, r3
 800b2e2:	4415      	add	r5, r2
 800b2e4:	4b34      	ldr	r3, [pc, #208]	@ (800b3b8 <_strtod_l+0x790>)
 800b2e6:	f105 35ff 	add.w	r5, r5, #4294967295
 800b2ea:	bfb8      	it	lt
 800b2ec:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b2ee:	429d      	cmp	r5, r3
 800b2f0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b2f4:	da50      	bge.n	800b398 <_strtod_l+0x770>
 800b2f6:	1b5b      	subs	r3, r3, r5
 800b2f8:	2b1f      	cmp	r3, #31
 800b2fa:	f04f 0101 	mov.w	r1, #1
 800b2fe:	eba2 0203 	sub.w	r2, r2, r3
 800b302:	dc3d      	bgt.n	800b380 <_strtod_l+0x758>
 800b304:	fa01 f303 	lsl.w	r3, r1, r3
 800b308:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b30a:	2300      	movs	r3, #0
 800b30c:	9310      	str	r3, [sp, #64]	@ 0x40
 800b30e:	18bd      	adds	r5, r7, r2
 800b310:	9b08      	ldr	r3, [sp, #32]
 800b312:	42af      	cmp	r7, r5
 800b314:	4416      	add	r6, r2
 800b316:	441e      	add	r6, r3
 800b318:	463b      	mov	r3, r7
 800b31a:	bfa8      	it	ge
 800b31c:	462b      	movge	r3, r5
 800b31e:	42b3      	cmp	r3, r6
 800b320:	bfa8      	it	ge
 800b322:	4633      	movge	r3, r6
 800b324:	2b00      	cmp	r3, #0
 800b326:	bfc2      	ittt	gt
 800b328:	1aed      	subgt	r5, r5, r3
 800b32a:	1af6      	subgt	r6, r6, r3
 800b32c:	1aff      	subgt	r7, r7, r3
 800b32e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b330:	2b00      	cmp	r3, #0
 800b332:	dd16      	ble.n	800b362 <_strtod_l+0x73a>
 800b334:	4641      	mov	r1, r8
 800b336:	461a      	mov	r2, r3
 800b338:	9805      	ldr	r0, [sp, #20]
 800b33a:	f001 ff8b 	bl	800d254 <__pow5mult>
 800b33e:	4680      	mov	r8, r0
 800b340:	2800      	cmp	r0, #0
 800b342:	d0b7      	beq.n	800b2b4 <_strtod_l+0x68c>
 800b344:	4601      	mov	r1, r0
 800b346:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b348:	9805      	ldr	r0, [sp, #20]
 800b34a:	f001 fee1 	bl	800d110 <__multiply>
 800b34e:	900a      	str	r0, [sp, #40]	@ 0x28
 800b350:	2800      	cmp	r0, #0
 800b352:	f43f ae88 	beq.w	800b066 <_strtod_l+0x43e>
 800b356:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b358:	9805      	ldr	r0, [sp, #20]
 800b35a:	f001 fdc5 	bl	800cee8 <_Bfree>
 800b35e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b360:	931a      	str	r3, [sp, #104]	@ 0x68
 800b362:	2d00      	cmp	r5, #0
 800b364:	dc1d      	bgt.n	800b3a2 <_strtod_l+0x77a>
 800b366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b368:	2b00      	cmp	r3, #0
 800b36a:	dd27      	ble.n	800b3bc <_strtod_l+0x794>
 800b36c:	4649      	mov	r1, r9
 800b36e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b370:	9805      	ldr	r0, [sp, #20]
 800b372:	f001 ff6f 	bl	800d254 <__pow5mult>
 800b376:	4681      	mov	r9, r0
 800b378:	bb00      	cbnz	r0, 800b3bc <_strtod_l+0x794>
 800b37a:	f04f 0900 	mov.w	r9, #0
 800b37e:	e672      	b.n	800b066 <_strtod_l+0x43e>
 800b380:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b384:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b388:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b38c:	35e2      	adds	r5, #226	@ 0xe2
 800b38e:	fa01 f305 	lsl.w	r3, r1, r5
 800b392:	9310      	str	r3, [sp, #64]	@ 0x40
 800b394:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b396:	e7ba      	b.n	800b30e <_strtod_l+0x6e6>
 800b398:	2300      	movs	r3, #0
 800b39a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b39c:	2301      	movs	r3, #1
 800b39e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3a0:	e7b5      	b.n	800b30e <_strtod_l+0x6e6>
 800b3a2:	462a      	mov	r2, r5
 800b3a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3a6:	9805      	ldr	r0, [sp, #20]
 800b3a8:	f001 ffae 	bl	800d308 <__lshift>
 800b3ac:	901a      	str	r0, [sp, #104]	@ 0x68
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d1d9      	bne.n	800b366 <_strtod_l+0x73e>
 800b3b2:	e658      	b.n	800b066 <_strtod_l+0x43e>
 800b3b4:	0800e8d0 	.word	0x0800e8d0
 800b3b8:	fffffc02 	.word	0xfffffc02
 800b3bc:	2e00      	cmp	r6, #0
 800b3be:	dd07      	ble.n	800b3d0 <_strtod_l+0x7a8>
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	4632      	mov	r2, r6
 800b3c4:	9805      	ldr	r0, [sp, #20]
 800b3c6:	f001 ff9f 	bl	800d308 <__lshift>
 800b3ca:	4681      	mov	r9, r0
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d0d4      	beq.n	800b37a <_strtod_l+0x752>
 800b3d0:	2f00      	cmp	r7, #0
 800b3d2:	dd08      	ble.n	800b3e6 <_strtod_l+0x7be>
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	463a      	mov	r2, r7
 800b3d8:	9805      	ldr	r0, [sp, #20]
 800b3da:	f001 ff95 	bl	800d308 <__lshift>
 800b3de:	4680      	mov	r8, r0
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f43f ae40 	beq.w	800b066 <_strtod_l+0x43e>
 800b3e6:	464a      	mov	r2, r9
 800b3e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b3ea:	9805      	ldr	r0, [sp, #20]
 800b3ec:	f002 f814 	bl	800d418 <__mdiff>
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	f43f ae37 	beq.w	800b066 <_strtod_l+0x43e>
 800b3f8:	68c3      	ldr	r3, [r0, #12]
 800b3fa:	4641      	mov	r1, r8
 800b3fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b3fe:	2300      	movs	r3, #0
 800b400:	60c3      	str	r3, [r0, #12]
 800b402:	f001 ffed 	bl	800d3e0 <__mcmp>
 800b406:	2800      	cmp	r0, #0
 800b408:	da3d      	bge.n	800b486 <_strtod_l+0x85e>
 800b40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b40c:	ea53 030a 	orrs.w	r3, r3, sl
 800b410:	d163      	bne.n	800b4da <_strtod_l+0x8b2>
 800b412:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b416:	2b00      	cmp	r3, #0
 800b418:	d15f      	bne.n	800b4da <_strtod_l+0x8b2>
 800b41a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b41e:	0d1b      	lsrs	r3, r3, #20
 800b420:	051b      	lsls	r3, r3, #20
 800b422:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b426:	d958      	bls.n	800b4da <_strtod_l+0x8b2>
 800b428:	6963      	ldr	r3, [r4, #20]
 800b42a:	b913      	cbnz	r3, 800b432 <_strtod_l+0x80a>
 800b42c:	6923      	ldr	r3, [r4, #16]
 800b42e:	2b01      	cmp	r3, #1
 800b430:	dd53      	ble.n	800b4da <_strtod_l+0x8b2>
 800b432:	4621      	mov	r1, r4
 800b434:	2201      	movs	r2, #1
 800b436:	9805      	ldr	r0, [sp, #20]
 800b438:	f001 ff66 	bl	800d308 <__lshift>
 800b43c:	4641      	mov	r1, r8
 800b43e:	4604      	mov	r4, r0
 800b440:	f001 ffce 	bl	800d3e0 <__mcmp>
 800b444:	2800      	cmp	r0, #0
 800b446:	dd48      	ble.n	800b4da <_strtod_l+0x8b2>
 800b448:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b44c:	9a08      	ldr	r2, [sp, #32]
 800b44e:	0d1b      	lsrs	r3, r3, #20
 800b450:	051b      	lsls	r3, r3, #20
 800b452:	2a00      	cmp	r2, #0
 800b454:	d062      	beq.n	800b51c <_strtod_l+0x8f4>
 800b456:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b45a:	d85f      	bhi.n	800b51c <_strtod_l+0x8f4>
 800b45c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b460:	f67f ae94 	bls.w	800b18c <_strtod_l+0x564>
 800b464:	4650      	mov	r0, sl
 800b466:	4659      	mov	r1, fp
 800b468:	4ba3      	ldr	r3, [pc, #652]	@ (800b6f8 <_strtod_l+0xad0>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	f7f5 f834 	bl	80004d8 <__aeabi_dmul>
 800b470:	4ba2      	ldr	r3, [pc, #648]	@ (800b6fc <_strtod_l+0xad4>)
 800b472:	4682      	mov	sl, r0
 800b474:	400b      	ands	r3, r1
 800b476:	468b      	mov	fp, r1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f47f adff 	bne.w	800b07c <_strtod_l+0x454>
 800b47e:	2322      	movs	r3, #34	@ 0x22
 800b480:	9a05      	ldr	r2, [sp, #20]
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	e5fa      	b.n	800b07c <_strtod_l+0x454>
 800b486:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b48a:	d165      	bne.n	800b558 <_strtod_l+0x930>
 800b48c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b48e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b492:	b35a      	cbz	r2, 800b4ec <_strtod_l+0x8c4>
 800b494:	4a9a      	ldr	r2, [pc, #616]	@ (800b700 <_strtod_l+0xad8>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d12b      	bne.n	800b4f2 <_strtod_l+0x8ca>
 800b49a:	9b08      	ldr	r3, [sp, #32]
 800b49c:	4651      	mov	r1, sl
 800b49e:	b303      	cbz	r3, 800b4e2 <_strtod_l+0x8ba>
 800b4a0:	465a      	mov	r2, fp
 800b4a2:	4b96      	ldr	r3, [pc, #600]	@ (800b6fc <_strtod_l+0xad4>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ae:	d81b      	bhi.n	800b4e8 <_strtod_l+0x8c0>
 800b4b0:	0d1b      	lsrs	r3, r3, #20
 800b4b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	d119      	bne.n	800b4f2 <_strtod_l+0x8ca>
 800b4be:	4b91      	ldr	r3, [pc, #580]	@ (800b704 <_strtod_l+0xadc>)
 800b4c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d102      	bne.n	800b4cc <_strtod_l+0x8a4>
 800b4c6:	3101      	adds	r1, #1
 800b4c8:	f43f adcd 	beq.w	800b066 <_strtod_l+0x43e>
 800b4cc:	f04f 0a00 	mov.w	sl, #0
 800b4d0:	4b8a      	ldr	r3, [pc, #552]	@ (800b6fc <_strtod_l+0xad4>)
 800b4d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4d4:	401a      	ands	r2, r3
 800b4d6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b4da:	9b08      	ldr	r3, [sp, #32]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d1c1      	bne.n	800b464 <_strtod_l+0x83c>
 800b4e0:	e5cc      	b.n	800b07c <_strtod_l+0x454>
 800b4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e6:	e7e8      	b.n	800b4ba <_strtod_l+0x892>
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	e7e6      	b.n	800b4ba <_strtod_l+0x892>
 800b4ec:	ea53 030a 	orrs.w	r3, r3, sl
 800b4f0:	d0aa      	beq.n	800b448 <_strtod_l+0x820>
 800b4f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4f4:	b1db      	cbz	r3, 800b52e <_strtod_l+0x906>
 800b4f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4f8:	4213      	tst	r3, r2
 800b4fa:	d0ee      	beq.n	800b4da <_strtod_l+0x8b2>
 800b4fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4fe:	4650      	mov	r0, sl
 800b500:	4659      	mov	r1, fp
 800b502:	9a08      	ldr	r2, [sp, #32]
 800b504:	b1bb      	cbz	r3, 800b536 <_strtod_l+0x90e>
 800b506:	f7ff fb6d 	bl	800abe4 <sulp>
 800b50a:	4602      	mov	r2, r0
 800b50c:	460b      	mov	r3, r1
 800b50e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b512:	f7f4 fe2b 	bl	800016c <__adddf3>
 800b516:	4682      	mov	sl, r0
 800b518:	468b      	mov	fp, r1
 800b51a:	e7de      	b.n	800b4da <_strtod_l+0x8b2>
 800b51c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b520:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b524:	f04f 3aff 	mov.w	sl, #4294967295
 800b528:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b52c:	e7d5      	b.n	800b4da <_strtod_l+0x8b2>
 800b52e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b530:	ea13 0f0a 	tst.w	r3, sl
 800b534:	e7e1      	b.n	800b4fa <_strtod_l+0x8d2>
 800b536:	f7ff fb55 	bl	800abe4 <sulp>
 800b53a:	4602      	mov	r2, r0
 800b53c:	460b      	mov	r3, r1
 800b53e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b542:	f7f4 fe11 	bl	8000168 <__aeabi_dsub>
 800b546:	2200      	movs	r2, #0
 800b548:	2300      	movs	r3, #0
 800b54a:	4682      	mov	sl, r0
 800b54c:	468b      	mov	fp, r1
 800b54e:	f7f5 fa2b 	bl	80009a8 <__aeabi_dcmpeq>
 800b552:	2800      	cmp	r0, #0
 800b554:	d0c1      	beq.n	800b4da <_strtod_l+0x8b2>
 800b556:	e619      	b.n	800b18c <_strtod_l+0x564>
 800b558:	4641      	mov	r1, r8
 800b55a:	4620      	mov	r0, r4
 800b55c:	f002 f8b0 	bl	800d6c0 <__ratio>
 800b560:	2200      	movs	r2, #0
 800b562:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b566:	4606      	mov	r6, r0
 800b568:	460f      	mov	r7, r1
 800b56a:	f7f5 fa31 	bl	80009d0 <__aeabi_dcmple>
 800b56e:	2800      	cmp	r0, #0
 800b570:	d06d      	beq.n	800b64e <_strtod_l+0xa26>
 800b572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b574:	2b00      	cmp	r3, #0
 800b576:	d178      	bne.n	800b66a <_strtod_l+0xa42>
 800b578:	f1ba 0f00 	cmp.w	sl, #0
 800b57c:	d156      	bne.n	800b62c <_strtod_l+0xa04>
 800b57e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b580:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b584:	2b00      	cmp	r3, #0
 800b586:	d158      	bne.n	800b63a <_strtod_l+0xa12>
 800b588:	2200      	movs	r2, #0
 800b58a:	4630      	mov	r0, r6
 800b58c:	4639      	mov	r1, r7
 800b58e:	4b5e      	ldr	r3, [pc, #376]	@ (800b708 <_strtod_l+0xae0>)
 800b590:	f7f5 fa14 	bl	80009bc <__aeabi_dcmplt>
 800b594:	2800      	cmp	r0, #0
 800b596:	d157      	bne.n	800b648 <_strtod_l+0xa20>
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	2200      	movs	r2, #0
 800b59e:	4b5b      	ldr	r3, [pc, #364]	@ (800b70c <_strtod_l+0xae4>)
 800b5a0:	f7f4 ff9a 	bl	80004d8 <__aeabi_dmul>
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	460f      	mov	r7, r1
 800b5a8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b5ac:	9606      	str	r6, [sp, #24]
 800b5ae:	9307      	str	r3, [sp, #28]
 800b5b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5b4:	4d51      	ldr	r5, [pc, #324]	@ (800b6fc <_strtod_l+0xad4>)
 800b5b6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5bc:	401d      	ands	r5, r3
 800b5be:	4b54      	ldr	r3, [pc, #336]	@ (800b710 <_strtod_l+0xae8>)
 800b5c0:	429d      	cmp	r5, r3
 800b5c2:	f040 80ab 	bne.w	800b71c <_strtod_l+0xaf4>
 800b5c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5c8:	4650      	mov	r0, sl
 800b5ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b5ce:	4659      	mov	r1, fp
 800b5d0:	f001 ffb6 	bl	800d540 <__ulp>
 800b5d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5d8:	f7f4 ff7e 	bl	80004d8 <__aeabi_dmul>
 800b5dc:	4652      	mov	r2, sl
 800b5de:	465b      	mov	r3, fp
 800b5e0:	f7f4 fdc4 	bl	800016c <__adddf3>
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	4945      	ldr	r1, [pc, #276]	@ (800b6fc <_strtod_l+0xad4>)
 800b5e8:	4a4a      	ldr	r2, [pc, #296]	@ (800b714 <_strtod_l+0xaec>)
 800b5ea:	4019      	ands	r1, r3
 800b5ec:	4291      	cmp	r1, r2
 800b5ee:	4682      	mov	sl, r0
 800b5f0:	d942      	bls.n	800b678 <_strtod_l+0xa50>
 800b5f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b5f4:	4b43      	ldr	r3, [pc, #268]	@ (800b704 <_strtod_l+0xadc>)
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d103      	bne.n	800b602 <_strtod_l+0x9da>
 800b5fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	f43f ad32 	beq.w	800b066 <_strtod_l+0x43e>
 800b602:	f04f 3aff 	mov.w	sl, #4294967295
 800b606:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800b704 <_strtod_l+0xadc>
 800b60a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b60c:	9805      	ldr	r0, [sp, #20]
 800b60e:	f001 fc6b 	bl	800cee8 <_Bfree>
 800b612:	4649      	mov	r1, r9
 800b614:	9805      	ldr	r0, [sp, #20]
 800b616:	f001 fc67 	bl	800cee8 <_Bfree>
 800b61a:	4641      	mov	r1, r8
 800b61c:	9805      	ldr	r0, [sp, #20]
 800b61e:	f001 fc63 	bl	800cee8 <_Bfree>
 800b622:	4621      	mov	r1, r4
 800b624:	9805      	ldr	r0, [sp, #20]
 800b626:	f001 fc5f 	bl	800cee8 <_Bfree>
 800b62a:	e61c      	b.n	800b266 <_strtod_l+0x63e>
 800b62c:	f1ba 0f01 	cmp.w	sl, #1
 800b630:	d103      	bne.n	800b63a <_strtod_l+0xa12>
 800b632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b634:	2b00      	cmp	r3, #0
 800b636:	f43f ada9 	beq.w	800b18c <_strtod_l+0x564>
 800b63a:	2200      	movs	r2, #0
 800b63c:	4b36      	ldr	r3, [pc, #216]	@ (800b718 <_strtod_l+0xaf0>)
 800b63e:	2600      	movs	r6, #0
 800b640:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b644:	4f30      	ldr	r7, [pc, #192]	@ (800b708 <_strtod_l+0xae0>)
 800b646:	e7b3      	b.n	800b5b0 <_strtod_l+0x988>
 800b648:	2600      	movs	r6, #0
 800b64a:	4f30      	ldr	r7, [pc, #192]	@ (800b70c <_strtod_l+0xae4>)
 800b64c:	e7ac      	b.n	800b5a8 <_strtod_l+0x980>
 800b64e:	4630      	mov	r0, r6
 800b650:	4639      	mov	r1, r7
 800b652:	4b2e      	ldr	r3, [pc, #184]	@ (800b70c <_strtod_l+0xae4>)
 800b654:	2200      	movs	r2, #0
 800b656:	f7f4 ff3f 	bl	80004d8 <__aeabi_dmul>
 800b65a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0a1      	beq.n	800b5a8 <_strtod_l+0x980>
 800b664:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b668:	e7a2      	b.n	800b5b0 <_strtod_l+0x988>
 800b66a:	2200      	movs	r2, #0
 800b66c:	4b26      	ldr	r3, [pc, #152]	@ (800b708 <_strtod_l+0xae0>)
 800b66e:	4616      	mov	r6, r2
 800b670:	461f      	mov	r7, r3
 800b672:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b676:	e79b      	b.n	800b5b0 <_strtod_l+0x988>
 800b678:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b67c:	9b08      	ldr	r3, [sp, #32]
 800b67e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1c1      	bne.n	800b60a <_strtod_l+0x9e2>
 800b686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b68a:	0d1b      	lsrs	r3, r3, #20
 800b68c:	051b      	lsls	r3, r3, #20
 800b68e:	429d      	cmp	r5, r3
 800b690:	d1bb      	bne.n	800b60a <_strtod_l+0x9e2>
 800b692:	4630      	mov	r0, r6
 800b694:	4639      	mov	r1, r7
 800b696:	f7f5 fd61 	bl	800115c <__aeabi_d2lz>
 800b69a:	f7f4 feef 	bl	800047c <__aeabi_l2d>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f4 fd5f 	bl	8000168 <__aeabi_dsub>
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b6b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b6b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6b8:	ea46 060a 	orr.w	r6, r6, sl
 800b6bc:	431e      	orrs	r6, r3
 800b6be:	d06a      	beq.n	800b796 <_strtod_l+0xb6e>
 800b6c0:	a309      	add	r3, pc, #36	@ (adr r3, 800b6e8 <_strtod_l+0xac0>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f7f5 f979 	bl	80009bc <__aeabi_dcmplt>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	f47f acd6 	bne.w	800b07c <_strtod_l+0x454>
 800b6d0:	a307      	add	r3, pc, #28	@ (adr r3, 800b6f0 <_strtod_l+0xac8>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6da:	f7f5 f98d 	bl	80009f8 <__aeabi_dcmpgt>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d093      	beq.n	800b60a <_strtod_l+0x9e2>
 800b6e2:	e4cb      	b.n	800b07c <_strtod_l+0x454>
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	94a03595 	.word	0x94a03595
 800b6ec:	3fdfffff 	.word	0x3fdfffff
 800b6f0:	35afe535 	.word	0x35afe535
 800b6f4:	3fe00000 	.word	0x3fe00000
 800b6f8:	39500000 	.word	0x39500000
 800b6fc:	7ff00000 	.word	0x7ff00000
 800b700:	000fffff 	.word	0x000fffff
 800b704:	7fefffff 	.word	0x7fefffff
 800b708:	3ff00000 	.word	0x3ff00000
 800b70c:	3fe00000 	.word	0x3fe00000
 800b710:	7fe00000 	.word	0x7fe00000
 800b714:	7c9fffff 	.word	0x7c9fffff
 800b718:	bff00000 	.word	0xbff00000
 800b71c:	9b08      	ldr	r3, [sp, #32]
 800b71e:	b323      	cbz	r3, 800b76a <_strtod_l+0xb42>
 800b720:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b724:	d821      	bhi.n	800b76a <_strtod_l+0xb42>
 800b726:	a328      	add	r3, pc, #160	@ (adr r3, 800b7c8 <_strtod_l+0xba0>)
 800b728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f5 f94e 	bl	80009d0 <__aeabi_dcmple>
 800b734:	b1a0      	cbz	r0, 800b760 <_strtod_l+0xb38>
 800b736:	4639      	mov	r1, r7
 800b738:	4630      	mov	r0, r6
 800b73a:	f7f5 f9a5 	bl	8000a88 <__aeabi_d2uiz>
 800b73e:	2801      	cmp	r0, #1
 800b740:	bf38      	it	cc
 800b742:	2001      	movcc	r0, #1
 800b744:	f7f4 fe4e 	bl	80003e4 <__aeabi_ui2d>
 800b748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b74a:	4606      	mov	r6, r0
 800b74c:	460f      	mov	r7, r1
 800b74e:	b9fb      	cbnz	r3, 800b790 <_strtod_l+0xb68>
 800b750:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b754:	9014      	str	r0, [sp, #80]	@ 0x50
 800b756:	9315      	str	r3, [sp, #84]	@ 0x54
 800b758:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b75c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b760:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b762:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b766:	1b5b      	subs	r3, r3, r5
 800b768:	9311      	str	r3, [sp, #68]	@ 0x44
 800b76a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b76e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b772:	f001 fee5 	bl	800d540 <__ulp>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4650      	mov	r0, sl
 800b77c:	4659      	mov	r1, fp
 800b77e:	f7f4 feab 	bl	80004d8 <__aeabi_dmul>
 800b782:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b786:	f7f4 fcf1 	bl	800016c <__adddf3>
 800b78a:	4682      	mov	sl, r0
 800b78c:	468b      	mov	fp, r1
 800b78e:	e775      	b.n	800b67c <_strtod_l+0xa54>
 800b790:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b794:	e7e0      	b.n	800b758 <_strtod_l+0xb30>
 800b796:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7d0 <_strtod_l+0xba8>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f7f5 f90e 	bl	80009bc <__aeabi_dcmplt>
 800b7a0:	e79d      	b.n	800b6de <_strtod_l+0xab6>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	930e      	str	r3, [sp, #56]	@ 0x38
 800b7a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7a8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	f7ff ba79 	b.w	800aca2 <_strtod_l+0x7a>
 800b7b0:	2a65      	cmp	r2, #101	@ 0x65
 800b7b2:	f43f ab72 	beq.w	800ae9a <_strtod_l+0x272>
 800b7b6:	2a45      	cmp	r2, #69	@ 0x45
 800b7b8:	f43f ab6f 	beq.w	800ae9a <_strtod_l+0x272>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	f7ff bbaa 	b.w	800af16 <_strtod_l+0x2ee>
 800b7c2:	bf00      	nop
 800b7c4:	f3af 8000 	nop.w
 800b7c8:	ffc00000 	.word	0xffc00000
 800b7cc:	41dfffff 	.word	0x41dfffff
 800b7d0:	94a03595 	.word	0x94a03595
 800b7d4:	3fcfffff 	.word	0x3fcfffff

0800b7d8 <_strtod_r>:
 800b7d8:	4b01      	ldr	r3, [pc, #4]	@ (800b7e0 <_strtod_r+0x8>)
 800b7da:	f7ff ba25 	b.w	800ac28 <_strtod_l>
 800b7de:	bf00      	nop
 800b7e0:	200001e8 	.word	0x200001e8

0800b7e4 <_strtol_l.isra.0>:
 800b7e4:	2b24      	cmp	r3, #36	@ 0x24
 800b7e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7ea:	4686      	mov	lr, r0
 800b7ec:	4690      	mov	r8, r2
 800b7ee:	d801      	bhi.n	800b7f4 <_strtol_l.isra.0+0x10>
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d106      	bne.n	800b802 <_strtol_l.isra.0+0x1e>
 800b7f4:	f7ff f8ce 	bl	800a994 <__errno>
 800b7f8:	2316      	movs	r3, #22
 800b7fa:	6003      	str	r3, [r0, #0]
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b802:	460d      	mov	r5, r1
 800b804:	4833      	ldr	r0, [pc, #204]	@ (800b8d4 <_strtol_l.isra.0+0xf0>)
 800b806:	462a      	mov	r2, r5
 800b808:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b80c:	5d06      	ldrb	r6, [r0, r4]
 800b80e:	f016 0608 	ands.w	r6, r6, #8
 800b812:	d1f8      	bne.n	800b806 <_strtol_l.isra.0+0x22>
 800b814:	2c2d      	cmp	r4, #45	@ 0x2d
 800b816:	d110      	bne.n	800b83a <_strtol_l.isra.0+0x56>
 800b818:	2601      	movs	r6, #1
 800b81a:	782c      	ldrb	r4, [r5, #0]
 800b81c:	1c95      	adds	r5, r2, #2
 800b81e:	f033 0210 	bics.w	r2, r3, #16
 800b822:	d115      	bne.n	800b850 <_strtol_l.isra.0+0x6c>
 800b824:	2c30      	cmp	r4, #48	@ 0x30
 800b826:	d10d      	bne.n	800b844 <_strtol_l.isra.0+0x60>
 800b828:	782a      	ldrb	r2, [r5, #0]
 800b82a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b82e:	2a58      	cmp	r2, #88	@ 0x58
 800b830:	d108      	bne.n	800b844 <_strtol_l.isra.0+0x60>
 800b832:	786c      	ldrb	r4, [r5, #1]
 800b834:	3502      	adds	r5, #2
 800b836:	2310      	movs	r3, #16
 800b838:	e00a      	b.n	800b850 <_strtol_l.isra.0+0x6c>
 800b83a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b83c:	bf04      	itt	eq
 800b83e:	782c      	ldrbeq	r4, [r5, #0]
 800b840:	1c95      	addeq	r5, r2, #2
 800b842:	e7ec      	b.n	800b81e <_strtol_l.isra.0+0x3a>
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1f6      	bne.n	800b836 <_strtol_l.isra.0+0x52>
 800b848:	2c30      	cmp	r4, #48	@ 0x30
 800b84a:	bf14      	ite	ne
 800b84c:	230a      	movne	r3, #10
 800b84e:	2308      	moveq	r3, #8
 800b850:	2200      	movs	r2, #0
 800b852:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b856:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b85a:	fbbc f9f3 	udiv	r9, ip, r3
 800b85e:	4610      	mov	r0, r2
 800b860:	fb03 ca19 	mls	sl, r3, r9, ip
 800b864:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b868:	2f09      	cmp	r7, #9
 800b86a:	d80f      	bhi.n	800b88c <_strtol_l.isra.0+0xa8>
 800b86c:	463c      	mov	r4, r7
 800b86e:	42a3      	cmp	r3, r4
 800b870:	dd1b      	ble.n	800b8aa <_strtol_l.isra.0+0xc6>
 800b872:	1c57      	adds	r7, r2, #1
 800b874:	d007      	beq.n	800b886 <_strtol_l.isra.0+0xa2>
 800b876:	4581      	cmp	r9, r0
 800b878:	d314      	bcc.n	800b8a4 <_strtol_l.isra.0+0xc0>
 800b87a:	d101      	bne.n	800b880 <_strtol_l.isra.0+0x9c>
 800b87c:	45a2      	cmp	sl, r4
 800b87e:	db11      	blt.n	800b8a4 <_strtol_l.isra.0+0xc0>
 800b880:	2201      	movs	r2, #1
 800b882:	fb00 4003 	mla	r0, r0, r3, r4
 800b886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b88a:	e7eb      	b.n	800b864 <_strtol_l.isra.0+0x80>
 800b88c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b890:	2f19      	cmp	r7, #25
 800b892:	d801      	bhi.n	800b898 <_strtol_l.isra.0+0xb4>
 800b894:	3c37      	subs	r4, #55	@ 0x37
 800b896:	e7ea      	b.n	800b86e <_strtol_l.isra.0+0x8a>
 800b898:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b89c:	2f19      	cmp	r7, #25
 800b89e:	d804      	bhi.n	800b8aa <_strtol_l.isra.0+0xc6>
 800b8a0:	3c57      	subs	r4, #87	@ 0x57
 800b8a2:	e7e4      	b.n	800b86e <_strtol_l.isra.0+0x8a>
 800b8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a8:	e7ed      	b.n	800b886 <_strtol_l.isra.0+0xa2>
 800b8aa:	1c53      	adds	r3, r2, #1
 800b8ac:	d108      	bne.n	800b8c0 <_strtol_l.isra.0+0xdc>
 800b8ae:	2322      	movs	r3, #34	@ 0x22
 800b8b0:	4660      	mov	r0, ip
 800b8b2:	f8ce 3000 	str.w	r3, [lr]
 800b8b6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ba:	d0a0      	beq.n	800b7fe <_strtol_l.isra.0+0x1a>
 800b8bc:	1e69      	subs	r1, r5, #1
 800b8be:	e006      	b.n	800b8ce <_strtol_l.isra.0+0xea>
 800b8c0:	b106      	cbz	r6, 800b8c4 <_strtol_l.isra.0+0xe0>
 800b8c2:	4240      	negs	r0, r0
 800b8c4:	f1b8 0f00 	cmp.w	r8, #0
 800b8c8:	d099      	beq.n	800b7fe <_strtol_l.isra.0+0x1a>
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	d1f6      	bne.n	800b8bc <_strtol_l.isra.0+0xd8>
 800b8ce:	f8c8 1000 	str.w	r1, [r8]
 800b8d2:	e794      	b.n	800b7fe <_strtol_l.isra.0+0x1a>
 800b8d4:	0800e8f9 	.word	0x0800e8f9

0800b8d8 <_strtol_r>:
 800b8d8:	f7ff bf84 	b.w	800b7e4 <_strtol_l.isra.0>

0800b8dc <__ssputs_r>:
 800b8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e0:	461f      	mov	r7, r3
 800b8e2:	688e      	ldr	r6, [r1, #8]
 800b8e4:	4682      	mov	sl, r0
 800b8e6:	42be      	cmp	r6, r7
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	4690      	mov	r8, r2
 800b8ec:	680b      	ldr	r3, [r1, #0]
 800b8ee:	d82d      	bhi.n	800b94c <__ssputs_r+0x70>
 800b8f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b8f8:	d026      	beq.n	800b948 <__ssputs_r+0x6c>
 800b8fa:	6965      	ldr	r5, [r4, #20]
 800b8fc:	6909      	ldr	r1, [r1, #16]
 800b8fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b902:	eba3 0901 	sub.w	r9, r3, r1
 800b906:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b90a:	1c7b      	adds	r3, r7, #1
 800b90c:	444b      	add	r3, r9
 800b90e:	106d      	asrs	r5, r5, #1
 800b910:	429d      	cmp	r5, r3
 800b912:	bf38      	it	cc
 800b914:	461d      	movcc	r5, r3
 800b916:	0553      	lsls	r3, r2, #21
 800b918:	d527      	bpl.n	800b96a <__ssputs_r+0x8e>
 800b91a:	4629      	mov	r1, r5
 800b91c:	f7ff f8d6 	bl	800aacc <_malloc_r>
 800b920:	4606      	mov	r6, r0
 800b922:	b360      	cbz	r0, 800b97e <__ssputs_r+0xa2>
 800b924:	464a      	mov	r2, r9
 800b926:	6921      	ldr	r1, [r4, #16]
 800b928:	f000 ff3e 	bl	800c7a8 <memcpy>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b936:	81a3      	strh	r3, [r4, #12]
 800b938:	6126      	str	r6, [r4, #16]
 800b93a:	444e      	add	r6, r9
 800b93c:	6026      	str	r6, [r4, #0]
 800b93e:	463e      	mov	r6, r7
 800b940:	6165      	str	r5, [r4, #20]
 800b942:	eba5 0509 	sub.w	r5, r5, r9
 800b946:	60a5      	str	r5, [r4, #8]
 800b948:	42be      	cmp	r6, r7
 800b94a:	d900      	bls.n	800b94e <__ssputs_r+0x72>
 800b94c:	463e      	mov	r6, r7
 800b94e:	4632      	mov	r2, r6
 800b950:	4641      	mov	r1, r8
 800b952:	6820      	ldr	r0, [r4, #0]
 800b954:	f000 fedd 	bl	800c712 <memmove>
 800b958:	2000      	movs	r0, #0
 800b95a:	68a3      	ldr	r3, [r4, #8]
 800b95c:	1b9b      	subs	r3, r3, r6
 800b95e:	60a3      	str	r3, [r4, #8]
 800b960:	6823      	ldr	r3, [r4, #0]
 800b962:	4433      	add	r3, r6
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96a:	462a      	mov	r2, r5
 800b96c:	f001 ff1c 	bl	800d7a8 <_realloc_r>
 800b970:	4606      	mov	r6, r0
 800b972:	2800      	cmp	r0, #0
 800b974:	d1e0      	bne.n	800b938 <__ssputs_r+0x5c>
 800b976:	4650      	mov	r0, sl
 800b978:	6921      	ldr	r1, [r4, #16]
 800b97a:	f7ff f83d 	bl	800a9f8 <_free_r>
 800b97e:	230c      	movs	r3, #12
 800b980:	f8ca 3000 	str.w	r3, [sl]
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	f04f 30ff 	mov.w	r0, #4294967295
 800b98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b98e:	81a3      	strh	r3, [r4, #12]
 800b990:	e7e9      	b.n	800b966 <__ssputs_r+0x8a>
	...

0800b994 <_svfiprintf_r>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4698      	mov	r8, r3
 800b99a:	898b      	ldrh	r3, [r1, #12]
 800b99c:	4607      	mov	r7, r0
 800b99e:	061b      	lsls	r3, r3, #24
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	4614      	mov	r4, r2
 800b9a4:	b09d      	sub	sp, #116	@ 0x74
 800b9a6:	d510      	bpl.n	800b9ca <_svfiprintf_r+0x36>
 800b9a8:	690b      	ldr	r3, [r1, #16]
 800b9aa:	b973      	cbnz	r3, 800b9ca <_svfiprintf_r+0x36>
 800b9ac:	2140      	movs	r1, #64	@ 0x40
 800b9ae:	f7ff f88d 	bl	800aacc <_malloc_r>
 800b9b2:	6028      	str	r0, [r5, #0]
 800b9b4:	6128      	str	r0, [r5, #16]
 800b9b6:	b930      	cbnz	r0, 800b9c6 <_svfiprintf_r+0x32>
 800b9b8:	230c      	movs	r3, #12
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	b01d      	add	sp, #116	@ 0x74
 800b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c6:	2340      	movs	r3, #64	@ 0x40
 800b9c8:	616b      	str	r3, [r5, #20]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9ce:	2320      	movs	r3, #32
 800b9d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9d4:	2330      	movs	r3, #48	@ 0x30
 800b9d6:	f04f 0901 	mov.w	r9, #1
 800b9da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bb78 <_svfiprintf_r+0x1e4>
 800b9e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9e6:	4623      	mov	r3, r4
 800b9e8:	469a      	mov	sl, r3
 800b9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ee:	b10a      	cbz	r2, 800b9f4 <_svfiprintf_r+0x60>
 800b9f0:	2a25      	cmp	r2, #37	@ 0x25
 800b9f2:	d1f9      	bne.n	800b9e8 <_svfiprintf_r+0x54>
 800b9f4:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f8:	d00b      	beq.n	800ba12 <_svfiprintf_r+0x7e>
 800b9fa:	465b      	mov	r3, fp
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4629      	mov	r1, r5
 800ba00:	4638      	mov	r0, r7
 800ba02:	f7ff ff6b 	bl	800b8dc <__ssputs_r>
 800ba06:	3001      	adds	r0, #1
 800ba08:	f000 80a7 	beq.w	800bb5a <_svfiprintf_r+0x1c6>
 800ba0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba0e:	445a      	add	r2, fp
 800ba10:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba12:	f89a 3000 	ldrb.w	r3, [sl]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f000 809f 	beq.w	800bb5a <_svfiprintf_r+0x1c6>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba26:	f10a 0a01 	add.w	sl, sl, #1
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	9307      	str	r3, [sp, #28]
 800ba2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba32:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba34:	4654      	mov	r4, sl
 800ba36:	2205      	movs	r2, #5
 800ba38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba3c:	484e      	ldr	r0, [pc, #312]	@ (800bb78 <_svfiprintf_r+0x1e4>)
 800ba3e:	f000 fea5 	bl	800c78c <memchr>
 800ba42:	9a04      	ldr	r2, [sp, #16]
 800ba44:	b9d8      	cbnz	r0, 800ba7e <_svfiprintf_r+0xea>
 800ba46:	06d0      	lsls	r0, r2, #27
 800ba48:	bf44      	itt	mi
 800ba4a:	2320      	movmi	r3, #32
 800ba4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba50:	0711      	lsls	r1, r2, #28
 800ba52:	bf44      	itt	mi
 800ba54:	232b      	movmi	r3, #43	@ 0x2b
 800ba56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba60:	d015      	beq.n	800ba8e <_svfiprintf_r+0xfa>
 800ba62:	4654      	mov	r4, sl
 800ba64:	2000      	movs	r0, #0
 800ba66:	f04f 0c0a 	mov.w	ip, #10
 800ba6a:	9a07      	ldr	r2, [sp, #28]
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba72:	3b30      	subs	r3, #48	@ 0x30
 800ba74:	2b09      	cmp	r3, #9
 800ba76:	d94b      	bls.n	800bb10 <_svfiprintf_r+0x17c>
 800ba78:	b1b0      	cbz	r0, 800baa8 <_svfiprintf_r+0x114>
 800ba7a:	9207      	str	r2, [sp, #28]
 800ba7c:	e014      	b.n	800baa8 <_svfiprintf_r+0x114>
 800ba7e:	eba0 0308 	sub.w	r3, r0, r8
 800ba82:	fa09 f303 	lsl.w	r3, r9, r3
 800ba86:	4313      	orrs	r3, r2
 800ba88:	46a2      	mov	sl, r4
 800ba8a:	9304      	str	r3, [sp, #16]
 800ba8c:	e7d2      	b.n	800ba34 <_svfiprintf_r+0xa0>
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	1d19      	adds	r1, r3, #4
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	9103      	str	r1, [sp, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	bfbb      	ittet	lt
 800ba9a:	425b      	neglt	r3, r3
 800ba9c:	f042 0202 	orrlt.w	r2, r2, #2
 800baa0:	9307      	strge	r3, [sp, #28]
 800baa2:	9307      	strlt	r3, [sp, #28]
 800baa4:	bfb8      	it	lt
 800baa6:	9204      	strlt	r2, [sp, #16]
 800baa8:	7823      	ldrb	r3, [r4, #0]
 800baaa:	2b2e      	cmp	r3, #46	@ 0x2e
 800baac:	d10a      	bne.n	800bac4 <_svfiprintf_r+0x130>
 800baae:	7863      	ldrb	r3, [r4, #1]
 800bab0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bab2:	d132      	bne.n	800bb1a <_svfiprintf_r+0x186>
 800bab4:	9b03      	ldr	r3, [sp, #12]
 800bab6:	3402      	adds	r4, #2
 800bab8:	1d1a      	adds	r2, r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	9203      	str	r2, [sp, #12]
 800babe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bac2:	9305      	str	r3, [sp, #20]
 800bac4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bb7c <_svfiprintf_r+0x1e8>
 800bac8:	2203      	movs	r2, #3
 800baca:	4650      	mov	r0, sl
 800bacc:	7821      	ldrb	r1, [r4, #0]
 800bace:	f000 fe5d 	bl	800c78c <memchr>
 800bad2:	b138      	cbz	r0, 800bae4 <_svfiprintf_r+0x150>
 800bad4:	2240      	movs	r2, #64	@ 0x40
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	eba0 000a 	sub.w	r0, r0, sl
 800badc:	4082      	lsls	r2, r0
 800bade:	4313      	orrs	r3, r2
 800bae0:	3401      	adds	r4, #1
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae8:	2206      	movs	r2, #6
 800baea:	4825      	ldr	r0, [pc, #148]	@ (800bb80 <_svfiprintf_r+0x1ec>)
 800baec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800baf0:	f000 fe4c 	bl	800c78c <memchr>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d036      	beq.n	800bb66 <_svfiprintf_r+0x1d2>
 800baf8:	4b22      	ldr	r3, [pc, #136]	@ (800bb84 <_svfiprintf_r+0x1f0>)
 800bafa:	bb1b      	cbnz	r3, 800bb44 <_svfiprintf_r+0x1b0>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	3307      	adds	r3, #7
 800bb00:	f023 0307 	bic.w	r3, r3, #7
 800bb04:	3308      	adds	r3, #8
 800bb06:	9303      	str	r3, [sp, #12]
 800bb08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb0a:	4433      	add	r3, r6
 800bb0c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb0e:	e76a      	b.n	800b9e6 <_svfiprintf_r+0x52>
 800bb10:	460c      	mov	r4, r1
 800bb12:	2001      	movs	r0, #1
 800bb14:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb18:	e7a8      	b.n	800ba6c <_svfiprintf_r+0xd8>
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	f04f 0c0a 	mov.w	ip, #10
 800bb20:	4619      	mov	r1, r3
 800bb22:	3401      	adds	r4, #1
 800bb24:	9305      	str	r3, [sp, #20]
 800bb26:	4620      	mov	r0, r4
 800bb28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2c:	3a30      	subs	r2, #48	@ 0x30
 800bb2e:	2a09      	cmp	r2, #9
 800bb30:	d903      	bls.n	800bb3a <_svfiprintf_r+0x1a6>
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0c6      	beq.n	800bac4 <_svfiprintf_r+0x130>
 800bb36:	9105      	str	r1, [sp, #20]
 800bb38:	e7c4      	b.n	800bac4 <_svfiprintf_r+0x130>
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb42:	e7f0      	b.n	800bb26 <_svfiprintf_r+0x192>
 800bb44:	ab03      	add	r3, sp, #12
 800bb46:	9300      	str	r3, [sp, #0]
 800bb48:	462a      	mov	r2, r5
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	4b0e      	ldr	r3, [pc, #56]	@ (800bb88 <_svfiprintf_r+0x1f4>)
 800bb4e:	a904      	add	r1, sp, #16
 800bb50:	f3af 8000 	nop.w
 800bb54:	1c42      	adds	r2, r0, #1
 800bb56:	4606      	mov	r6, r0
 800bb58:	d1d6      	bne.n	800bb08 <_svfiprintf_r+0x174>
 800bb5a:	89ab      	ldrh	r3, [r5, #12]
 800bb5c:	065b      	lsls	r3, r3, #25
 800bb5e:	f53f af2d 	bmi.w	800b9bc <_svfiprintf_r+0x28>
 800bb62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb64:	e72c      	b.n	800b9c0 <_svfiprintf_r+0x2c>
 800bb66:	ab03      	add	r3, sp, #12
 800bb68:	9300      	str	r3, [sp, #0]
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	4638      	mov	r0, r7
 800bb6e:	4b06      	ldr	r3, [pc, #24]	@ (800bb88 <_svfiprintf_r+0x1f4>)
 800bb70:	a904      	add	r1, sp, #16
 800bb72:	f000 fa4b 	bl	800c00c <_printf_i>
 800bb76:	e7ed      	b.n	800bb54 <_svfiprintf_r+0x1c0>
 800bb78:	0800e735 	.word	0x0800e735
 800bb7c:	0800e73b 	.word	0x0800e73b
 800bb80:	0800e73f 	.word	0x0800e73f
 800bb84:	00000000 	.word	0x00000000
 800bb88:	0800b8dd 	.word	0x0800b8dd

0800bb8c <_sungetc_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	1c4b      	adds	r3, r1, #1
 800bb90:	4614      	mov	r4, r2
 800bb92:	d103      	bne.n	800bb9c <_sungetc_r+0x10>
 800bb94:	f04f 35ff 	mov.w	r5, #4294967295
 800bb98:	4628      	mov	r0, r5
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	8993      	ldrh	r3, [r2, #12]
 800bb9e:	b2cd      	uxtb	r5, r1
 800bba0:	f023 0320 	bic.w	r3, r3, #32
 800bba4:	8193      	strh	r3, [r2, #12]
 800bba6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bba8:	6852      	ldr	r2, [r2, #4]
 800bbaa:	b18b      	cbz	r3, 800bbd0 <_sungetc_r+0x44>
 800bbac:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	dd08      	ble.n	800bbc4 <_sungetc_r+0x38>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	1e5a      	subs	r2, r3, #1
 800bbb6:	6022      	str	r2, [r4, #0]
 800bbb8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bbbc:	6863      	ldr	r3, [r4, #4]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	e7e9      	b.n	800bb98 <_sungetc_r+0xc>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	f000 fd6c 	bl	800c6a2 <__submore>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d0f1      	beq.n	800bbb2 <_sungetc_r+0x26>
 800bbce:	e7e1      	b.n	800bb94 <_sungetc_r+0x8>
 800bbd0:	6921      	ldr	r1, [r4, #16]
 800bbd2:	6823      	ldr	r3, [r4, #0]
 800bbd4:	b151      	cbz	r1, 800bbec <_sungetc_r+0x60>
 800bbd6:	4299      	cmp	r1, r3
 800bbd8:	d208      	bcs.n	800bbec <_sungetc_r+0x60>
 800bbda:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bbde:	42a9      	cmp	r1, r5
 800bbe0:	d104      	bne.n	800bbec <_sungetc_r+0x60>
 800bbe2:	3b01      	subs	r3, #1
 800bbe4:	3201      	adds	r2, #1
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	6062      	str	r2, [r4, #4]
 800bbea:	e7d5      	b.n	800bb98 <_sungetc_r+0xc>
 800bbec:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800bbf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bbfa:	4623      	mov	r3, r4
 800bbfc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	2301      	movs	r3, #1
 800bc04:	e7dc      	b.n	800bbc0 <_sungetc_r+0x34>

0800bc06 <__ssrefill_r>:
 800bc06:	b510      	push	{r4, lr}
 800bc08:	460c      	mov	r4, r1
 800bc0a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bc0c:	b169      	cbz	r1, 800bc2a <__ssrefill_r+0x24>
 800bc0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bc12:	4299      	cmp	r1, r3
 800bc14:	d001      	beq.n	800bc1a <__ssrefill_r+0x14>
 800bc16:	f7fe feef 	bl	800a9f8 <_free_r>
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc1e:	6360      	str	r0, [r4, #52]	@ 0x34
 800bc20:	6063      	str	r3, [r4, #4]
 800bc22:	b113      	cbz	r3, 800bc2a <__ssrefill_r+0x24>
 800bc24:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bc26:	6023      	str	r3, [r4, #0]
 800bc28:	bd10      	pop	{r4, pc}
 800bc2a:	6923      	ldr	r3, [r4, #16]
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc30:	6023      	str	r3, [r4, #0]
 800bc32:	2300      	movs	r3, #0
 800bc34:	6063      	str	r3, [r4, #4]
 800bc36:	89a3      	ldrh	r3, [r4, #12]
 800bc38:	f043 0320 	orr.w	r3, r3, #32
 800bc3c:	81a3      	strh	r3, [r4, #12]
 800bc3e:	e7f3      	b.n	800bc28 <__ssrefill_r+0x22>

0800bc40 <__ssvfiscanf_r>:
 800bc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc44:	460c      	mov	r4, r1
 800bc46:	2100      	movs	r1, #0
 800bc48:	4606      	mov	r6, r0
 800bc4a:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800bc4e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bc52:	49ab      	ldr	r1, [pc, #684]	@ (800bf00 <__ssvfiscanf_r+0x2c0>)
 800bc54:	f10d 0804 	add.w	r8, sp, #4
 800bc58:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bc5a:	49aa      	ldr	r1, [pc, #680]	@ (800bf04 <__ssvfiscanf_r+0x2c4>)
 800bc5c:	4faa      	ldr	r7, [pc, #680]	@ (800bf08 <__ssvfiscanf_r+0x2c8>)
 800bc5e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bc62:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	f892 9000 	ldrb.w	r9, [r2]
 800bc6a:	f1b9 0f00 	cmp.w	r9, #0
 800bc6e:	f000 8159 	beq.w	800bf24 <__ssvfiscanf_r+0x2e4>
 800bc72:	f817 3009 	ldrb.w	r3, [r7, r9]
 800bc76:	1c55      	adds	r5, r2, #1
 800bc78:	f013 0308 	ands.w	r3, r3, #8
 800bc7c:	d019      	beq.n	800bcb2 <__ssvfiscanf_r+0x72>
 800bc7e:	6863      	ldr	r3, [r4, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dd0f      	ble.n	800bca4 <__ssvfiscanf_r+0x64>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	781a      	ldrb	r2, [r3, #0]
 800bc88:	5cba      	ldrb	r2, [r7, r2]
 800bc8a:	0712      	lsls	r2, r2, #28
 800bc8c:	d401      	bmi.n	800bc92 <__ssvfiscanf_r+0x52>
 800bc8e:	462a      	mov	r2, r5
 800bc90:	e7e9      	b.n	800bc66 <__ssvfiscanf_r+0x26>
 800bc92:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bc94:	3301      	adds	r3, #1
 800bc96:	3201      	adds	r2, #1
 800bc98:	9245      	str	r2, [sp, #276]	@ 0x114
 800bc9a:	6862      	ldr	r2, [r4, #4]
 800bc9c:	6023      	str	r3, [r4, #0]
 800bc9e:	3a01      	subs	r2, #1
 800bca0:	6062      	str	r2, [r4, #4]
 800bca2:	e7ec      	b.n	800bc7e <__ssvfiscanf_r+0x3e>
 800bca4:	4621      	mov	r1, r4
 800bca6:	4630      	mov	r0, r6
 800bca8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bcaa:	4798      	blx	r3
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d0e9      	beq.n	800bc84 <__ssvfiscanf_r+0x44>
 800bcb0:	e7ed      	b.n	800bc8e <__ssvfiscanf_r+0x4e>
 800bcb2:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800bcb6:	f040 8086 	bne.w	800bdc6 <__ssvfiscanf_r+0x186>
 800bcba:	9341      	str	r3, [sp, #260]	@ 0x104
 800bcbc:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bcbe:	7853      	ldrb	r3, [r2, #1]
 800bcc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcc2:	bf04      	itt	eq
 800bcc4:	2310      	moveq	r3, #16
 800bcc6:	1c95      	addeq	r5, r2, #2
 800bcc8:	f04f 020a 	mov.w	r2, #10
 800bccc:	bf08      	it	eq
 800bcce:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bcd0:	46aa      	mov	sl, r5
 800bcd2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bcd6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bcda:	2b09      	cmp	r3, #9
 800bcdc:	d91e      	bls.n	800bd1c <__ssvfiscanf_r+0xdc>
 800bcde:	f8df b22c 	ldr.w	fp, [pc, #556]	@ 800bf0c <__ssvfiscanf_r+0x2cc>
 800bce2:	2203      	movs	r2, #3
 800bce4:	4658      	mov	r0, fp
 800bce6:	f000 fd51 	bl	800c78c <memchr>
 800bcea:	b138      	cbz	r0, 800bcfc <__ssvfiscanf_r+0xbc>
 800bcec:	2301      	movs	r3, #1
 800bcee:	4655      	mov	r5, sl
 800bcf0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bcf2:	eba0 000b 	sub.w	r0, r0, fp
 800bcf6:	4083      	lsls	r3, r0
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	9341      	str	r3, [sp, #260]	@ 0x104
 800bcfc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd00:	2b78      	cmp	r3, #120	@ 0x78
 800bd02:	d806      	bhi.n	800bd12 <__ssvfiscanf_r+0xd2>
 800bd04:	2b57      	cmp	r3, #87	@ 0x57
 800bd06:	d810      	bhi.n	800bd2a <__ssvfiscanf_r+0xea>
 800bd08:	2b25      	cmp	r3, #37	@ 0x25
 800bd0a:	d05c      	beq.n	800bdc6 <__ssvfiscanf_r+0x186>
 800bd0c:	d856      	bhi.n	800bdbc <__ssvfiscanf_r+0x17c>
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d074      	beq.n	800bdfc <__ssvfiscanf_r+0x1bc>
 800bd12:	2303      	movs	r3, #3
 800bd14:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bd16:	230a      	movs	r3, #10
 800bd18:	9342      	str	r3, [sp, #264]	@ 0x108
 800bd1a:	e087      	b.n	800be2c <__ssvfiscanf_r+0x1ec>
 800bd1c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bd1e:	4655      	mov	r5, sl
 800bd20:	fb02 1103 	mla	r1, r2, r3, r1
 800bd24:	3930      	subs	r1, #48	@ 0x30
 800bd26:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bd28:	e7d2      	b.n	800bcd0 <__ssvfiscanf_r+0x90>
 800bd2a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bd2e:	2a20      	cmp	r2, #32
 800bd30:	d8ef      	bhi.n	800bd12 <__ssvfiscanf_r+0xd2>
 800bd32:	a101      	add	r1, pc, #4	@ (adr r1, 800bd38 <__ssvfiscanf_r+0xf8>)
 800bd34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bd38:	0800be0b 	.word	0x0800be0b
 800bd3c:	0800bd13 	.word	0x0800bd13
 800bd40:	0800bd13 	.word	0x0800bd13
 800bd44:	0800be65 	.word	0x0800be65
 800bd48:	0800bd13 	.word	0x0800bd13
 800bd4c:	0800bd13 	.word	0x0800bd13
 800bd50:	0800bd13 	.word	0x0800bd13
 800bd54:	0800bd13 	.word	0x0800bd13
 800bd58:	0800bd13 	.word	0x0800bd13
 800bd5c:	0800bd13 	.word	0x0800bd13
 800bd60:	0800bd13 	.word	0x0800bd13
 800bd64:	0800be7b 	.word	0x0800be7b
 800bd68:	0800be61 	.word	0x0800be61
 800bd6c:	0800bdc3 	.word	0x0800bdc3
 800bd70:	0800bdc3 	.word	0x0800bdc3
 800bd74:	0800bdc3 	.word	0x0800bdc3
 800bd78:	0800bd13 	.word	0x0800bd13
 800bd7c:	0800be1d 	.word	0x0800be1d
 800bd80:	0800bd13 	.word	0x0800bd13
 800bd84:	0800bd13 	.word	0x0800bd13
 800bd88:	0800bd13 	.word	0x0800bd13
 800bd8c:	0800bd13 	.word	0x0800bd13
 800bd90:	0800be8b 	.word	0x0800be8b
 800bd94:	0800be25 	.word	0x0800be25
 800bd98:	0800be03 	.word	0x0800be03
 800bd9c:	0800bd13 	.word	0x0800bd13
 800bda0:	0800bd13 	.word	0x0800bd13
 800bda4:	0800be87 	.word	0x0800be87
 800bda8:	0800bd13 	.word	0x0800bd13
 800bdac:	0800be61 	.word	0x0800be61
 800bdb0:	0800bd13 	.word	0x0800bd13
 800bdb4:	0800bd13 	.word	0x0800bd13
 800bdb8:	0800be0b 	.word	0x0800be0b
 800bdbc:	3b45      	subs	r3, #69	@ 0x45
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d8a7      	bhi.n	800bd12 <__ssvfiscanf_r+0xd2>
 800bdc2:	2305      	movs	r3, #5
 800bdc4:	e031      	b.n	800be2a <__ssvfiscanf_r+0x1ea>
 800bdc6:	6863      	ldr	r3, [r4, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	dd0d      	ble.n	800bde8 <__ssvfiscanf_r+0x1a8>
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	781a      	ldrb	r2, [r3, #0]
 800bdd0:	454a      	cmp	r2, r9
 800bdd2:	f040 80a7 	bne.w	800bf24 <__ssvfiscanf_r+0x2e4>
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	6862      	ldr	r2, [r4, #4]
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bdde:	3a01      	subs	r2, #1
 800bde0:	3301      	adds	r3, #1
 800bde2:	6062      	str	r2, [r4, #4]
 800bde4:	9345      	str	r3, [sp, #276]	@ 0x114
 800bde6:	e752      	b.n	800bc8e <__ssvfiscanf_r+0x4e>
 800bde8:	4621      	mov	r1, r4
 800bdea:	4630      	mov	r0, r6
 800bdec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bdee:	4798      	blx	r3
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d0eb      	beq.n	800bdcc <__ssvfiscanf_r+0x18c>
 800bdf4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f040 808c 	bne.w	800bf14 <__ssvfiscanf_r+0x2d4>
 800bdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800be00:	e08c      	b.n	800bf1c <__ssvfiscanf_r+0x2dc>
 800be02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800be04:	f042 0220 	orr.w	r2, r2, #32
 800be08:	9241      	str	r2, [sp, #260]	@ 0x104
 800be0a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800be0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be10:	9241      	str	r2, [sp, #260]	@ 0x104
 800be12:	2210      	movs	r2, #16
 800be14:	2b6e      	cmp	r3, #110	@ 0x6e
 800be16:	9242      	str	r2, [sp, #264]	@ 0x108
 800be18:	d902      	bls.n	800be20 <__ssvfiscanf_r+0x1e0>
 800be1a:	e005      	b.n	800be28 <__ssvfiscanf_r+0x1e8>
 800be1c:	2300      	movs	r3, #0
 800be1e:	9342      	str	r3, [sp, #264]	@ 0x108
 800be20:	2303      	movs	r3, #3
 800be22:	e002      	b.n	800be2a <__ssvfiscanf_r+0x1ea>
 800be24:	2308      	movs	r3, #8
 800be26:	9342      	str	r3, [sp, #264]	@ 0x108
 800be28:	2304      	movs	r3, #4
 800be2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800be2c:	6863      	ldr	r3, [r4, #4]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd39      	ble.n	800bea6 <__ssvfiscanf_r+0x266>
 800be32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800be34:	0659      	lsls	r1, r3, #25
 800be36:	d404      	bmi.n	800be42 <__ssvfiscanf_r+0x202>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	781a      	ldrb	r2, [r3, #0]
 800be3c:	5cba      	ldrb	r2, [r7, r2]
 800be3e:	0712      	lsls	r2, r2, #28
 800be40:	d438      	bmi.n	800beb4 <__ssvfiscanf_r+0x274>
 800be42:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800be44:	2b02      	cmp	r3, #2
 800be46:	dc47      	bgt.n	800bed8 <__ssvfiscanf_r+0x298>
 800be48:	466b      	mov	r3, sp
 800be4a:	4622      	mov	r2, r4
 800be4c:	4630      	mov	r0, r6
 800be4e:	a941      	add	r1, sp, #260	@ 0x104
 800be50:	f000 f9fa 	bl	800c248 <_scanf_chars>
 800be54:	2801      	cmp	r0, #1
 800be56:	d065      	beq.n	800bf24 <__ssvfiscanf_r+0x2e4>
 800be58:	2802      	cmp	r0, #2
 800be5a:	f47f af18 	bne.w	800bc8e <__ssvfiscanf_r+0x4e>
 800be5e:	e7c9      	b.n	800bdf4 <__ssvfiscanf_r+0x1b4>
 800be60:	220a      	movs	r2, #10
 800be62:	e7d7      	b.n	800be14 <__ssvfiscanf_r+0x1d4>
 800be64:	4629      	mov	r1, r5
 800be66:	4640      	mov	r0, r8
 800be68:	f000 fbe2 	bl	800c630 <__sccl>
 800be6c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800be6e:	4605      	mov	r5, r0
 800be70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be74:	9341      	str	r3, [sp, #260]	@ 0x104
 800be76:	2301      	movs	r3, #1
 800be78:	e7d7      	b.n	800be2a <__ssvfiscanf_r+0x1ea>
 800be7a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800be7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be80:	9341      	str	r3, [sp, #260]	@ 0x104
 800be82:	2300      	movs	r3, #0
 800be84:	e7d1      	b.n	800be2a <__ssvfiscanf_r+0x1ea>
 800be86:	2302      	movs	r3, #2
 800be88:	e7cf      	b.n	800be2a <__ssvfiscanf_r+0x1ea>
 800be8a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800be8c:	06c3      	lsls	r3, r0, #27
 800be8e:	f53f aefe 	bmi.w	800bc8e <__ssvfiscanf_r+0x4e>
 800be92:	9b00      	ldr	r3, [sp, #0]
 800be94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be96:	1d19      	adds	r1, r3, #4
 800be98:	9100      	str	r1, [sp, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	07c0      	lsls	r0, r0, #31
 800be9e:	bf4c      	ite	mi
 800bea0:	801a      	strhmi	r2, [r3, #0]
 800bea2:	601a      	strpl	r2, [r3, #0]
 800bea4:	e6f3      	b.n	800bc8e <__ssvfiscanf_r+0x4e>
 800bea6:	4621      	mov	r1, r4
 800bea8:	4630      	mov	r0, r6
 800beaa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800beac:	4798      	blx	r3
 800beae:	2800      	cmp	r0, #0
 800beb0:	d0bf      	beq.n	800be32 <__ssvfiscanf_r+0x1f2>
 800beb2:	e79f      	b.n	800bdf4 <__ssvfiscanf_r+0x1b4>
 800beb4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800beb6:	3201      	adds	r2, #1
 800beb8:	9245      	str	r2, [sp, #276]	@ 0x114
 800beba:	6862      	ldr	r2, [r4, #4]
 800bebc:	3a01      	subs	r2, #1
 800bebe:	2a00      	cmp	r2, #0
 800bec0:	6062      	str	r2, [r4, #4]
 800bec2:	dd02      	ble.n	800beca <__ssvfiscanf_r+0x28a>
 800bec4:	3301      	adds	r3, #1
 800bec6:	6023      	str	r3, [r4, #0]
 800bec8:	e7b6      	b.n	800be38 <__ssvfiscanf_r+0x1f8>
 800beca:	4621      	mov	r1, r4
 800becc:	4630      	mov	r0, r6
 800bece:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bed0:	4798      	blx	r3
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d0b0      	beq.n	800be38 <__ssvfiscanf_r+0x1f8>
 800bed6:	e78d      	b.n	800bdf4 <__ssvfiscanf_r+0x1b4>
 800bed8:	2b04      	cmp	r3, #4
 800beda:	dc06      	bgt.n	800beea <__ssvfiscanf_r+0x2aa>
 800bedc:	466b      	mov	r3, sp
 800bede:	4622      	mov	r2, r4
 800bee0:	4630      	mov	r0, r6
 800bee2:	a941      	add	r1, sp, #260	@ 0x104
 800bee4:	f000 fa0a 	bl	800c2fc <_scanf_i>
 800bee8:	e7b4      	b.n	800be54 <__ssvfiscanf_r+0x214>
 800beea:	4b09      	ldr	r3, [pc, #36]	@ (800bf10 <__ssvfiscanf_r+0x2d0>)
 800beec:	2b00      	cmp	r3, #0
 800beee:	f43f aece 	beq.w	800bc8e <__ssvfiscanf_r+0x4e>
 800bef2:	466b      	mov	r3, sp
 800bef4:	4622      	mov	r2, r4
 800bef6:	4630      	mov	r0, r6
 800bef8:	a941      	add	r1, sp, #260	@ 0x104
 800befa:	f7fe f99d 	bl	800a238 <_scanf_float>
 800befe:	e7a9      	b.n	800be54 <__ssvfiscanf_r+0x214>
 800bf00:	0800bb8d 	.word	0x0800bb8d
 800bf04:	0800bc07 	.word	0x0800bc07
 800bf08:	0800e8f9 	.word	0x0800e8f9
 800bf0c:	0800e73b 	.word	0x0800e73b
 800bf10:	0800a239 	.word	0x0800a239
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	065b      	lsls	r3, r3, #25
 800bf18:	f53f af70 	bmi.w	800bdfc <__ssvfiscanf_r+0x1bc>
 800bf1c:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf24:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bf26:	e7f9      	b.n	800bf1c <__ssvfiscanf_r+0x2dc>

0800bf28 <_printf_common>:
 800bf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2c:	4616      	mov	r6, r2
 800bf2e:	4698      	mov	r8, r3
 800bf30:	688a      	ldr	r2, [r1, #8]
 800bf32:	690b      	ldr	r3, [r1, #16]
 800bf34:	4607      	mov	r7, r0
 800bf36:	4293      	cmp	r3, r2
 800bf38:	bfb8      	it	lt
 800bf3a:	4613      	movlt	r3, r2
 800bf3c:	6033      	str	r3, [r6, #0]
 800bf3e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf42:	460c      	mov	r4, r1
 800bf44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf48:	b10a      	cbz	r2, 800bf4e <_printf_common+0x26>
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	6033      	str	r3, [r6, #0]
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	0699      	lsls	r1, r3, #26
 800bf52:	bf42      	ittt	mi
 800bf54:	6833      	ldrmi	r3, [r6, #0]
 800bf56:	3302      	addmi	r3, #2
 800bf58:	6033      	strmi	r3, [r6, #0]
 800bf5a:	6825      	ldr	r5, [r4, #0]
 800bf5c:	f015 0506 	ands.w	r5, r5, #6
 800bf60:	d106      	bne.n	800bf70 <_printf_common+0x48>
 800bf62:	f104 0a19 	add.w	sl, r4, #25
 800bf66:	68e3      	ldr	r3, [r4, #12]
 800bf68:	6832      	ldr	r2, [r6, #0]
 800bf6a:	1a9b      	subs	r3, r3, r2
 800bf6c:	42ab      	cmp	r3, r5
 800bf6e:	dc2b      	bgt.n	800bfc8 <_printf_common+0xa0>
 800bf70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf74:	6822      	ldr	r2, [r4, #0]
 800bf76:	3b00      	subs	r3, #0
 800bf78:	bf18      	it	ne
 800bf7a:	2301      	movne	r3, #1
 800bf7c:	0692      	lsls	r2, r2, #26
 800bf7e:	d430      	bmi.n	800bfe2 <_printf_common+0xba>
 800bf80:	4641      	mov	r1, r8
 800bf82:	4638      	mov	r0, r7
 800bf84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf88:	47c8      	blx	r9
 800bf8a:	3001      	adds	r0, #1
 800bf8c:	d023      	beq.n	800bfd6 <_printf_common+0xae>
 800bf8e:	6823      	ldr	r3, [r4, #0]
 800bf90:	6922      	ldr	r2, [r4, #16]
 800bf92:	f003 0306 	and.w	r3, r3, #6
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	bf14      	ite	ne
 800bf9a:	2500      	movne	r5, #0
 800bf9c:	6833      	ldreq	r3, [r6, #0]
 800bf9e:	f04f 0600 	mov.w	r6, #0
 800bfa2:	bf08      	it	eq
 800bfa4:	68e5      	ldreq	r5, [r4, #12]
 800bfa6:	f104 041a 	add.w	r4, r4, #26
 800bfaa:	bf08      	it	eq
 800bfac:	1aed      	subeq	r5, r5, r3
 800bfae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bfb2:	bf08      	it	eq
 800bfb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	bfc4      	itt	gt
 800bfbc:	1a9b      	subgt	r3, r3, r2
 800bfbe:	18ed      	addgt	r5, r5, r3
 800bfc0:	42b5      	cmp	r5, r6
 800bfc2:	d11a      	bne.n	800bffa <_printf_common+0xd2>
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	e008      	b.n	800bfda <_printf_common+0xb2>
 800bfc8:	2301      	movs	r3, #1
 800bfca:	4652      	mov	r2, sl
 800bfcc:	4641      	mov	r1, r8
 800bfce:	4638      	mov	r0, r7
 800bfd0:	47c8      	blx	r9
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	d103      	bne.n	800bfde <_printf_common+0xb6>
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfde:	3501      	adds	r5, #1
 800bfe0:	e7c1      	b.n	800bf66 <_printf_common+0x3e>
 800bfe2:	2030      	movs	r0, #48	@ 0x30
 800bfe4:	18e1      	adds	r1, r4, r3
 800bfe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfea:	1c5a      	adds	r2, r3, #1
 800bfec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bff0:	4422      	add	r2, r4
 800bff2:	3302      	adds	r3, #2
 800bff4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bff8:	e7c2      	b.n	800bf80 <_printf_common+0x58>
 800bffa:	2301      	movs	r3, #1
 800bffc:	4622      	mov	r2, r4
 800bffe:	4641      	mov	r1, r8
 800c000:	4638      	mov	r0, r7
 800c002:	47c8      	blx	r9
 800c004:	3001      	adds	r0, #1
 800c006:	d0e6      	beq.n	800bfd6 <_printf_common+0xae>
 800c008:	3601      	adds	r6, #1
 800c00a:	e7d9      	b.n	800bfc0 <_printf_common+0x98>

0800c00c <_printf_i>:
 800c00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c010:	7e0f      	ldrb	r7, [r1, #24]
 800c012:	4691      	mov	r9, r2
 800c014:	2f78      	cmp	r7, #120	@ 0x78
 800c016:	4680      	mov	r8, r0
 800c018:	460c      	mov	r4, r1
 800c01a:	469a      	mov	sl, r3
 800c01c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c022:	d807      	bhi.n	800c034 <_printf_i+0x28>
 800c024:	2f62      	cmp	r7, #98	@ 0x62
 800c026:	d80a      	bhi.n	800c03e <_printf_i+0x32>
 800c028:	2f00      	cmp	r7, #0
 800c02a:	f000 80d1 	beq.w	800c1d0 <_printf_i+0x1c4>
 800c02e:	2f58      	cmp	r7, #88	@ 0x58
 800c030:	f000 80b8 	beq.w	800c1a4 <_printf_i+0x198>
 800c034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c03c:	e03a      	b.n	800c0b4 <_printf_i+0xa8>
 800c03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c042:	2b15      	cmp	r3, #21
 800c044:	d8f6      	bhi.n	800c034 <_printf_i+0x28>
 800c046:	a101      	add	r1, pc, #4	@ (adr r1, 800c04c <_printf_i+0x40>)
 800c048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c04c:	0800c0a5 	.word	0x0800c0a5
 800c050:	0800c0b9 	.word	0x0800c0b9
 800c054:	0800c035 	.word	0x0800c035
 800c058:	0800c035 	.word	0x0800c035
 800c05c:	0800c035 	.word	0x0800c035
 800c060:	0800c035 	.word	0x0800c035
 800c064:	0800c0b9 	.word	0x0800c0b9
 800c068:	0800c035 	.word	0x0800c035
 800c06c:	0800c035 	.word	0x0800c035
 800c070:	0800c035 	.word	0x0800c035
 800c074:	0800c035 	.word	0x0800c035
 800c078:	0800c1b7 	.word	0x0800c1b7
 800c07c:	0800c0e3 	.word	0x0800c0e3
 800c080:	0800c171 	.word	0x0800c171
 800c084:	0800c035 	.word	0x0800c035
 800c088:	0800c035 	.word	0x0800c035
 800c08c:	0800c1d9 	.word	0x0800c1d9
 800c090:	0800c035 	.word	0x0800c035
 800c094:	0800c0e3 	.word	0x0800c0e3
 800c098:	0800c035 	.word	0x0800c035
 800c09c:	0800c035 	.word	0x0800c035
 800c0a0:	0800c179 	.word	0x0800c179
 800c0a4:	6833      	ldr	r3, [r6, #0]
 800c0a6:	1d1a      	adds	r2, r3, #4
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6032      	str	r2, [r6, #0]
 800c0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e09c      	b.n	800c1f2 <_printf_i+0x1e6>
 800c0b8:	6833      	ldr	r3, [r6, #0]
 800c0ba:	6820      	ldr	r0, [r4, #0]
 800c0bc:	1d19      	adds	r1, r3, #4
 800c0be:	6031      	str	r1, [r6, #0]
 800c0c0:	0606      	lsls	r6, r0, #24
 800c0c2:	d501      	bpl.n	800c0c8 <_printf_i+0xbc>
 800c0c4:	681d      	ldr	r5, [r3, #0]
 800c0c6:	e003      	b.n	800c0d0 <_printf_i+0xc4>
 800c0c8:	0645      	lsls	r5, r0, #25
 800c0ca:	d5fb      	bpl.n	800c0c4 <_printf_i+0xb8>
 800c0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0d0:	2d00      	cmp	r5, #0
 800c0d2:	da03      	bge.n	800c0dc <_printf_i+0xd0>
 800c0d4:	232d      	movs	r3, #45	@ 0x2d
 800c0d6:	426d      	negs	r5, r5
 800c0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0dc:	230a      	movs	r3, #10
 800c0de:	4858      	ldr	r0, [pc, #352]	@ (800c240 <_printf_i+0x234>)
 800c0e0:	e011      	b.n	800c106 <_printf_i+0xfa>
 800c0e2:	6821      	ldr	r1, [r4, #0]
 800c0e4:	6833      	ldr	r3, [r6, #0]
 800c0e6:	0608      	lsls	r0, r1, #24
 800c0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0ec:	d402      	bmi.n	800c0f4 <_printf_i+0xe8>
 800c0ee:	0649      	lsls	r1, r1, #25
 800c0f0:	bf48      	it	mi
 800c0f2:	b2ad      	uxthmi	r5, r5
 800c0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0f6:	6033      	str	r3, [r6, #0]
 800c0f8:	bf14      	ite	ne
 800c0fa:	230a      	movne	r3, #10
 800c0fc:	2308      	moveq	r3, #8
 800c0fe:	4850      	ldr	r0, [pc, #320]	@ (800c240 <_printf_i+0x234>)
 800c100:	2100      	movs	r1, #0
 800c102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c106:	6866      	ldr	r6, [r4, #4]
 800c108:	2e00      	cmp	r6, #0
 800c10a:	60a6      	str	r6, [r4, #8]
 800c10c:	db05      	blt.n	800c11a <_printf_i+0x10e>
 800c10e:	6821      	ldr	r1, [r4, #0]
 800c110:	432e      	orrs	r6, r5
 800c112:	f021 0104 	bic.w	r1, r1, #4
 800c116:	6021      	str	r1, [r4, #0]
 800c118:	d04b      	beq.n	800c1b2 <_printf_i+0x1a6>
 800c11a:	4616      	mov	r6, r2
 800c11c:	fbb5 f1f3 	udiv	r1, r5, r3
 800c120:	fb03 5711 	mls	r7, r3, r1, r5
 800c124:	5dc7      	ldrb	r7, [r0, r7]
 800c126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c12a:	462f      	mov	r7, r5
 800c12c:	42bb      	cmp	r3, r7
 800c12e:	460d      	mov	r5, r1
 800c130:	d9f4      	bls.n	800c11c <_printf_i+0x110>
 800c132:	2b08      	cmp	r3, #8
 800c134:	d10b      	bne.n	800c14e <_printf_i+0x142>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	07df      	lsls	r7, r3, #31
 800c13a:	d508      	bpl.n	800c14e <_printf_i+0x142>
 800c13c:	6923      	ldr	r3, [r4, #16]
 800c13e:	6861      	ldr	r1, [r4, #4]
 800c140:	4299      	cmp	r1, r3
 800c142:	bfde      	ittt	le
 800c144:	2330      	movle	r3, #48	@ 0x30
 800c146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c14a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c14e:	1b92      	subs	r2, r2, r6
 800c150:	6122      	str	r2, [r4, #16]
 800c152:	464b      	mov	r3, r9
 800c154:	4621      	mov	r1, r4
 800c156:	4640      	mov	r0, r8
 800c158:	f8cd a000 	str.w	sl, [sp]
 800c15c:	aa03      	add	r2, sp, #12
 800c15e:	f7ff fee3 	bl	800bf28 <_printf_common>
 800c162:	3001      	adds	r0, #1
 800c164:	d14a      	bne.n	800c1fc <_printf_i+0x1f0>
 800c166:	f04f 30ff 	mov.w	r0, #4294967295
 800c16a:	b004      	add	sp, #16
 800c16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c170:	6823      	ldr	r3, [r4, #0]
 800c172:	f043 0320 	orr.w	r3, r3, #32
 800c176:	6023      	str	r3, [r4, #0]
 800c178:	2778      	movs	r7, #120	@ 0x78
 800c17a:	4832      	ldr	r0, [pc, #200]	@ (800c244 <_printf_i+0x238>)
 800c17c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	6831      	ldr	r1, [r6, #0]
 800c184:	061f      	lsls	r7, r3, #24
 800c186:	f851 5b04 	ldr.w	r5, [r1], #4
 800c18a:	d402      	bmi.n	800c192 <_printf_i+0x186>
 800c18c:	065f      	lsls	r7, r3, #25
 800c18e:	bf48      	it	mi
 800c190:	b2ad      	uxthmi	r5, r5
 800c192:	6031      	str	r1, [r6, #0]
 800c194:	07d9      	lsls	r1, r3, #31
 800c196:	bf44      	itt	mi
 800c198:	f043 0320 	orrmi.w	r3, r3, #32
 800c19c:	6023      	strmi	r3, [r4, #0]
 800c19e:	b11d      	cbz	r5, 800c1a8 <_printf_i+0x19c>
 800c1a0:	2310      	movs	r3, #16
 800c1a2:	e7ad      	b.n	800c100 <_printf_i+0xf4>
 800c1a4:	4826      	ldr	r0, [pc, #152]	@ (800c240 <_printf_i+0x234>)
 800c1a6:	e7e9      	b.n	800c17c <_printf_i+0x170>
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	f023 0320 	bic.w	r3, r3, #32
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	e7f6      	b.n	800c1a0 <_printf_i+0x194>
 800c1b2:	4616      	mov	r6, r2
 800c1b4:	e7bd      	b.n	800c132 <_printf_i+0x126>
 800c1b6:	6833      	ldr	r3, [r6, #0]
 800c1b8:	6825      	ldr	r5, [r4, #0]
 800c1ba:	1d18      	adds	r0, r3, #4
 800c1bc:	6961      	ldr	r1, [r4, #20]
 800c1be:	6030      	str	r0, [r6, #0]
 800c1c0:	062e      	lsls	r6, r5, #24
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	d501      	bpl.n	800c1ca <_printf_i+0x1be>
 800c1c6:	6019      	str	r1, [r3, #0]
 800c1c8:	e002      	b.n	800c1d0 <_printf_i+0x1c4>
 800c1ca:	0668      	lsls	r0, r5, #25
 800c1cc:	d5fb      	bpl.n	800c1c6 <_printf_i+0x1ba>
 800c1ce:	8019      	strh	r1, [r3, #0]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	4616      	mov	r6, r2
 800c1d4:	6123      	str	r3, [r4, #16]
 800c1d6:	e7bc      	b.n	800c152 <_printf_i+0x146>
 800c1d8:	6833      	ldr	r3, [r6, #0]
 800c1da:	2100      	movs	r1, #0
 800c1dc:	1d1a      	adds	r2, r3, #4
 800c1de:	6032      	str	r2, [r6, #0]
 800c1e0:	681e      	ldr	r6, [r3, #0]
 800c1e2:	6862      	ldr	r2, [r4, #4]
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	f000 fad1 	bl	800c78c <memchr>
 800c1ea:	b108      	cbz	r0, 800c1f0 <_printf_i+0x1e4>
 800c1ec:	1b80      	subs	r0, r0, r6
 800c1ee:	6060      	str	r0, [r4, #4]
 800c1f0:	6863      	ldr	r3, [r4, #4]
 800c1f2:	6123      	str	r3, [r4, #16]
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1fa:	e7aa      	b.n	800c152 <_printf_i+0x146>
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	4649      	mov	r1, r9
 800c200:	4640      	mov	r0, r8
 800c202:	6923      	ldr	r3, [r4, #16]
 800c204:	47d0      	blx	sl
 800c206:	3001      	adds	r0, #1
 800c208:	d0ad      	beq.n	800c166 <_printf_i+0x15a>
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	079b      	lsls	r3, r3, #30
 800c20e:	d413      	bmi.n	800c238 <_printf_i+0x22c>
 800c210:	68e0      	ldr	r0, [r4, #12]
 800c212:	9b03      	ldr	r3, [sp, #12]
 800c214:	4298      	cmp	r0, r3
 800c216:	bfb8      	it	lt
 800c218:	4618      	movlt	r0, r3
 800c21a:	e7a6      	b.n	800c16a <_printf_i+0x15e>
 800c21c:	2301      	movs	r3, #1
 800c21e:	4632      	mov	r2, r6
 800c220:	4649      	mov	r1, r9
 800c222:	4640      	mov	r0, r8
 800c224:	47d0      	blx	sl
 800c226:	3001      	adds	r0, #1
 800c228:	d09d      	beq.n	800c166 <_printf_i+0x15a>
 800c22a:	3501      	adds	r5, #1
 800c22c:	68e3      	ldr	r3, [r4, #12]
 800c22e:	9903      	ldr	r1, [sp, #12]
 800c230:	1a5b      	subs	r3, r3, r1
 800c232:	42ab      	cmp	r3, r5
 800c234:	dcf2      	bgt.n	800c21c <_printf_i+0x210>
 800c236:	e7eb      	b.n	800c210 <_printf_i+0x204>
 800c238:	2500      	movs	r5, #0
 800c23a:	f104 0619 	add.w	r6, r4, #25
 800c23e:	e7f5      	b.n	800c22c <_printf_i+0x220>
 800c240:	0800e746 	.word	0x0800e746
 800c244:	0800e757 	.word	0x0800e757

0800c248 <_scanf_chars>:
 800c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c24c:	4615      	mov	r5, r2
 800c24e:	688a      	ldr	r2, [r1, #8]
 800c250:	4680      	mov	r8, r0
 800c252:	460c      	mov	r4, r1
 800c254:	b932      	cbnz	r2, 800c264 <_scanf_chars+0x1c>
 800c256:	698a      	ldr	r2, [r1, #24]
 800c258:	2a00      	cmp	r2, #0
 800c25a:	bf14      	ite	ne
 800c25c:	f04f 32ff 	movne.w	r2, #4294967295
 800c260:	2201      	moveq	r2, #1
 800c262:	608a      	str	r2, [r1, #8]
 800c264:	2700      	movs	r7, #0
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800c2f8 <_scanf_chars+0xb0>
 800c26c:	06d1      	lsls	r1, r2, #27
 800c26e:	bf5f      	itttt	pl
 800c270:	681a      	ldrpl	r2, [r3, #0]
 800c272:	1d11      	addpl	r1, r2, #4
 800c274:	6019      	strpl	r1, [r3, #0]
 800c276:	6816      	ldrpl	r6, [r2, #0]
 800c278:	69a0      	ldr	r0, [r4, #24]
 800c27a:	b188      	cbz	r0, 800c2a0 <_scanf_chars+0x58>
 800c27c:	2801      	cmp	r0, #1
 800c27e:	d107      	bne.n	800c290 <_scanf_chars+0x48>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	781a      	ldrb	r2, [r3, #0]
 800c284:	6963      	ldr	r3, [r4, #20]
 800c286:	5c9b      	ldrb	r3, [r3, r2]
 800c288:	b953      	cbnz	r3, 800c2a0 <_scanf_chars+0x58>
 800c28a:	2f00      	cmp	r7, #0
 800c28c:	d031      	beq.n	800c2f2 <_scanf_chars+0xaa>
 800c28e:	e022      	b.n	800c2d6 <_scanf_chars+0x8e>
 800c290:	2802      	cmp	r0, #2
 800c292:	d120      	bne.n	800c2d6 <_scanf_chars+0x8e>
 800c294:	682b      	ldr	r3, [r5, #0]
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c29c:	071b      	lsls	r3, r3, #28
 800c29e:	d41a      	bmi.n	800c2d6 <_scanf_chars+0x8e>
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	3701      	adds	r7, #1
 800c2a4:	06da      	lsls	r2, r3, #27
 800c2a6:	bf5e      	ittt	pl
 800c2a8:	682b      	ldrpl	r3, [r5, #0]
 800c2aa:	781b      	ldrbpl	r3, [r3, #0]
 800c2ac:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c2b0:	682a      	ldr	r2, [r5, #0]
 800c2b2:	686b      	ldr	r3, [r5, #4]
 800c2b4:	3201      	adds	r2, #1
 800c2b6:	602a      	str	r2, [r5, #0]
 800c2b8:	68a2      	ldr	r2, [r4, #8]
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	3a01      	subs	r2, #1
 800c2be:	606b      	str	r3, [r5, #4]
 800c2c0:	60a2      	str	r2, [r4, #8]
 800c2c2:	b142      	cbz	r2, 800c2d6 <_scanf_chars+0x8e>
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	dcd7      	bgt.n	800c278 <_scanf_chars+0x30>
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c2d0:	4798      	blx	r3
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d0d0      	beq.n	800c278 <_scanf_chars+0x30>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	f013 0310 	ands.w	r3, r3, #16
 800c2dc:	d105      	bne.n	800c2ea <_scanf_chars+0xa2>
 800c2de:	68e2      	ldr	r2, [r4, #12]
 800c2e0:	3201      	adds	r2, #1
 800c2e2:	60e2      	str	r2, [r4, #12]
 800c2e4:	69a2      	ldr	r2, [r4, #24]
 800c2e6:	b102      	cbz	r2, 800c2ea <_scanf_chars+0xa2>
 800c2e8:	7033      	strb	r3, [r6, #0]
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	443b      	add	r3, r7
 800c2f0:	6123      	str	r3, [r4, #16]
 800c2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f6:	bf00      	nop
 800c2f8:	0800e8f9 	.word	0x0800e8f9

0800c2fc <_scanf_i>:
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	460c      	mov	r4, r1
 800c302:	4698      	mov	r8, r3
 800c304:	4b72      	ldr	r3, [pc, #456]	@ (800c4d0 <_scanf_i+0x1d4>)
 800c306:	b087      	sub	sp, #28
 800c308:	4682      	mov	sl, r0
 800c30a:	4616      	mov	r6, r2
 800c30c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c310:	ab03      	add	r3, sp, #12
 800c312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c316:	4b6f      	ldr	r3, [pc, #444]	@ (800c4d4 <_scanf_i+0x1d8>)
 800c318:	69a1      	ldr	r1, [r4, #24]
 800c31a:	4a6f      	ldr	r2, [pc, #444]	@ (800c4d8 <_scanf_i+0x1dc>)
 800c31c:	4627      	mov	r7, r4
 800c31e:	2903      	cmp	r1, #3
 800c320:	bf08      	it	eq
 800c322:	461a      	moveq	r2, r3
 800c324:	68a3      	ldr	r3, [r4, #8]
 800c326:	9201      	str	r2, [sp, #4]
 800c328:	1e5a      	subs	r2, r3, #1
 800c32a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c32e:	bf81      	itttt	hi
 800c330:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c334:	eb03 0905 	addhi.w	r9, r3, r5
 800c338:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c33c:	60a3      	strhi	r3, [r4, #8]
 800c33e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c342:	bf98      	it	ls
 800c344:	f04f 0900 	movls.w	r9, #0
 800c348:	463d      	mov	r5, r7
 800c34a:	f04f 0b00 	mov.w	fp, #0
 800c34e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c352:	6023      	str	r3, [r4, #0]
 800c354:	6831      	ldr	r1, [r6, #0]
 800c356:	ab03      	add	r3, sp, #12
 800c358:	2202      	movs	r2, #2
 800c35a:	7809      	ldrb	r1, [r1, #0]
 800c35c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c360:	f000 fa14 	bl	800c78c <memchr>
 800c364:	b328      	cbz	r0, 800c3b2 <_scanf_i+0xb6>
 800c366:	f1bb 0f01 	cmp.w	fp, #1
 800c36a:	d159      	bne.n	800c420 <_scanf_i+0x124>
 800c36c:	6862      	ldr	r2, [r4, #4]
 800c36e:	b92a      	cbnz	r2, 800c37c <_scanf_i+0x80>
 800c370:	2108      	movs	r1, #8
 800c372:	6822      	ldr	r2, [r4, #0]
 800c374:	6061      	str	r1, [r4, #4]
 800c376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c37a:	6022      	str	r2, [r4, #0]
 800c37c:	6822      	ldr	r2, [r4, #0]
 800c37e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c382:	6022      	str	r2, [r4, #0]
 800c384:	68a2      	ldr	r2, [r4, #8]
 800c386:	1e51      	subs	r1, r2, #1
 800c388:	60a1      	str	r1, [r4, #8]
 800c38a:	b192      	cbz	r2, 800c3b2 <_scanf_i+0xb6>
 800c38c:	6832      	ldr	r2, [r6, #0]
 800c38e:	1c51      	adds	r1, r2, #1
 800c390:	6031      	str	r1, [r6, #0]
 800c392:	7812      	ldrb	r2, [r2, #0]
 800c394:	f805 2b01 	strb.w	r2, [r5], #1
 800c398:	6872      	ldr	r2, [r6, #4]
 800c39a:	3a01      	subs	r2, #1
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	6072      	str	r2, [r6, #4]
 800c3a0:	dc07      	bgt.n	800c3b2 <_scanf_i+0xb6>
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4650      	mov	r0, sl
 800c3a6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c3aa:	4790      	blx	r2
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f040 8085 	bne.w	800c4bc <_scanf_i+0x1c0>
 800c3b2:	f10b 0b01 	add.w	fp, fp, #1
 800c3b6:	f1bb 0f03 	cmp.w	fp, #3
 800c3ba:	d1cb      	bne.n	800c354 <_scanf_i+0x58>
 800c3bc:	6863      	ldr	r3, [r4, #4]
 800c3be:	b90b      	cbnz	r3, 800c3c4 <_scanf_i+0xc8>
 800c3c0:	230a      	movs	r3, #10
 800c3c2:	6063      	str	r3, [r4, #4]
 800c3c4:	6863      	ldr	r3, [r4, #4]
 800c3c6:	4945      	ldr	r1, [pc, #276]	@ (800c4dc <_scanf_i+0x1e0>)
 800c3c8:	6960      	ldr	r0, [r4, #20]
 800c3ca:	1ac9      	subs	r1, r1, r3
 800c3cc:	f000 f930 	bl	800c630 <__sccl>
 800c3d0:	f04f 0b00 	mov.w	fp, #0
 800c3d4:	68a3      	ldr	r3, [r4, #8]
 800c3d6:	6822      	ldr	r2, [r4, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d03d      	beq.n	800c458 <_scanf_i+0x15c>
 800c3dc:	6831      	ldr	r1, [r6, #0]
 800c3de:	6960      	ldr	r0, [r4, #20]
 800c3e0:	f891 c000 	ldrb.w	ip, [r1]
 800c3e4:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d035      	beq.n	800c458 <_scanf_i+0x15c>
 800c3ec:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c3f0:	d124      	bne.n	800c43c <_scanf_i+0x140>
 800c3f2:	0510      	lsls	r0, r2, #20
 800c3f4:	d522      	bpl.n	800c43c <_scanf_i+0x140>
 800c3f6:	f10b 0b01 	add.w	fp, fp, #1
 800c3fa:	f1b9 0f00 	cmp.w	r9, #0
 800c3fe:	d003      	beq.n	800c408 <_scanf_i+0x10c>
 800c400:	3301      	adds	r3, #1
 800c402:	f109 39ff 	add.w	r9, r9, #4294967295
 800c406:	60a3      	str	r3, [r4, #8]
 800c408:	6873      	ldr	r3, [r6, #4]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	6073      	str	r3, [r6, #4]
 800c410:	dd1b      	ble.n	800c44a <_scanf_i+0x14e>
 800c412:	6833      	ldr	r3, [r6, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	6033      	str	r3, [r6, #0]
 800c418:	68a3      	ldr	r3, [r4, #8]
 800c41a:	3b01      	subs	r3, #1
 800c41c:	60a3      	str	r3, [r4, #8]
 800c41e:	e7d9      	b.n	800c3d4 <_scanf_i+0xd8>
 800c420:	f1bb 0f02 	cmp.w	fp, #2
 800c424:	d1ae      	bne.n	800c384 <_scanf_i+0x88>
 800c426:	6822      	ldr	r2, [r4, #0]
 800c428:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c42c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c430:	d1c4      	bne.n	800c3bc <_scanf_i+0xc0>
 800c432:	2110      	movs	r1, #16
 800c434:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c438:	6061      	str	r1, [r4, #4]
 800c43a:	e7a2      	b.n	800c382 <_scanf_i+0x86>
 800c43c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c440:	6022      	str	r2, [r4, #0]
 800c442:	780b      	ldrb	r3, [r1, #0]
 800c444:	f805 3b01 	strb.w	r3, [r5], #1
 800c448:	e7de      	b.n	800c408 <_scanf_i+0x10c>
 800c44a:	4631      	mov	r1, r6
 800c44c:	4650      	mov	r0, sl
 800c44e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c452:	4798      	blx	r3
 800c454:	2800      	cmp	r0, #0
 800c456:	d0df      	beq.n	800c418 <_scanf_i+0x11c>
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	05d9      	lsls	r1, r3, #23
 800c45c:	d50d      	bpl.n	800c47a <_scanf_i+0x17e>
 800c45e:	42bd      	cmp	r5, r7
 800c460:	d909      	bls.n	800c476 <_scanf_i+0x17a>
 800c462:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c466:	4632      	mov	r2, r6
 800c468:	4650      	mov	r0, sl
 800c46a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c46e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c472:	4798      	blx	r3
 800c474:	464d      	mov	r5, r9
 800c476:	42bd      	cmp	r5, r7
 800c478:	d028      	beq.n	800c4cc <_scanf_i+0x1d0>
 800c47a:	6822      	ldr	r2, [r4, #0]
 800c47c:	f012 0210 	ands.w	r2, r2, #16
 800c480:	d113      	bne.n	800c4aa <_scanf_i+0x1ae>
 800c482:	702a      	strb	r2, [r5, #0]
 800c484:	4639      	mov	r1, r7
 800c486:	6863      	ldr	r3, [r4, #4]
 800c488:	4650      	mov	r0, sl
 800c48a:	9e01      	ldr	r6, [sp, #4]
 800c48c:	47b0      	blx	r6
 800c48e:	f8d8 3000 	ldr.w	r3, [r8]
 800c492:	6821      	ldr	r1, [r4, #0]
 800c494:	1d1a      	adds	r2, r3, #4
 800c496:	f8c8 2000 	str.w	r2, [r8]
 800c49a:	f011 0f20 	tst.w	r1, #32
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	d00f      	beq.n	800c4c2 <_scanf_i+0x1c6>
 800c4a2:	6018      	str	r0, [r3, #0]
 800c4a4:	68e3      	ldr	r3, [r4, #12]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	60e3      	str	r3, [r4, #12]
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	6923      	ldr	r3, [r4, #16]
 800c4ae:	1bed      	subs	r5, r5, r7
 800c4b0:	445d      	add	r5, fp
 800c4b2:	442b      	add	r3, r5
 800c4b4:	6123      	str	r3, [r4, #16]
 800c4b6:	b007      	add	sp, #28
 800c4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4bc:	f04f 0b00 	mov.w	fp, #0
 800c4c0:	e7ca      	b.n	800c458 <_scanf_i+0x15c>
 800c4c2:	07ca      	lsls	r2, r1, #31
 800c4c4:	bf4c      	ite	mi
 800c4c6:	8018      	strhmi	r0, [r3, #0]
 800c4c8:	6018      	strpl	r0, [r3, #0]
 800c4ca:	e7eb      	b.n	800c4a4 <_scanf_i+0x1a8>
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	e7f2      	b.n	800c4b6 <_scanf_i+0x1ba>
 800c4d0:	0800e6c4 	.word	0x0800e6c4
 800c4d4:	0800b8d9 	.word	0x0800b8d9
 800c4d8:	0800d8e1 	.word	0x0800d8e1
 800c4dc:	0800e778 	.word	0x0800e778

0800c4e0 <__sflush_r>:
 800c4e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e6:	0716      	lsls	r6, r2, #28
 800c4e8:	4605      	mov	r5, r0
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	d454      	bmi.n	800c598 <__sflush_r+0xb8>
 800c4ee:	684b      	ldr	r3, [r1, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	dc02      	bgt.n	800c4fa <__sflush_r+0x1a>
 800c4f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	dd48      	ble.n	800c58c <__sflush_r+0xac>
 800c4fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4fc:	2e00      	cmp	r6, #0
 800c4fe:	d045      	beq.n	800c58c <__sflush_r+0xac>
 800c500:	2300      	movs	r3, #0
 800c502:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c506:	682f      	ldr	r7, [r5, #0]
 800c508:	6a21      	ldr	r1, [r4, #32]
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	d030      	beq.n	800c570 <__sflush_r+0x90>
 800c50e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	0759      	lsls	r1, r3, #29
 800c514:	d505      	bpl.n	800c522 <__sflush_r+0x42>
 800c516:	6863      	ldr	r3, [r4, #4]
 800c518:	1ad2      	subs	r2, r2, r3
 800c51a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c51c:	b10b      	cbz	r3, 800c522 <__sflush_r+0x42>
 800c51e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c520:	1ad2      	subs	r2, r2, r3
 800c522:	2300      	movs	r3, #0
 800c524:	4628      	mov	r0, r5
 800c526:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c528:	6a21      	ldr	r1, [r4, #32]
 800c52a:	47b0      	blx	r6
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	89a3      	ldrh	r3, [r4, #12]
 800c530:	d106      	bne.n	800c540 <__sflush_r+0x60>
 800c532:	6829      	ldr	r1, [r5, #0]
 800c534:	291d      	cmp	r1, #29
 800c536:	d82b      	bhi.n	800c590 <__sflush_r+0xb0>
 800c538:	4a28      	ldr	r2, [pc, #160]	@ (800c5dc <__sflush_r+0xfc>)
 800c53a:	40ca      	lsrs	r2, r1
 800c53c:	07d6      	lsls	r6, r2, #31
 800c53e:	d527      	bpl.n	800c590 <__sflush_r+0xb0>
 800c540:	2200      	movs	r2, #0
 800c542:	6062      	str	r2, [r4, #4]
 800c544:	6922      	ldr	r2, [r4, #16]
 800c546:	04d9      	lsls	r1, r3, #19
 800c548:	6022      	str	r2, [r4, #0]
 800c54a:	d504      	bpl.n	800c556 <__sflush_r+0x76>
 800c54c:	1c42      	adds	r2, r0, #1
 800c54e:	d101      	bne.n	800c554 <__sflush_r+0x74>
 800c550:	682b      	ldr	r3, [r5, #0]
 800c552:	b903      	cbnz	r3, 800c556 <__sflush_r+0x76>
 800c554:	6560      	str	r0, [r4, #84]	@ 0x54
 800c556:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c558:	602f      	str	r7, [r5, #0]
 800c55a:	b1b9      	cbz	r1, 800c58c <__sflush_r+0xac>
 800c55c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c560:	4299      	cmp	r1, r3
 800c562:	d002      	beq.n	800c56a <__sflush_r+0x8a>
 800c564:	4628      	mov	r0, r5
 800c566:	f7fe fa47 	bl	800a9f8 <_free_r>
 800c56a:	2300      	movs	r3, #0
 800c56c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c56e:	e00d      	b.n	800c58c <__sflush_r+0xac>
 800c570:	2301      	movs	r3, #1
 800c572:	4628      	mov	r0, r5
 800c574:	47b0      	blx	r6
 800c576:	4602      	mov	r2, r0
 800c578:	1c50      	adds	r0, r2, #1
 800c57a:	d1c9      	bne.n	800c510 <__sflush_r+0x30>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0c6      	beq.n	800c510 <__sflush_r+0x30>
 800c582:	2b1d      	cmp	r3, #29
 800c584:	d001      	beq.n	800c58a <__sflush_r+0xaa>
 800c586:	2b16      	cmp	r3, #22
 800c588:	d11d      	bne.n	800c5c6 <__sflush_r+0xe6>
 800c58a:	602f      	str	r7, [r5, #0]
 800c58c:	2000      	movs	r0, #0
 800c58e:	e021      	b.n	800c5d4 <__sflush_r+0xf4>
 800c590:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c594:	b21b      	sxth	r3, r3
 800c596:	e01a      	b.n	800c5ce <__sflush_r+0xee>
 800c598:	690f      	ldr	r7, [r1, #16]
 800c59a:	2f00      	cmp	r7, #0
 800c59c:	d0f6      	beq.n	800c58c <__sflush_r+0xac>
 800c59e:	0793      	lsls	r3, r2, #30
 800c5a0:	bf18      	it	ne
 800c5a2:	2300      	movne	r3, #0
 800c5a4:	680e      	ldr	r6, [r1, #0]
 800c5a6:	bf08      	it	eq
 800c5a8:	694b      	ldreq	r3, [r1, #20]
 800c5aa:	1bf6      	subs	r6, r6, r7
 800c5ac:	600f      	str	r7, [r1, #0]
 800c5ae:	608b      	str	r3, [r1, #8]
 800c5b0:	2e00      	cmp	r6, #0
 800c5b2:	ddeb      	ble.n	800c58c <__sflush_r+0xac>
 800c5b4:	4633      	mov	r3, r6
 800c5b6:	463a      	mov	r2, r7
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	6a21      	ldr	r1, [r4, #32]
 800c5bc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c5c0:	47e0      	blx	ip
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	dc07      	bgt.n	800c5d6 <__sflush_r+0xf6>
 800c5c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d2:	81a3      	strh	r3, [r4, #12]
 800c5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d6:	4407      	add	r7, r0
 800c5d8:	1a36      	subs	r6, r6, r0
 800c5da:	e7e9      	b.n	800c5b0 <__sflush_r+0xd0>
 800c5dc:	20400001 	.word	0x20400001

0800c5e0 <_fflush_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	690b      	ldr	r3, [r1, #16]
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	460c      	mov	r4, r1
 800c5e8:	b913      	cbnz	r3, 800c5f0 <_fflush_r+0x10>
 800c5ea:	2500      	movs	r5, #0
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	bd38      	pop	{r3, r4, r5, pc}
 800c5f0:	b118      	cbz	r0, 800c5fa <_fflush_r+0x1a>
 800c5f2:	6a03      	ldr	r3, [r0, #32]
 800c5f4:	b90b      	cbnz	r3, 800c5fa <_fflush_r+0x1a>
 800c5f6:	f7fe f8b5 	bl	800a764 <__sinit>
 800c5fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d0f3      	beq.n	800c5ea <_fflush_r+0xa>
 800c602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c604:	07d0      	lsls	r0, r2, #31
 800c606:	d404      	bmi.n	800c612 <_fflush_r+0x32>
 800c608:	0599      	lsls	r1, r3, #22
 800c60a:	d402      	bmi.n	800c612 <_fflush_r+0x32>
 800c60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c60e:	f7fe f9ec 	bl	800a9ea <__retarget_lock_acquire_recursive>
 800c612:	4628      	mov	r0, r5
 800c614:	4621      	mov	r1, r4
 800c616:	f7ff ff63 	bl	800c4e0 <__sflush_r>
 800c61a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c61c:	4605      	mov	r5, r0
 800c61e:	07da      	lsls	r2, r3, #31
 800c620:	d4e4      	bmi.n	800c5ec <_fflush_r+0xc>
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	059b      	lsls	r3, r3, #22
 800c626:	d4e1      	bmi.n	800c5ec <_fflush_r+0xc>
 800c628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c62a:	f7fe f9df 	bl	800a9ec <__retarget_lock_release_recursive>
 800c62e:	e7dd      	b.n	800c5ec <_fflush_r+0xc>

0800c630 <__sccl>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	780b      	ldrb	r3, [r1, #0]
 800c634:	4604      	mov	r4, r0
 800c636:	2b5e      	cmp	r3, #94	@ 0x5e
 800c638:	bf0b      	itete	eq
 800c63a:	784b      	ldrbeq	r3, [r1, #1]
 800c63c:	1c4a      	addne	r2, r1, #1
 800c63e:	1c8a      	addeq	r2, r1, #2
 800c640:	2100      	movne	r1, #0
 800c642:	bf08      	it	eq
 800c644:	2101      	moveq	r1, #1
 800c646:	3801      	subs	r0, #1
 800c648:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c64c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c650:	42a8      	cmp	r0, r5
 800c652:	d1fb      	bne.n	800c64c <__sccl+0x1c>
 800c654:	b90b      	cbnz	r3, 800c65a <__sccl+0x2a>
 800c656:	1e50      	subs	r0, r2, #1
 800c658:	bd70      	pop	{r4, r5, r6, pc}
 800c65a:	f081 0101 	eor.w	r1, r1, #1
 800c65e:	4610      	mov	r0, r2
 800c660:	54e1      	strb	r1, [r4, r3]
 800c662:	4602      	mov	r2, r0
 800c664:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c668:	2d2d      	cmp	r5, #45	@ 0x2d
 800c66a:	d005      	beq.n	800c678 <__sccl+0x48>
 800c66c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c66e:	d016      	beq.n	800c69e <__sccl+0x6e>
 800c670:	2d00      	cmp	r5, #0
 800c672:	d0f1      	beq.n	800c658 <__sccl+0x28>
 800c674:	462b      	mov	r3, r5
 800c676:	e7f2      	b.n	800c65e <__sccl+0x2e>
 800c678:	7846      	ldrb	r6, [r0, #1]
 800c67a:	2e5d      	cmp	r6, #93	@ 0x5d
 800c67c:	d0fa      	beq.n	800c674 <__sccl+0x44>
 800c67e:	42b3      	cmp	r3, r6
 800c680:	dcf8      	bgt.n	800c674 <__sccl+0x44>
 800c682:	461a      	mov	r2, r3
 800c684:	3002      	adds	r0, #2
 800c686:	3201      	adds	r2, #1
 800c688:	4296      	cmp	r6, r2
 800c68a:	54a1      	strb	r1, [r4, r2]
 800c68c:	dcfb      	bgt.n	800c686 <__sccl+0x56>
 800c68e:	1af2      	subs	r2, r6, r3
 800c690:	3a01      	subs	r2, #1
 800c692:	42b3      	cmp	r3, r6
 800c694:	bfa8      	it	ge
 800c696:	2200      	movge	r2, #0
 800c698:	1c5d      	adds	r5, r3, #1
 800c69a:	18ab      	adds	r3, r5, r2
 800c69c:	e7e1      	b.n	800c662 <__sccl+0x32>
 800c69e:	4610      	mov	r0, r2
 800c6a0:	e7da      	b.n	800c658 <__sccl+0x28>

0800c6a2 <__submore>:
 800c6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c6aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6ae:	4299      	cmp	r1, r3
 800c6b0:	d11b      	bne.n	800c6ea <__submore+0x48>
 800c6b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c6b6:	f7fe fa09 	bl	800aacc <_malloc_r>
 800c6ba:	b918      	cbnz	r0, 800c6c4 <__submore+0x22>
 800c6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c6ca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c6ce:	6360      	str	r0, [r4, #52]	@ 0x34
 800c6d0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c6d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c6d8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c6dc:	7043      	strb	r3, [r0, #1]
 800c6de:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c6e2:	7003      	strb	r3, [r0, #0]
 800c6e4:	6020      	str	r0, [r4, #0]
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	e7ea      	b.n	800c6c0 <__submore+0x1e>
 800c6ea:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c6ec:	0077      	lsls	r7, r6, #1
 800c6ee:	463a      	mov	r2, r7
 800c6f0:	f001 f85a 	bl	800d7a8 <_realloc_r>
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d0e0      	beq.n	800c6bc <__submore+0x1a>
 800c6fa:	eb00 0806 	add.w	r8, r0, r6
 800c6fe:	4601      	mov	r1, r0
 800c700:	4632      	mov	r2, r6
 800c702:	4640      	mov	r0, r8
 800c704:	f000 f850 	bl	800c7a8 <memcpy>
 800c708:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c70c:	f8c4 8000 	str.w	r8, [r4]
 800c710:	e7e9      	b.n	800c6e6 <__submore+0x44>

0800c712 <memmove>:
 800c712:	4288      	cmp	r0, r1
 800c714:	b510      	push	{r4, lr}
 800c716:	eb01 0402 	add.w	r4, r1, r2
 800c71a:	d902      	bls.n	800c722 <memmove+0x10>
 800c71c:	4284      	cmp	r4, r0
 800c71e:	4623      	mov	r3, r4
 800c720:	d807      	bhi.n	800c732 <memmove+0x20>
 800c722:	1e43      	subs	r3, r0, #1
 800c724:	42a1      	cmp	r1, r4
 800c726:	d008      	beq.n	800c73a <memmove+0x28>
 800c728:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c72c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c730:	e7f8      	b.n	800c724 <memmove+0x12>
 800c732:	4601      	mov	r1, r0
 800c734:	4402      	add	r2, r0
 800c736:	428a      	cmp	r2, r1
 800c738:	d100      	bne.n	800c73c <memmove+0x2a>
 800c73a:	bd10      	pop	{r4, pc}
 800c73c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c740:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c744:	e7f7      	b.n	800c736 <memmove+0x24>

0800c746 <strncmp>:
 800c746:	b510      	push	{r4, lr}
 800c748:	b16a      	cbz	r2, 800c766 <strncmp+0x20>
 800c74a:	3901      	subs	r1, #1
 800c74c:	1884      	adds	r4, r0, r2
 800c74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c752:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c756:	429a      	cmp	r2, r3
 800c758:	d103      	bne.n	800c762 <strncmp+0x1c>
 800c75a:	42a0      	cmp	r0, r4
 800c75c:	d001      	beq.n	800c762 <strncmp+0x1c>
 800c75e:	2a00      	cmp	r2, #0
 800c760:	d1f5      	bne.n	800c74e <strncmp+0x8>
 800c762:	1ad0      	subs	r0, r2, r3
 800c764:	bd10      	pop	{r4, pc}
 800c766:	4610      	mov	r0, r2
 800c768:	e7fc      	b.n	800c764 <strncmp+0x1e>
	...

0800c76c <_sbrk_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	2300      	movs	r3, #0
 800c770:	4d05      	ldr	r5, [pc, #20]	@ (800c788 <_sbrk_r+0x1c>)
 800c772:	4604      	mov	r4, r0
 800c774:	4608      	mov	r0, r1
 800c776:	602b      	str	r3, [r5, #0]
 800c778:	f7f6 f856 	bl	8002828 <_sbrk>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d102      	bne.n	800c786 <_sbrk_r+0x1a>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	b103      	cbz	r3, 800c786 <_sbrk_r+0x1a>
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	2000171c 	.word	0x2000171c

0800c78c <memchr>:
 800c78c:	4603      	mov	r3, r0
 800c78e:	b510      	push	{r4, lr}
 800c790:	b2c9      	uxtb	r1, r1
 800c792:	4402      	add	r2, r0
 800c794:	4293      	cmp	r3, r2
 800c796:	4618      	mov	r0, r3
 800c798:	d101      	bne.n	800c79e <memchr+0x12>
 800c79a:	2000      	movs	r0, #0
 800c79c:	e003      	b.n	800c7a6 <memchr+0x1a>
 800c79e:	7804      	ldrb	r4, [r0, #0]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	428c      	cmp	r4, r1
 800c7a4:	d1f6      	bne.n	800c794 <memchr+0x8>
 800c7a6:	bd10      	pop	{r4, pc}

0800c7a8 <memcpy>:
 800c7a8:	440a      	add	r2, r1
 800c7aa:	4291      	cmp	r1, r2
 800c7ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7b0:	d100      	bne.n	800c7b4 <memcpy+0xc>
 800c7b2:	4770      	bx	lr
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ba:	4291      	cmp	r1, r2
 800c7bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7c0:	d1f9      	bne.n	800c7b6 <memcpy+0xe>
 800c7c2:	bd10      	pop	{r4, pc}

0800c7c4 <nan>:
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	4901      	ldr	r1, [pc, #4]	@ (800c7cc <nan+0x8>)
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	7ff80000 	.word	0x7ff80000

0800c7d0 <rshift>:
 800c7d0:	6903      	ldr	r3, [r0, #16]
 800c7d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7da:	f100 0414 	add.w	r4, r0, #20
 800c7de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7e2:	dd46      	ble.n	800c872 <rshift+0xa2>
 800c7e4:	f011 011f 	ands.w	r1, r1, #31
 800c7e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7f0:	d10c      	bne.n	800c80c <rshift+0x3c>
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	f100 0710 	add.w	r7, r0, #16
 800c7f8:	42b1      	cmp	r1, r6
 800c7fa:	d335      	bcc.n	800c868 <rshift+0x98>
 800c7fc:	1a9b      	subs	r3, r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	1eea      	subs	r2, r5, #3
 800c802:	4296      	cmp	r6, r2
 800c804:	bf38      	it	cc
 800c806:	2300      	movcc	r3, #0
 800c808:	4423      	add	r3, r4
 800c80a:	e015      	b.n	800c838 <rshift+0x68>
 800c80c:	46a1      	mov	r9, r4
 800c80e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c812:	f1c1 0820 	rsb	r8, r1, #32
 800c816:	40cf      	lsrs	r7, r1
 800c818:	f105 0e04 	add.w	lr, r5, #4
 800c81c:	4576      	cmp	r6, lr
 800c81e:	46f4      	mov	ip, lr
 800c820:	d816      	bhi.n	800c850 <rshift+0x80>
 800c822:	1a9a      	subs	r2, r3, r2
 800c824:	0092      	lsls	r2, r2, #2
 800c826:	3a04      	subs	r2, #4
 800c828:	3501      	adds	r5, #1
 800c82a:	42ae      	cmp	r6, r5
 800c82c:	bf38      	it	cc
 800c82e:	2200      	movcc	r2, #0
 800c830:	18a3      	adds	r3, r4, r2
 800c832:	50a7      	str	r7, [r4, r2]
 800c834:	b107      	cbz	r7, 800c838 <rshift+0x68>
 800c836:	3304      	adds	r3, #4
 800c838:	42a3      	cmp	r3, r4
 800c83a:	eba3 0204 	sub.w	r2, r3, r4
 800c83e:	bf08      	it	eq
 800c840:	2300      	moveq	r3, #0
 800c842:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c846:	6102      	str	r2, [r0, #16]
 800c848:	bf08      	it	eq
 800c84a:	6143      	streq	r3, [r0, #20]
 800c84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c850:	f8dc c000 	ldr.w	ip, [ip]
 800c854:	fa0c fc08 	lsl.w	ip, ip, r8
 800c858:	ea4c 0707 	orr.w	r7, ip, r7
 800c85c:	f849 7b04 	str.w	r7, [r9], #4
 800c860:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c864:	40cf      	lsrs	r7, r1
 800c866:	e7d9      	b.n	800c81c <rshift+0x4c>
 800c868:	f851 cb04 	ldr.w	ip, [r1], #4
 800c86c:	f847 cf04 	str.w	ip, [r7, #4]!
 800c870:	e7c2      	b.n	800c7f8 <rshift+0x28>
 800c872:	4623      	mov	r3, r4
 800c874:	e7e0      	b.n	800c838 <rshift+0x68>

0800c876 <__hexdig_fun>:
 800c876:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c87a:	2b09      	cmp	r3, #9
 800c87c:	d802      	bhi.n	800c884 <__hexdig_fun+0xe>
 800c87e:	3820      	subs	r0, #32
 800c880:	b2c0      	uxtb	r0, r0
 800c882:	4770      	bx	lr
 800c884:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c888:	2b05      	cmp	r3, #5
 800c88a:	d801      	bhi.n	800c890 <__hexdig_fun+0x1a>
 800c88c:	3847      	subs	r0, #71	@ 0x47
 800c88e:	e7f7      	b.n	800c880 <__hexdig_fun+0xa>
 800c890:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c894:	2b05      	cmp	r3, #5
 800c896:	d801      	bhi.n	800c89c <__hexdig_fun+0x26>
 800c898:	3827      	subs	r0, #39	@ 0x27
 800c89a:	e7f1      	b.n	800c880 <__hexdig_fun+0xa>
 800c89c:	2000      	movs	r0, #0
 800c89e:	4770      	bx	lr

0800c8a0 <__gethex>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	468a      	mov	sl, r1
 800c8a6:	4690      	mov	r8, r2
 800c8a8:	b085      	sub	sp, #20
 800c8aa:	9302      	str	r3, [sp, #8]
 800c8ac:	680b      	ldr	r3, [r1, #0]
 800c8ae:	9001      	str	r0, [sp, #4]
 800c8b0:	1c9c      	adds	r4, r3, #2
 800c8b2:	46a1      	mov	r9, r4
 800c8b4:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c8b8:	2830      	cmp	r0, #48	@ 0x30
 800c8ba:	d0fa      	beq.n	800c8b2 <__gethex+0x12>
 800c8bc:	eba9 0303 	sub.w	r3, r9, r3
 800c8c0:	f1a3 0b02 	sub.w	fp, r3, #2
 800c8c4:	f7ff ffd7 	bl	800c876 <__hexdig_fun>
 800c8c8:	4605      	mov	r5, r0
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d168      	bne.n	800c9a0 <__gethex+0x100>
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	4648      	mov	r0, r9
 800c8d2:	499f      	ldr	r1, [pc, #636]	@ (800cb50 <__gethex+0x2b0>)
 800c8d4:	f7ff ff37 	bl	800c746 <strncmp>
 800c8d8:	4607      	mov	r7, r0
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d167      	bne.n	800c9ae <__gethex+0x10e>
 800c8de:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c8e2:	4626      	mov	r6, r4
 800c8e4:	f7ff ffc7 	bl	800c876 <__hexdig_fun>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d062      	beq.n	800c9b2 <__gethex+0x112>
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	7818      	ldrb	r0, [r3, #0]
 800c8f0:	4699      	mov	r9, r3
 800c8f2:	2830      	cmp	r0, #48	@ 0x30
 800c8f4:	f103 0301 	add.w	r3, r3, #1
 800c8f8:	d0f9      	beq.n	800c8ee <__gethex+0x4e>
 800c8fa:	f7ff ffbc 	bl	800c876 <__hexdig_fun>
 800c8fe:	fab0 f580 	clz	r5, r0
 800c902:	f04f 0b01 	mov.w	fp, #1
 800c906:	096d      	lsrs	r5, r5, #5
 800c908:	464a      	mov	r2, r9
 800c90a:	4616      	mov	r6, r2
 800c90c:	7830      	ldrb	r0, [r6, #0]
 800c90e:	3201      	adds	r2, #1
 800c910:	f7ff ffb1 	bl	800c876 <__hexdig_fun>
 800c914:	2800      	cmp	r0, #0
 800c916:	d1f8      	bne.n	800c90a <__gethex+0x6a>
 800c918:	2201      	movs	r2, #1
 800c91a:	4630      	mov	r0, r6
 800c91c:	498c      	ldr	r1, [pc, #560]	@ (800cb50 <__gethex+0x2b0>)
 800c91e:	f7ff ff12 	bl	800c746 <strncmp>
 800c922:	2800      	cmp	r0, #0
 800c924:	d13f      	bne.n	800c9a6 <__gethex+0x106>
 800c926:	b944      	cbnz	r4, 800c93a <__gethex+0x9a>
 800c928:	1c74      	adds	r4, r6, #1
 800c92a:	4622      	mov	r2, r4
 800c92c:	4616      	mov	r6, r2
 800c92e:	7830      	ldrb	r0, [r6, #0]
 800c930:	3201      	adds	r2, #1
 800c932:	f7ff ffa0 	bl	800c876 <__hexdig_fun>
 800c936:	2800      	cmp	r0, #0
 800c938:	d1f8      	bne.n	800c92c <__gethex+0x8c>
 800c93a:	1ba4      	subs	r4, r4, r6
 800c93c:	00a7      	lsls	r7, r4, #2
 800c93e:	7833      	ldrb	r3, [r6, #0]
 800c940:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c944:	2b50      	cmp	r3, #80	@ 0x50
 800c946:	d13e      	bne.n	800c9c6 <__gethex+0x126>
 800c948:	7873      	ldrb	r3, [r6, #1]
 800c94a:	2b2b      	cmp	r3, #43	@ 0x2b
 800c94c:	d033      	beq.n	800c9b6 <__gethex+0x116>
 800c94e:	2b2d      	cmp	r3, #45	@ 0x2d
 800c950:	d034      	beq.n	800c9bc <__gethex+0x11c>
 800c952:	2400      	movs	r4, #0
 800c954:	1c71      	adds	r1, r6, #1
 800c956:	7808      	ldrb	r0, [r1, #0]
 800c958:	f7ff ff8d 	bl	800c876 <__hexdig_fun>
 800c95c:	1e43      	subs	r3, r0, #1
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b18      	cmp	r3, #24
 800c962:	d830      	bhi.n	800c9c6 <__gethex+0x126>
 800c964:	f1a0 0210 	sub.w	r2, r0, #16
 800c968:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c96c:	f7ff ff83 	bl	800c876 <__hexdig_fun>
 800c970:	f100 3cff 	add.w	ip, r0, #4294967295
 800c974:	fa5f fc8c 	uxtb.w	ip, ip
 800c978:	f1bc 0f18 	cmp.w	ip, #24
 800c97c:	f04f 030a 	mov.w	r3, #10
 800c980:	d91e      	bls.n	800c9c0 <__gethex+0x120>
 800c982:	b104      	cbz	r4, 800c986 <__gethex+0xe6>
 800c984:	4252      	negs	r2, r2
 800c986:	4417      	add	r7, r2
 800c988:	f8ca 1000 	str.w	r1, [sl]
 800c98c:	b1ed      	cbz	r5, 800c9ca <__gethex+0x12a>
 800c98e:	f1bb 0f00 	cmp.w	fp, #0
 800c992:	bf0c      	ite	eq
 800c994:	2506      	moveq	r5, #6
 800c996:	2500      	movne	r5, #0
 800c998:	4628      	mov	r0, r5
 800c99a:	b005      	add	sp, #20
 800c99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a0:	2500      	movs	r5, #0
 800c9a2:	462c      	mov	r4, r5
 800c9a4:	e7b0      	b.n	800c908 <__gethex+0x68>
 800c9a6:	2c00      	cmp	r4, #0
 800c9a8:	d1c7      	bne.n	800c93a <__gethex+0x9a>
 800c9aa:	4627      	mov	r7, r4
 800c9ac:	e7c7      	b.n	800c93e <__gethex+0x9e>
 800c9ae:	464e      	mov	r6, r9
 800c9b0:	462f      	mov	r7, r5
 800c9b2:	2501      	movs	r5, #1
 800c9b4:	e7c3      	b.n	800c93e <__gethex+0x9e>
 800c9b6:	2400      	movs	r4, #0
 800c9b8:	1cb1      	adds	r1, r6, #2
 800c9ba:	e7cc      	b.n	800c956 <__gethex+0xb6>
 800c9bc:	2401      	movs	r4, #1
 800c9be:	e7fb      	b.n	800c9b8 <__gethex+0x118>
 800c9c0:	fb03 0002 	mla	r0, r3, r2, r0
 800c9c4:	e7ce      	b.n	800c964 <__gethex+0xc4>
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	e7de      	b.n	800c988 <__gethex+0xe8>
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	eba6 0309 	sub.w	r3, r6, r9
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	2b07      	cmp	r3, #7
 800c9d4:	dc0a      	bgt.n	800c9ec <__gethex+0x14c>
 800c9d6:	9801      	ldr	r0, [sp, #4]
 800c9d8:	f000 fa46 	bl	800ce68 <_Balloc>
 800c9dc:	4604      	mov	r4, r0
 800c9de:	b940      	cbnz	r0, 800c9f2 <__gethex+0x152>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	21e4      	movs	r1, #228	@ 0xe4
 800c9e4:	4b5b      	ldr	r3, [pc, #364]	@ (800cb54 <__gethex+0x2b4>)
 800c9e6:	485c      	ldr	r0, [pc, #368]	@ (800cb58 <__gethex+0x2b8>)
 800c9e8:	f000 ff8a 	bl	800d900 <__assert_func>
 800c9ec:	3101      	adds	r1, #1
 800c9ee:	105b      	asrs	r3, r3, #1
 800c9f0:	e7ef      	b.n	800c9d2 <__gethex+0x132>
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	f100 0a14 	add.w	sl, r0, #20
 800c9f8:	4655      	mov	r5, sl
 800c9fa:	469b      	mov	fp, r3
 800c9fc:	45b1      	cmp	r9, r6
 800c9fe:	d337      	bcc.n	800ca70 <__gethex+0x1d0>
 800ca00:	f845 bb04 	str.w	fp, [r5], #4
 800ca04:	eba5 050a 	sub.w	r5, r5, sl
 800ca08:	10ad      	asrs	r5, r5, #2
 800ca0a:	6125      	str	r5, [r4, #16]
 800ca0c:	4658      	mov	r0, fp
 800ca0e:	f000 fb1d 	bl	800d04c <__hi0bits>
 800ca12:	016d      	lsls	r5, r5, #5
 800ca14:	f8d8 6000 	ldr.w	r6, [r8]
 800ca18:	1a2d      	subs	r5, r5, r0
 800ca1a:	42b5      	cmp	r5, r6
 800ca1c:	dd54      	ble.n	800cac8 <__gethex+0x228>
 800ca1e:	1bad      	subs	r5, r5, r6
 800ca20:	4629      	mov	r1, r5
 800ca22:	4620      	mov	r0, r4
 800ca24:	f000 fe9f 	bl	800d766 <__any_on>
 800ca28:	4681      	mov	r9, r0
 800ca2a:	b178      	cbz	r0, 800ca4c <__gethex+0x1ac>
 800ca2c:	f04f 0901 	mov.w	r9, #1
 800ca30:	1e6b      	subs	r3, r5, #1
 800ca32:	1159      	asrs	r1, r3, #5
 800ca34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca38:	f003 021f 	and.w	r2, r3, #31
 800ca3c:	fa09 f202 	lsl.w	r2, r9, r2
 800ca40:	420a      	tst	r2, r1
 800ca42:	d003      	beq.n	800ca4c <__gethex+0x1ac>
 800ca44:	454b      	cmp	r3, r9
 800ca46:	dc36      	bgt.n	800cab6 <__gethex+0x216>
 800ca48:	f04f 0902 	mov.w	r9, #2
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f7ff febe 	bl	800c7d0 <rshift>
 800ca54:	442f      	add	r7, r5
 800ca56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca5a:	42bb      	cmp	r3, r7
 800ca5c:	da42      	bge.n	800cae4 <__gethex+0x244>
 800ca5e:	4621      	mov	r1, r4
 800ca60:	9801      	ldr	r0, [sp, #4]
 800ca62:	f000 fa41 	bl	800cee8 <_Bfree>
 800ca66:	2300      	movs	r3, #0
 800ca68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca6a:	25a3      	movs	r5, #163	@ 0xa3
 800ca6c:	6013      	str	r3, [r2, #0]
 800ca6e:	e793      	b.n	800c998 <__gethex+0xf8>
 800ca70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ca74:	2a2e      	cmp	r2, #46	@ 0x2e
 800ca76:	d012      	beq.n	800ca9e <__gethex+0x1fe>
 800ca78:	2b20      	cmp	r3, #32
 800ca7a:	d104      	bne.n	800ca86 <__gethex+0x1e6>
 800ca7c:	f845 bb04 	str.w	fp, [r5], #4
 800ca80:	f04f 0b00 	mov.w	fp, #0
 800ca84:	465b      	mov	r3, fp
 800ca86:	7830      	ldrb	r0, [r6, #0]
 800ca88:	9303      	str	r3, [sp, #12]
 800ca8a:	f7ff fef4 	bl	800c876 <__hexdig_fun>
 800ca8e:	9b03      	ldr	r3, [sp, #12]
 800ca90:	f000 000f 	and.w	r0, r0, #15
 800ca94:	4098      	lsls	r0, r3
 800ca96:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca9a:	3304      	adds	r3, #4
 800ca9c:	e7ae      	b.n	800c9fc <__gethex+0x15c>
 800ca9e:	45b1      	cmp	r9, r6
 800caa0:	d8ea      	bhi.n	800ca78 <__gethex+0x1d8>
 800caa2:	2201      	movs	r2, #1
 800caa4:	4630      	mov	r0, r6
 800caa6:	492a      	ldr	r1, [pc, #168]	@ (800cb50 <__gethex+0x2b0>)
 800caa8:	9303      	str	r3, [sp, #12]
 800caaa:	f7ff fe4c 	bl	800c746 <strncmp>
 800caae:	9b03      	ldr	r3, [sp, #12]
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d1e1      	bne.n	800ca78 <__gethex+0x1d8>
 800cab4:	e7a2      	b.n	800c9fc <__gethex+0x15c>
 800cab6:	4620      	mov	r0, r4
 800cab8:	1ea9      	subs	r1, r5, #2
 800caba:	f000 fe54 	bl	800d766 <__any_on>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d0c2      	beq.n	800ca48 <__gethex+0x1a8>
 800cac2:	f04f 0903 	mov.w	r9, #3
 800cac6:	e7c1      	b.n	800ca4c <__gethex+0x1ac>
 800cac8:	da09      	bge.n	800cade <__gethex+0x23e>
 800caca:	1b75      	subs	r5, r6, r5
 800cacc:	4621      	mov	r1, r4
 800cace:	462a      	mov	r2, r5
 800cad0:	9801      	ldr	r0, [sp, #4]
 800cad2:	f000 fc19 	bl	800d308 <__lshift>
 800cad6:	4604      	mov	r4, r0
 800cad8:	1b7f      	subs	r7, r7, r5
 800cada:	f100 0a14 	add.w	sl, r0, #20
 800cade:	f04f 0900 	mov.w	r9, #0
 800cae2:	e7b8      	b.n	800ca56 <__gethex+0x1b6>
 800cae4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cae8:	42bd      	cmp	r5, r7
 800caea:	dd6f      	ble.n	800cbcc <__gethex+0x32c>
 800caec:	1bed      	subs	r5, r5, r7
 800caee:	42ae      	cmp	r6, r5
 800caf0:	dc34      	bgt.n	800cb5c <__gethex+0x2bc>
 800caf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d022      	beq.n	800cb40 <__gethex+0x2a0>
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d024      	beq.n	800cb48 <__gethex+0x2a8>
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d115      	bne.n	800cb2e <__gethex+0x28e>
 800cb02:	42ae      	cmp	r6, r5
 800cb04:	d113      	bne.n	800cb2e <__gethex+0x28e>
 800cb06:	2e01      	cmp	r6, #1
 800cb08:	d10b      	bne.n	800cb22 <__gethex+0x282>
 800cb0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb0e:	9a02      	ldr	r2, [sp, #8]
 800cb10:	2562      	movs	r5, #98	@ 0x62
 800cb12:	6013      	str	r3, [r2, #0]
 800cb14:	2301      	movs	r3, #1
 800cb16:	6123      	str	r3, [r4, #16]
 800cb18:	f8ca 3000 	str.w	r3, [sl]
 800cb1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb1e:	601c      	str	r4, [r3, #0]
 800cb20:	e73a      	b.n	800c998 <__gethex+0xf8>
 800cb22:	4620      	mov	r0, r4
 800cb24:	1e71      	subs	r1, r6, #1
 800cb26:	f000 fe1e 	bl	800d766 <__any_on>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	d1ed      	bne.n	800cb0a <__gethex+0x26a>
 800cb2e:	4621      	mov	r1, r4
 800cb30:	9801      	ldr	r0, [sp, #4]
 800cb32:	f000 f9d9 	bl	800cee8 <_Bfree>
 800cb36:	2300      	movs	r3, #0
 800cb38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb3a:	2550      	movs	r5, #80	@ 0x50
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	e72b      	b.n	800c998 <__gethex+0xf8>
 800cb40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d1f3      	bne.n	800cb2e <__gethex+0x28e>
 800cb46:	e7e0      	b.n	800cb0a <__gethex+0x26a>
 800cb48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1dd      	bne.n	800cb0a <__gethex+0x26a>
 800cb4e:	e7ee      	b.n	800cb2e <__gethex+0x28e>
 800cb50:	0800e727 	.word	0x0800e727
 800cb54:	0800e78b 	.word	0x0800e78b
 800cb58:	0800e79c 	.word	0x0800e79c
 800cb5c:	1e6f      	subs	r7, r5, #1
 800cb5e:	f1b9 0f00 	cmp.w	r9, #0
 800cb62:	d130      	bne.n	800cbc6 <__gethex+0x326>
 800cb64:	b127      	cbz	r7, 800cb70 <__gethex+0x2d0>
 800cb66:	4639      	mov	r1, r7
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fdfc 	bl	800d766 <__any_on>
 800cb6e:	4681      	mov	r9, r0
 800cb70:	2301      	movs	r3, #1
 800cb72:	4629      	mov	r1, r5
 800cb74:	1b76      	subs	r6, r6, r5
 800cb76:	2502      	movs	r5, #2
 800cb78:	117a      	asrs	r2, r7, #5
 800cb7a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cb7e:	f007 071f 	and.w	r7, r7, #31
 800cb82:	40bb      	lsls	r3, r7
 800cb84:	4213      	tst	r3, r2
 800cb86:	4620      	mov	r0, r4
 800cb88:	bf18      	it	ne
 800cb8a:	f049 0902 	orrne.w	r9, r9, #2
 800cb8e:	f7ff fe1f 	bl	800c7d0 <rshift>
 800cb92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800cb96:	f1b9 0f00 	cmp.w	r9, #0
 800cb9a:	d047      	beq.n	800cc2c <__gethex+0x38c>
 800cb9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d015      	beq.n	800cbd0 <__gethex+0x330>
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d017      	beq.n	800cbd8 <__gethex+0x338>
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d109      	bne.n	800cbc0 <__gethex+0x320>
 800cbac:	f019 0f02 	tst.w	r9, #2
 800cbb0:	d006      	beq.n	800cbc0 <__gethex+0x320>
 800cbb2:	f8da 3000 	ldr.w	r3, [sl]
 800cbb6:	ea49 0903 	orr.w	r9, r9, r3
 800cbba:	f019 0f01 	tst.w	r9, #1
 800cbbe:	d10e      	bne.n	800cbde <__gethex+0x33e>
 800cbc0:	f045 0510 	orr.w	r5, r5, #16
 800cbc4:	e032      	b.n	800cc2c <__gethex+0x38c>
 800cbc6:	f04f 0901 	mov.w	r9, #1
 800cbca:	e7d1      	b.n	800cb70 <__gethex+0x2d0>
 800cbcc:	2501      	movs	r5, #1
 800cbce:	e7e2      	b.n	800cb96 <__gethex+0x2f6>
 800cbd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbd2:	f1c3 0301 	rsb	r3, r3, #1
 800cbd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d0f0      	beq.n	800cbc0 <__gethex+0x320>
 800cbde:	f04f 0c00 	mov.w	ip, #0
 800cbe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbe6:	f104 0314 	add.w	r3, r4, #20
 800cbea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cbee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cbfc:	d01b      	beq.n	800cc36 <__gethex+0x396>
 800cbfe:	3201      	adds	r2, #1
 800cc00:	6002      	str	r2, [r0, #0]
 800cc02:	2d02      	cmp	r5, #2
 800cc04:	f104 0314 	add.w	r3, r4, #20
 800cc08:	d13c      	bne.n	800cc84 <__gethex+0x3e4>
 800cc0a:	f8d8 2000 	ldr.w	r2, [r8]
 800cc0e:	3a01      	subs	r2, #1
 800cc10:	42b2      	cmp	r2, r6
 800cc12:	d109      	bne.n	800cc28 <__gethex+0x388>
 800cc14:	2201      	movs	r2, #1
 800cc16:	1171      	asrs	r1, r6, #5
 800cc18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc1c:	f006 061f 	and.w	r6, r6, #31
 800cc20:	fa02 f606 	lsl.w	r6, r2, r6
 800cc24:	421e      	tst	r6, r3
 800cc26:	d13a      	bne.n	800cc9e <__gethex+0x3fe>
 800cc28:	f045 0520 	orr.w	r5, r5, #32
 800cc2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc2e:	601c      	str	r4, [r3, #0]
 800cc30:	9b02      	ldr	r3, [sp, #8]
 800cc32:	601f      	str	r7, [r3, #0]
 800cc34:	e6b0      	b.n	800c998 <__gethex+0xf8>
 800cc36:	4299      	cmp	r1, r3
 800cc38:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc3c:	d8d9      	bhi.n	800cbf2 <__gethex+0x352>
 800cc3e:	68a3      	ldr	r3, [r4, #8]
 800cc40:	459b      	cmp	fp, r3
 800cc42:	db17      	blt.n	800cc74 <__gethex+0x3d4>
 800cc44:	6861      	ldr	r1, [r4, #4]
 800cc46:	9801      	ldr	r0, [sp, #4]
 800cc48:	3101      	adds	r1, #1
 800cc4a:	f000 f90d 	bl	800ce68 <_Balloc>
 800cc4e:	4681      	mov	r9, r0
 800cc50:	b918      	cbnz	r0, 800cc5a <__gethex+0x3ba>
 800cc52:	4602      	mov	r2, r0
 800cc54:	2184      	movs	r1, #132	@ 0x84
 800cc56:	4b19      	ldr	r3, [pc, #100]	@ (800ccbc <__gethex+0x41c>)
 800cc58:	e6c5      	b.n	800c9e6 <__gethex+0x146>
 800cc5a:	6922      	ldr	r2, [r4, #16]
 800cc5c:	f104 010c 	add.w	r1, r4, #12
 800cc60:	3202      	adds	r2, #2
 800cc62:	0092      	lsls	r2, r2, #2
 800cc64:	300c      	adds	r0, #12
 800cc66:	f7ff fd9f 	bl	800c7a8 <memcpy>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	9801      	ldr	r0, [sp, #4]
 800cc6e:	f000 f93b 	bl	800cee8 <_Bfree>
 800cc72:	464c      	mov	r4, r9
 800cc74:	6923      	ldr	r3, [r4, #16]
 800cc76:	1c5a      	adds	r2, r3, #1
 800cc78:	6122      	str	r2, [r4, #16]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc80:	615a      	str	r2, [r3, #20]
 800cc82:	e7be      	b.n	800cc02 <__gethex+0x362>
 800cc84:	6922      	ldr	r2, [r4, #16]
 800cc86:	455a      	cmp	r2, fp
 800cc88:	dd0b      	ble.n	800cca2 <__gethex+0x402>
 800cc8a:	2101      	movs	r1, #1
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7ff fd9f 	bl	800c7d0 <rshift>
 800cc92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cc96:	3701      	adds	r7, #1
 800cc98:	42bb      	cmp	r3, r7
 800cc9a:	f6ff aee0 	blt.w	800ca5e <__gethex+0x1be>
 800cc9e:	2501      	movs	r5, #1
 800cca0:	e7c2      	b.n	800cc28 <__gethex+0x388>
 800cca2:	f016 061f 	ands.w	r6, r6, #31
 800cca6:	d0fa      	beq.n	800cc9e <__gethex+0x3fe>
 800cca8:	4453      	add	r3, sl
 800ccaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ccae:	f000 f9cd 	bl	800d04c <__hi0bits>
 800ccb2:	f1c6 0620 	rsb	r6, r6, #32
 800ccb6:	42b0      	cmp	r0, r6
 800ccb8:	dbe7      	blt.n	800cc8a <__gethex+0x3ea>
 800ccba:	e7f0      	b.n	800cc9e <__gethex+0x3fe>
 800ccbc:	0800e78b 	.word	0x0800e78b

0800ccc0 <L_shift>:
 800ccc0:	f1c2 0208 	rsb	r2, r2, #8
 800ccc4:	0092      	lsls	r2, r2, #2
 800ccc6:	b570      	push	{r4, r5, r6, lr}
 800ccc8:	f1c2 0620 	rsb	r6, r2, #32
 800cccc:	6843      	ldr	r3, [r0, #4]
 800ccce:	6804      	ldr	r4, [r0, #0]
 800ccd0:	fa03 f506 	lsl.w	r5, r3, r6
 800ccd4:	432c      	orrs	r4, r5
 800ccd6:	40d3      	lsrs	r3, r2
 800ccd8:	6004      	str	r4, [r0, #0]
 800ccda:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccde:	4288      	cmp	r0, r1
 800cce0:	d3f4      	bcc.n	800cccc <L_shift+0xc>
 800cce2:	bd70      	pop	{r4, r5, r6, pc}

0800cce4 <__match>:
 800cce4:	b530      	push	{r4, r5, lr}
 800cce6:	6803      	ldr	r3, [r0, #0]
 800cce8:	3301      	adds	r3, #1
 800ccea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccee:	b914      	cbnz	r4, 800ccf6 <__match+0x12>
 800ccf0:	6003      	str	r3, [r0, #0]
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	bd30      	pop	{r4, r5, pc}
 800ccf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ccfe:	2d19      	cmp	r5, #25
 800cd00:	bf98      	it	ls
 800cd02:	3220      	addls	r2, #32
 800cd04:	42a2      	cmp	r2, r4
 800cd06:	d0f0      	beq.n	800ccea <__match+0x6>
 800cd08:	2000      	movs	r0, #0
 800cd0a:	e7f3      	b.n	800ccf4 <__match+0x10>

0800cd0c <__hexnan>:
 800cd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd10:	2500      	movs	r5, #0
 800cd12:	680b      	ldr	r3, [r1, #0]
 800cd14:	4682      	mov	sl, r0
 800cd16:	115e      	asrs	r6, r3, #5
 800cd18:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd1c:	f013 031f 	ands.w	r3, r3, #31
 800cd20:	bf18      	it	ne
 800cd22:	3604      	addne	r6, #4
 800cd24:	1f37      	subs	r7, r6, #4
 800cd26:	4690      	mov	r8, r2
 800cd28:	46b9      	mov	r9, r7
 800cd2a:	463c      	mov	r4, r7
 800cd2c:	46ab      	mov	fp, r5
 800cd2e:	b087      	sub	sp, #28
 800cd30:	6801      	ldr	r1, [r0, #0]
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd38:	9502      	str	r5, [sp, #8]
 800cd3a:	784a      	ldrb	r2, [r1, #1]
 800cd3c:	1c4b      	adds	r3, r1, #1
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	b342      	cbz	r2, 800cd94 <__hexnan+0x88>
 800cd42:	4610      	mov	r0, r2
 800cd44:	9105      	str	r1, [sp, #20]
 800cd46:	9204      	str	r2, [sp, #16]
 800cd48:	f7ff fd95 	bl	800c876 <__hexdig_fun>
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d151      	bne.n	800cdf4 <__hexnan+0xe8>
 800cd50:	9a04      	ldr	r2, [sp, #16]
 800cd52:	9905      	ldr	r1, [sp, #20]
 800cd54:	2a20      	cmp	r2, #32
 800cd56:	d818      	bhi.n	800cd8a <__hexnan+0x7e>
 800cd58:	9b02      	ldr	r3, [sp, #8]
 800cd5a:	459b      	cmp	fp, r3
 800cd5c:	dd13      	ble.n	800cd86 <__hexnan+0x7a>
 800cd5e:	454c      	cmp	r4, r9
 800cd60:	d206      	bcs.n	800cd70 <__hexnan+0x64>
 800cd62:	2d07      	cmp	r5, #7
 800cd64:	dc04      	bgt.n	800cd70 <__hexnan+0x64>
 800cd66:	462a      	mov	r2, r5
 800cd68:	4649      	mov	r1, r9
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	f7ff ffa8 	bl	800ccc0 <L_shift>
 800cd70:	4544      	cmp	r4, r8
 800cd72:	d952      	bls.n	800ce1a <__hexnan+0x10e>
 800cd74:	2300      	movs	r3, #0
 800cd76:	f1a4 0904 	sub.w	r9, r4, #4
 800cd7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd7e:	461d      	mov	r5, r3
 800cd80:	464c      	mov	r4, r9
 800cd82:	f8cd b008 	str.w	fp, [sp, #8]
 800cd86:	9903      	ldr	r1, [sp, #12]
 800cd88:	e7d7      	b.n	800cd3a <__hexnan+0x2e>
 800cd8a:	2a29      	cmp	r2, #41	@ 0x29
 800cd8c:	d157      	bne.n	800ce3e <__hexnan+0x132>
 800cd8e:	3102      	adds	r1, #2
 800cd90:	f8ca 1000 	str.w	r1, [sl]
 800cd94:	f1bb 0f00 	cmp.w	fp, #0
 800cd98:	d051      	beq.n	800ce3e <__hexnan+0x132>
 800cd9a:	454c      	cmp	r4, r9
 800cd9c:	d206      	bcs.n	800cdac <__hexnan+0xa0>
 800cd9e:	2d07      	cmp	r5, #7
 800cda0:	dc04      	bgt.n	800cdac <__hexnan+0xa0>
 800cda2:	462a      	mov	r2, r5
 800cda4:	4649      	mov	r1, r9
 800cda6:	4620      	mov	r0, r4
 800cda8:	f7ff ff8a 	bl	800ccc0 <L_shift>
 800cdac:	4544      	cmp	r4, r8
 800cdae:	d936      	bls.n	800ce1e <__hexnan+0x112>
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	f1a8 0204 	sub.w	r2, r8, #4
 800cdb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdba:	429f      	cmp	r7, r3
 800cdbc:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdc0:	d2f9      	bcs.n	800cdb6 <__hexnan+0xaa>
 800cdc2:	1b3b      	subs	r3, r7, r4
 800cdc4:	f023 0303 	bic.w	r3, r3, #3
 800cdc8:	3304      	adds	r3, #4
 800cdca:	3401      	adds	r4, #1
 800cdcc:	3e03      	subs	r6, #3
 800cdce:	42b4      	cmp	r4, r6
 800cdd0:	bf88      	it	hi
 800cdd2:	2304      	movhi	r3, #4
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4443      	add	r3, r8
 800cdd8:	f843 2b04 	str.w	r2, [r3], #4
 800cddc:	429f      	cmp	r7, r3
 800cdde:	d2fb      	bcs.n	800cdd8 <__hexnan+0xcc>
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	b91b      	cbnz	r3, 800cdec <__hexnan+0xe0>
 800cde4:	4547      	cmp	r7, r8
 800cde6:	d128      	bne.n	800ce3a <__hexnan+0x12e>
 800cde8:	2301      	movs	r3, #1
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	2005      	movs	r0, #5
 800cdee:	b007      	add	sp, #28
 800cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	2d08      	cmp	r5, #8
 800cdf8:	f10b 0b01 	add.w	fp, fp, #1
 800cdfc:	dd06      	ble.n	800ce0c <__hexnan+0x100>
 800cdfe:	4544      	cmp	r4, r8
 800ce00:	d9c1      	bls.n	800cd86 <__hexnan+0x7a>
 800ce02:	2300      	movs	r3, #0
 800ce04:	2501      	movs	r5, #1
 800ce06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce0a:	3c04      	subs	r4, #4
 800ce0c:	6822      	ldr	r2, [r4, #0]
 800ce0e:	f000 000f 	and.w	r0, r0, #15
 800ce12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce16:	6020      	str	r0, [r4, #0]
 800ce18:	e7b5      	b.n	800cd86 <__hexnan+0x7a>
 800ce1a:	2508      	movs	r5, #8
 800ce1c:	e7b3      	b.n	800cd86 <__hexnan+0x7a>
 800ce1e:	9b01      	ldr	r3, [sp, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d0dd      	beq.n	800cde0 <__hexnan+0xd4>
 800ce24:	f04f 32ff 	mov.w	r2, #4294967295
 800ce28:	f1c3 0320 	rsb	r3, r3, #32
 800ce2c:	40da      	lsrs	r2, r3
 800ce2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce32:	4013      	ands	r3, r2
 800ce34:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce38:	e7d2      	b.n	800cde0 <__hexnan+0xd4>
 800ce3a:	3f04      	subs	r7, #4
 800ce3c:	e7d0      	b.n	800cde0 <__hexnan+0xd4>
 800ce3e:	2004      	movs	r0, #4
 800ce40:	e7d5      	b.n	800cdee <__hexnan+0xe2>

0800ce42 <__ascii_mbtowc>:
 800ce42:	b082      	sub	sp, #8
 800ce44:	b901      	cbnz	r1, 800ce48 <__ascii_mbtowc+0x6>
 800ce46:	a901      	add	r1, sp, #4
 800ce48:	b142      	cbz	r2, 800ce5c <__ascii_mbtowc+0x1a>
 800ce4a:	b14b      	cbz	r3, 800ce60 <__ascii_mbtowc+0x1e>
 800ce4c:	7813      	ldrb	r3, [r2, #0]
 800ce4e:	600b      	str	r3, [r1, #0]
 800ce50:	7812      	ldrb	r2, [r2, #0]
 800ce52:	1e10      	subs	r0, r2, #0
 800ce54:	bf18      	it	ne
 800ce56:	2001      	movne	r0, #1
 800ce58:	b002      	add	sp, #8
 800ce5a:	4770      	bx	lr
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	e7fb      	b.n	800ce58 <__ascii_mbtowc+0x16>
 800ce60:	f06f 0001 	mvn.w	r0, #1
 800ce64:	e7f8      	b.n	800ce58 <__ascii_mbtowc+0x16>
	...

0800ce68 <_Balloc>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	69c6      	ldr	r6, [r0, #28]
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	460d      	mov	r5, r1
 800ce70:	b976      	cbnz	r6, 800ce90 <_Balloc+0x28>
 800ce72:	2010      	movs	r0, #16
 800ce74:	f000 fd76 	bl	800d964 <malloc>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	61e0      	str	r0, [r4, #28]
 800ce7c:	b920      	cbnz	r0, 800ce88 <_Balloc+0x20>
 800ce7e:	216b      	movs	r1, #107	@ 0x6b
 800ce80:	4b17      	ldr	r3, [pc, #92]	@ (800cee0 <_Balloc+0x78>)
 800ce82:	4818      	ldr	r0, [pc, #96]	@ (800cee4 <_Balloc+0x7c>)
 800ce84:	f000 fd3c 	bl	800d900 <__assert_func>
 800ce88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce8c:	6006      	str	r6, [r0, #0]
 800ce8e:	60c6      	str	r6, [r0, #12]
 800ce90:	69e6      	ldr	r6, [r4, #28]
 800ce92:	68f3      	ldr	r3, [r6, #12]
 800ce94:	b183      	cbz	r3, 800ceb8 <_Balloc+0x50>
 800ce96:	69e3      	ldr	r3, [r4, #28]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce9e:	b9b8      	cbnz	r0, 800ced0 <_Balloc+0x68>
 800cea0:	2101      	movs	r1, #1
 800cea2:	fa01 f605 	lsl.w	r6, r1, r5
 800cea6:	1d72      	adds	r2, r6, #5
 800cea8:	4620      	mov	r0, r4
 800ceaa:	0092      	lsls	r2, r2, #2
 800ceac:	f000 fd46 	bl	800d93c <_calloc_r>
 800ceb0:	b160      	cbz	r0, 800cecc <_Balloc+0x64>
 800ceb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ceb6:	e00e      	b.n	800ced6 <_Balloc+0x6e>
 800ceb8:	2221      	movs	r2, #33	@ 0x21
 800ceba:	2104      	movs	r1, #4
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 fd3d 	bl	800d93c <_calloc_r>
 800cec2:	69e3      	ldr	r3, [r4, #28]
 800cec4:	60f0      	str	r0, [r6, #12]
 800cec6:	68db      	ldr	r3, [r3, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1e4      	bne.n	800ce96 <_Balloc+0x2e>
 800cecc:	2000      	movs	r0, #0
 800cece:	bd70      	pop	{r4, r5, r6, pc}
 800ced0:	6802      	ldr	r2, [r0, #0]
 800ced2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ced6:	2300      	movs	r3, #0
 800ced8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cedc:	e7f7      	b.n	800cece <_Balloc+0x66>
 800cede:	bf00      	nop
 800cee0:	0800e7fc 	.word	0x0800e7fc
 800cee4:	0800e813 	.word	0x0800e813

0800cee8 <_Bfree>:
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	69c6      	ldr	r6, [r0, #28]
 800ceec:	4605      	mov	r5, r0
 800ceee:	460c      	mov	r4, r1
 800cef0:	b976      	cbnz	r6, 800cf10 <_Bfree+0x28>
 800cef2:	2010      	movs	r0, #16
 800cef4:	f000 fd36 	bl	800d964 <malloc>
 800cef8:	4602      	mov	r2, r0
 800cefa:	61e8      	str	r0, [r5, #28]
 800cefc:	b920      	cbnz	r0, 800cf08 <_Bfree+0x20>
 800cefe:	218f      	movs	r1, #143	@ 0x8f
 800cf00:	4b08      	ldr	r3, [pc, #32]	@ (800cf24 <_Bfree+0x3c>)
 800cf02:	4809      	ldr	r0, [pc, #36]	@ (800cf28 <_Bfree+0x40>)
 800cf04:	f000 fcfc 	bl	800d900 <__assert_func>
 800cf08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf0c:	6006      	str	r6, [r0, #0]
 800cf0e:	60c6      	str	r6, [r0, #12]
 800cf10:	b13c      	cbz	r4, 800cf22 <_Bfree+0x3a>
 800cf12:	69eb      	ldr	r3, [r5, #28]
 800cf14:	6862      	ldr	r2, [r4, #4]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf1c:	6021      	str	r1, [r4, #0]
 800cf1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cf22:	bd70      	pop	{r4, r5, r6, pc}
 800cf24:	0800e7fc 	.word	0x0800e7fc
 800cf28:	0800e813 	.word	0x0800e813

0800cf2c <__multadd>:
 800cf2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf30:	4607      	mov	r7, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	461e      	mov	r6, r3
 800cf36:	2000      	movs	r0, #0
 800cf38:	690d      	ldr	r5, [r1, #16]
 800cf3a:	f101 0c14 	add.w	ip, r1, #20
 800cf3e:	f8dc 3000 	ldr.w	r3, [ip]
 800cf42:	3001      	adds	r0, #1
 800cf44:	b299      	uxth	r1, r3
 800cf46:	fb02 6101 	mla	r1, r2, r1, r6
 800cf4a:	0c1e      	lsrs	r6, r3, #16
 800cf4c:	0c0b      	lsrs	r3, r1, #16
 800cf4e:	fb02 3306 	mla	r3, r2, r6, r3
 800cf52:	b289      	uxth	r1, r1
 800cf54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf58:	4285      	cmp	r5, r0
 800cf5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf5e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf62:	dcec      	bgt.n	800cf3e <__multadd+0x12>
 800cf64:	b30e      	cbz	r6, 800cfaa <__multadd+0x7e>
 800cf66:	68a3      	ldr	r3, [r4, #8]
 800cf68:	42ab      	cmp	r3, r5
 800cf6a:	dc19      	bgt.n	800cfa0 <__multadd+0x74>
 800cf6c:	6861      	ldr	r1, [r4, #4]
 800cf6e:	4638      	mov	r0, r7
 800cf70:	3101      	adds	r1, #1
 800cf72:	f7ff ff79 	bl	800ce68 <_Balloc>
 800cf76:	4680      	mov	r8, r0
 800cf78:	b928      	cbnz	r0, 800cf86 <__multadd+0x5a>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	21ba      	movs	r1, #186	@ 0xba
 800cf7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb0 <__multadd+0x84>)
 800cf80:	480c      	ldr	r0, [pc, #48]	@ (800cfb4 <__multadd+0x88>)
 800cf82:	f000 fcbd 	bl	800d900 <__assert_func>
 800cf86:	6922      	ldr	r2, [r4, #16]
 800cf88:	f104 010c 	add.w	r1, r4, #12
 800cf8c:	3202      	adds	r2, #2
 800cf8e:	0092      	lsls	r2, r2, #2
 800cf90:	300c      	adds	r0, #12
 800cf92:	f7ff fc09 	bl	800c7a8 <memcpy>
 800cf96:	4621      	mov	r1, r4
 800cf98:	4638      	mov	r0, r7
 800cf9a:	f7ff ffa5 	bl	800cee8 <_Bfree>
 800cf9e:	4644      	mov	r4, r8
 800cfa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cfa4:	3501      	adds	r5, #1
 800cfa6:	615e      	str	r6, [r3, #20]
 800cfa8:	6125      	str	r5, [r4, #16]
 800cfaa:	4620      	mov	r0, r4
 800cfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfb0:	0800e78b 	.word	0x0800e78b
 800cfb4:	0800e813 	.word	0x0800e813

0800cfb8 <__s2b>:
 800cfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfbc:	4615      	mov	r5, r2
 800cfbe:	2209      	movs	r2, #9
 800cfc0:	461f      	mov	r7, r3
 800cfc2:	3308      	adds	r3, #8
 800cfc4:	460c      	mov	r4, r1
 800cfc6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cfca:	4606      	mov	r6, r0
 800cfcc:	2201      	movs	r2, #1
 800cfce:	2100      	movs	r1, #0
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	db09      	blt.n	800cfe8 <__s2b+0x30>
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f7ff ff47 	bl	800ce68 <_Balloc>
 800cfda:	b940      	cbnz	r0, 800cfee <__s2b+0x36>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	21d3      	movs	r1, #211	@ 0xd3
 800cfe0:	4b18      	ldr	r3, [pc, #96]	@ (800d044 <__s2b+0x8c>)
 800cfe2:	4819      	ldr	r0, [pc, #100]	@ (800d048 <__s2b+0x90>)
 800cfe4:	f000 fc8c 	bl	800d900 <__assert_func>
 800cfe8:	0052      	lsls	r2, r2, #1
 800cfea:	3101      	adds	r1, #1
 800cfec:	e7f0      	b.n	800cfd0 <__s2b+0x18>
 800cfee:	9b08      	ldr	r3, [sp, #32]
 800cff0:	2d09      	cmp	r5, #9
 800cff2:	6143      	str	r3, [r0, #20]
 800cff4:	f04f 0301 	mov.w	r3, #1
 800cff8:	6103      	str	r3, [r0, #16]
 800cffa:	dd16      	ble.n	800d02a <__s2b+0x72>
 800cffc:	f104 0909 	add.w	r9, r4, #9
 800d000:	46c8      	mov	r8, r9
 800d002:	442c      	add	r4, r5
 800d004:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d008:	4601      	mov	r1, r0
 800d00a:	220a      	movs	r2, #10
 800d00c:	4630      	mov	r0, r6
 800d00e:	3b30      	subs	r3, #48	@ 0x30
 800d010:	f7ff ff8c 	bl	800cf2c <__multadd>
 800d014:	45a0      	cmp	r8, r4
 800d016:	d1f5      	bne.n	800d004 <__s2b+0x4c>
 800d018:	f1a5 0408 	sub.w	r4, r5, #8
 800d01c:	444c      	add	r4, r9
 800d01e:	1b2d      	subs	r5, r5, r4
 800d020:	1963      	adds	r3, r4, r5
 800d022:	42bb      	cmp	r3, r7
 800d024:	db04      	blt.n	800d030 <__s2b+0x78>
 800d026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02a:	2509      	movs	r5, #9
 800d02c:	340a      	adds	r4, #10
 800d02e:	e7f6      	b.n	800d01e <__s2b+0x66>
 800d030:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d034:	4601      	mov	r1, r0
 800d036:	220a      	movs	r2, #10
 800d038:	4630      	mov	r0, r6
 800d03a:	3b30      	subs	r3, #48	@ 0x30
 800d03c:	f7ff ff76 	bl	800cf2c <__multadd>
 800d040:	e7ee      	b.n	800d020 <__s2b+0x68>
 800d042:	bf00      	nop
 800d044:	0800e78b 	.word	0x0800e78b
 800d048:	0800e813 	.word	0x0800e813

0800d04c <__hi0bits>:
 800d04c:	4603      	mov	r3, r0
 800d04e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d052:	bf3a      	itte	cc
 800d054:	0403      	lslcc	r3, r0, #16
 800d056:	2010      	movcc	r0, #16
 800d058:	2000      	movcs	r0, #0
 800d05a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d05e:	bf3c      	itt	cc
 800d060:	021b      	lslcc	r3, r3, #8
 800d062:	3008      	addcc	r0, #8
 800d064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d068:	bf3c      	itt	cc
 800d06a:	011b      	lslcc	r3, r3, #4
 800d06c:	3004      	addcc	r0, #4
 800d06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d072:	bf3c      	itt	cc
 800d074:	009b      	lslcc	r3, r3, #2
 800d076:	3002      	addcc	r0, #2
 800d078:	2b00      	cmp	r3, #0
 800d07a:	db05      	blt.n	800d088 <__hi0bits+0x3c>
 800d07c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d080:	f100 0001 	add.w	r0, r0, #1
 800d084:	bf08      	it	eq
 800d086:	2020      	moveq	r0, #32
 800d088:	4770      	bx	lr

0800d08a <__lo0bits>:
 800d08a:	6803      	ldr	r3, [r0, #0]
 800d08c:	4602      	mov	r2, r0
 800d08e:	f013 0007 	ands.w	r0, r3, #7
 800d092:	d00b      	beq.n	800d0ac <__lo0bits+0x22>
 800d094:	07d9      	lsls	r1, r3, #31
 800d096:	d421      	bmi.n	800d0dc <__lo0bits+0x52>
 800d098:	0798      	lsls	r0, r3, #30
 800d09a:	bf49      	itett	mi
 800d09c:	085b      	lsrmi	r3, r3, #1
 800d09e:	089b      	lsrpl	r3, r3, #2
 800d0a0:	2001      	movmi	r0, #1
 800d0a2:	6013      	strmi	r3, [r2, #0]
 800d0a4:	bf5c      	itt	pl
 800d0a6:	2002      	movpl	r0, #2
 800d0a8:	6013      	strpl	r3, [r2, #0]
 800d0aa:	4770      	bx	lr
 800d0ac:	b299      	uxth	r1, r3
 800d0ae:	b909      	cbnz	r1, 800d0b4 <__lo0bits+0x2a>
 800d0b0:	2010      	movs	r0, #16
 800d0b2:	0c1b      	lsrs	r3, r3, #16
 800d0b4:	b2d9      	uxtb	r1, r3
 800d0b6:	b909      	cbnz	r1, 800d0bc <__lo0bits+0x32>
 800d0b8:	3008      	adds	r0, #8
 800d0ba:	0a1b      	lsrs	r3, r3, #8
 800d0bc:	0719      	lsls	r1, r3, #28
 800d0be:	bf04      	itt	eq
 800d0c0:	091b      	lsreq	r3, r3, #4
 800d0c2:	3004      	addeq	r0, #4
 800d0c4:	0799      	lsls	r1, r3, #30
 800d0c6:	bf04      	itt	eq
 800d0c8:	089b      	lsreq	r3, r3, #2
 800d0ca:	3002      	addeq	r0, #2
 800d0cc:	07d9      	lsls	r1, r3, #31
 800d0ce:	d403      	bmi.n	800d0d8 <__lo0bits+0x4e>
 800d0d0:	085b      	lsrs	r3, r3, #1
 800d0d2:	f100 0001 	add.w	r0, r0, #1
 800d0d6:	d003      	beq.n	800d0e0 <__lo0bits+0x56>
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	4770      	bx	lr
 800d0dc:	2000      	movs	r0, #0
 800d0de:	4770      	bx	lr
 800d0e0:	2020      	movs	r0, #32
 800d0e2:	4770      	bx	lr

0800d0e4 <__i2b>:
 800d0e4:	b510      	push	{r4, lr}
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	2101      	movs	r1, #1
 800d0ea:	f7ff febd 	bl	800ce68 <_Balloc>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	b928      	cbnz	r0, 800d0fe <__i2b+0x1a>
 800d0f2:	f240 1145 	movw	r1, #325	@ 0x145
 800d0f6:	4b04      	ldr	r3, [pc, #16]	@ (800d108 <__i2b+0x24>)
 800d0f8:	4804      	ldr	r0, [pc, #16]	@ (800d10c <__i2b+0x28>)
 800d0fa:	f000 fc01 	bl	800d900 <__assert_func>
 800d0fe:	2301      	movs	r3, #1
 800d100:	6144      	str	r4, [r0, #20]
 800d102:	6103      	str	r3, [r0, #16]
 800d104:	bd10      	pop	{r4, pc}
 800d106:	bf00      	nop
 800d108:	0800e78b 	.word	0x0800e78b
 800d10c:	0800e813 	.word	0x0800e813

0800d110 <__multiply>:
 800d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d114:	4617      	mov	r7, r2
 800d116:	690a      	ldr	r2, [r1, #16]
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	4689      	mov	r9, r1
 800d11c:	429a      	cmp	r2, r3
 800d11e:	bfa2      	ittt	ge
 800d120:	463b      	movge	r3, r7
 800d122:	460f      	movge	r7, r1
 800d124:	4699      	movge	r9, r3
 800d126:	693d      	ldr	r5, [r7, #16]
 800d128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	6879      	ldr	r1, [r7, #4]
 800d130:	eb05 060a 	add.w	r6, r5, sl
 800d134:	42b3      	cmp	r3, r6
 800d136:	b085      	sub	sp, #20
 800d138:	bfb8      	it	lt
 800d13a:	3101      	addlt	r1, #1
 800d13c:	f7ff fe94 	bl	800ce68 <_Balloc>
 800d140:	b930      	cbnz	r0, 800d150 <__multiply+0x40>
 800d142:	4602      	mov	r2, r0
 800d144:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d148:	4b40      	ldr	r3, [pc, #256]	@ (800d24c <__multiply+0x13c>)
 800d14a:	4841      	ldr	r0, [pc, #260]	@ (800d250 <__multiply+0x140>)
 800d14c:	f000 fbd8 	bl	800d900 <__assert_func>
 800d150:	f100 0414 	add.w	r4, r0, #20
 800d154:	4623      	mov	r3, r4
 800d156:	2200      	movs	r2, #0
 800d158:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d15c:	4573      	cmp	r3, lr
 800d15e:	d320      	bcc.n	800d1a2 <__multiply+0x92>
 800d160:	f107 0814 	add.w	r8, r7, #20
 800d164:	f109 0114 	add.w	r1, r9, #20
 800d168:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d16c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d170:	9302      	str	r3, [sp, #8]
 800d172:	1beb      	subs	r3, r5, r7
 800d174:	3b15      	subs	r3, #21
 800d176:	f023 0303 	bic.w	r3, r3, #3
 800d17a:	3304      	adds	r3, #4
 800d17c:	3715      	adds	r7, #21
 800d17e:	42bd      	cmp	r5, r7
 800d180:	bf38      	it	cc
 800d182:	2304      	movcc	r3, #4
 800d184:	9301      	str	r3, [sp, #4]
 800d186:	9b02      	ldr	r3, [sp, #8]
 800d188:	9103      	str	r1, [sp, #12]
 800d18a:	428b      	cmp	r3, r1
 800d18c:	d80c      	bhi.n	800d1a8 <__multiply+0x98>
 800d18e:	2e00      	cmp	r6, #0
 800d190:	dd03      	ble.n	800d19a <__multiply+0x8a>
 800d192:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d196:	2b00      	cmp	r3, #0
 800d198:	d055      	beq.n	800d246 <__multiply+0x136>
 800d19a:	6106      	str	r6, [r0, #16]
 800d19c:	b005      	add	sp, #20
 800d19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a2:	f843 2b04 	str.w	r2, [r3], #4
 800d1a6:	e7d9      	b.n	800d15c <__multiply+0x4c>
 800d1a8:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1ac:	f1ba 0f00 	cmp.w	sl, #0
 800d1b0:	d01f      	beq.n	800d1f2 <__multiply+0xe2>
 800d1b2:	46c4      	mov	ip, r8
 800d1b4:	46a1      	mov	r9, r4
 800d1b6:	2700      	movs	r7, #0
 800d1b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1bc:	f8d9 3000 	ldr.w	r3, [r9]
 800d1c0:	fa1f fb82 	uxth.w	fp, r2
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1ca:	443b      	add	r3, r7
 800d1cc:	f8d9 7000 	ldr.w	r7, [r9]
 800d1d0:	0c12      	lsrs	r2, r2, #16
 800d1d2:	0c3f      	lsrs	r7, r7, #16
 800d1d4:	fb0a 7202 	mla	r2, sl, r2, r7
 800d1d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1e2:	4565      	cmp	r5, ip
 800d1e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d1e8:	f849 3b04 	str.w	r3, [r9], #4
 800d1ec:	d8e4      	bhi.n	800d1b8 <__multiply+0xa8>
 800d1ee:	9b01      	ldr	r3, [sp, #4]
 800d1f0:	50e7      	str	r7, [r4, r3]
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	3104      	adds	r1, #4
 800d1f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d1fa:	f1b9 0f00 	cmp.w	r9, #0
 800d1fe:	d020      	beq.n	800d242 <__multiply+0x132>
 800d200:	4647      	mov	r7, r8
 800d202:	46a4      	mov	ip, r4
 800d204:	f04f 0a00 	mov.w	sl, #0
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	f8b7 b000 	ldrh.w	fp, [r7]
 800d20e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d212:	b29b      	uxth	r3, r3
 800d214:	fb09 220b 	mla	r2, r9, fp, r2
 800d218:	4452      	add	r2, sl
 800d21a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d21e:	f84c 3b04 	str.w	r3, [ip], #4
 800d222:	f857 3b04 	ldr.w	r3, [r7], #4
 800d226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d22a:	f8bc 3000 	ldrh.w	r3, [ip]
 800d22e:	42bd      	cmp	r5, r7
 800d230:	fb09 330a 	mla	r3, r9, sl, r3
 800d234:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d23c:	d8e5      	bhi.n	800d20a <__multiply+0xfa>
 800d23e:	9a01      	ldr	r2, [sp, #4]
 800d240:	50a3      	str	r3, [r4, r2]
 800d242:	3404      	adds	r4, #4
 800d244:	e79f      	b.n	800d186 <__multiply+0x76>
 800d246:	3e01      	subs	r6, #1
 800d248:	e7a1      	b.n	800d18e <__multiply+0x7e>
 800d24a:	bf00      	nop
 800d24c:	0800e78b 	.word	0x0800e78b
 800d250:	0800e813 	.word	0x0800e813

0800d254 <__pow5mult>:
 800d254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d258:	4615      	mov	r5, r2
 800d25a:	f012 0203 	ands.w	r2, r2, #3
 800d25e:	4607      	mov	r7, r0
 800d260:	460e      	mov	r6, r1
 800d262:	d007      	beq.n	800d274 <__pow5mult+0x20>
 800d264:	4c25      	ldr	r4, [pc, #148]	@ (800d2fc <__pow5mult+0xa8>)
 800d266:	3a01      	subs	r2, #1
 800d268:	2300      	movs	r3, #0
 800d26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d26e:	f7ff fe5d 	bl	800cf2c <__multadd>
 800d272:	4606      	mov	r6, r0
 800d274:	10ad      	asrs	r5, r5, #2
 800d276:	d03d      	beq.n	800d2f4 <__pow5mult+0xa0>
 800d278:	69fc      	ldr	r4, [r7, #28]
 800d27a:	b97c      	cbnz	r4, 800d29c <__pow5mult+0x48>
 800d27c:	2010      	movs	r0, #16
 800d27e:	f000 fb71 	bl	800d964 <malloc>
 800d282:	4602      	mov	r2, r0
 800d284:	61f8      	str	r0, [r7, #28]
 800d286:	b928      	cbnz	r0, 800d294 <__pow5mult+0x40>
 800d288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d28c:	4b1c      	ldr	r3, [pc, #112]	@ (800d300 <__pow5mult+0xac>)
 800d28e:	481d      	ldr	r0, [pc, #116]	@ (800d304 <__pow5mult+0xb0>)
 800d290:	f000 fb36 	bl	800d900 <__assert_func>
 800d294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d298:	6004      	str	r4, [r0, #0]
 800d29a:	60c4      	str	r4, [r0, #12]
 800d29c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2a4:	b94c      	cbnz	r4, 800d2ba <__pow5mult+0x66>
 800d2a6:	f240 2171 	movw	r1, #625	@ 0x271
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	f7ff ff1a 	bl	800d0e4 <__i2b>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	4604      	mov	r4, r0
 800d2b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2b8:	6003      	str	r3, [r0, #0]
 800d2ba:	f04f 0900 	mov.w	r9, #0
 800d2be:	07eb      	lsls	r3, r5, #31
 800d2c0:	d50a      	bpl.n	800d2d8 <__pow5mult+0x84>
 800d2c2:	4631      	mov	r1, r6
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	f7ff ff22 	bl	800d110 <__multiply>
 800d2cc:	4680      	mov	r8, r0
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	4638      	mov	r0, r7
 800d2d2:	f7ff fe09 	bl	800cee8 <_Bfree>
 800d2d6:	4646      	mov	r6, r8
 800d2d8:	106d      	asrs	r5, r5, #1
 800d2da:	d00b      	beq.n	800d2f4 <__pow5mult+0xa0>
 800d2dc:	6820      	ldr	r0, [r4, #0]
 800d2de:	b938      	cbnz	r0, 800d2f0 <__pow5mult+0x9c>
 800d2e0:	4622      	mov	r2, r4
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4638      	mov	r0, r7
 800d2e6:	f7ff ff13 	bl	800d110 <__multiply>
 800d2ea:	6020      	str	r0, [r4, #0]
 800d2ec:	f8c0 9000 	str.w	r9, [r0]
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	e7e4      	b.n	800d2be <__pow5mult+0x6a>
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2fa:	bf00      	nop
 800d2fc:	0800e9fc 	.word	0x0800e9fc
 800d300:	0800e7fc 	.word	0x0800e7fc
 800d304:	0800e813 	.word	0x0800e813

0800d308 <__lshift>:
 800d308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d30c:	460c      	mov	r4, r1
 800d30e:	4607      	mov	r7, r0
 800d310:	4691      	mov	r9, r2
 800d312:	6923      	ldr	r3, [r4, #16]
 800d314:	6849      	ldr	r1, [r1, #4]
 800d316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d320:	f108 0601 	add.w	r6, r8, #1
 800d324:	42b3      	cmp	r3, r6
 800d326:	db0b      	blt.n	800d340 <__lshift+0x38>
 800d328:	4638      	mov	r0, r7
 800d32a:	f7ff fd9d 	bl	800ce68 <_Balloc>
 800d32e:	4605      	mov	r5, r0
 800d330:	b948      	cbnz	r0, 800d346 <__lshift+0x3e>
 800d332:	4602      	mov	r2, r0
 800d334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d338:	4b27      	ldr	r3, [pc, #156]	@ (800d3d8 <__lshift+0xd0>)
 800d33a:	4828      	ldr	r0, [pc, #160]	@ (800d3dc <__lshift+0xd4>)
 800d33c:	f000 fae0 	bl	800d900 <__assert_func>
 800d340:	3101      	adds	r1, #1
 800d342:	005b      	lsls	r3, r3, #1
 800d344:	e7ee      	b.n	800d324 <__lshift+0x1c>
 800d346:	2300      	movs	r3, #0
 800d348:	f100 0114 	add.w	r1, r0, #20
 800d34c:	f100 0210 	add.w	r2, r0, #16
 800d350:	4618      	mov	r0, r3
 800d352:	4553      	cmp	r3, sl
 800d354:	db33      	blt.n	800d3be <__lshift+0xb6>
 800d356:	6920      	ldr	r0, [r4, #16]
 800d358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d35c:	f104 0314 	add.w	r3, r4, #20
 800d360:	f019 091f 	ands.w	r9, r9, #31
 800d364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d36c:	d02b      	beq.n	800d3c6 <__lshift+0xbe>
 800d36e:	468a      	mov	sl, r1
 800d370:	2200      	movs	r2, #0
 800d372:	f1c9 0e20 	rsb	lr, r9, #32
 800d376:	6818      	ldr	r0, [r3, #0]
 800d378:	fa00 f009 	lsl.w	r0, r0, r9
 800d37c:	4310      	orrs	r0, r2
 800d37e:	f84a 0b04 	str.w	r0, [sl], #4
 800d382:	f853 2b04 	ldr.w	r2, [r3], #4
 800d386:	459c      	cmp	ip, r3
 800d388:	fa22 f20e 	lsr.w	r2, r2, lr
 800d38c:	d8f3      	bhi.n	800d376 <__lshift+0x6e>
 800d38e:	ebac 0304 	sub.w	r3, ip, r4
 800d392:	3b15      	subs	r3, #21
 800d394:	f023 0303 	bic.w	r3, r3, #3
 800d398:	3304      	adds	r3, #4
 800d39a:	f104 0015 	add.w	r0, r4, #21
 800d39e:	4560      	cmp	r0, ip
 800d3a0:	bf88      	it	hi
 800d3a2:	2304      	movhi	r3, #4
 800d3a4:	50ca      	str	r2, [r1, r3]
 800d3a6:	b10a      	cbz	r2, 800d3ac <__lshift+0xa4>
 800d3a8:	f108 0602 	add.w	r6, r8, #2
 800d3ac:	3e01      	subs	r6, #1
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	612e      	str	r6, [r5, #16]
 800d3b4:	f7ff fd98 	bl	800cee8 <_Bfree>
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3be:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	e7c5      	b.n	800d352 <__lshift+0x4a>
 800d3c6:	3904      	subs	r1, #4
 800d3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3cc:	459c      	cmp	ip, r3
 800d3ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3d2:	d8f9      	bhi.n	800d3c8 <__lshift+0xc0>
 800d3d4:	e7ea      	b.n	800d3ac <__lshift+0xa4>
 800d3d6:	bf00      	nop
 800d3d8:	0800e78b 	.word	0x0800e78b
 800d3dc:	0800e813 	.word	0x0800e813

0800d3e0 <__mcmp>:
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	690a      	ldr	r2, [r1, #16]
 800d3e4:	6900      	ldr	r0, [r0, #16]
 800d3e6:	b530      	push	{r4, r5, lr}
 800d3e8:	1a80      	subs	r0, r0, r2
 800d3ea:	d10e      	bne.n	800d40a <__mcmp+0x2a>
 800d3ec:	3314      	adds	r3, #20
 800d3ee:	3114      	adds	r1, #20
 800d3f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d3f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d3f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d400:	4295      	cmp	r5, r2
 800d402:	d003      	beq.n	800d40c <__mcmp+0x2c>
 800d404:	d205      	bcs.n	800d412 <__mcmp+0x32>
 800d406:	f04f 30ff 	mov.w	r0, #4294967295
 800d40a:	bd30      	pop	{r4, r5, pc}
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	d3f3      	bcc.n	800d3f8 <__mcmp+0x18>
 800d410:	e7fb      	b.n	800d40a <__mcmp+0x2a>
 800d412:	2001      	movs	r0, #1
 800d414:	e7f9      	b.n	800d40a <__mcmp+0x2a>
	...

0800d418 <__mdiff>:
 800d418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	4689      	mov	r9, r1
 800d41e:	4606      	mov	r6, r0
 800d420:	4611      	mov	r1, r2
 800d422:	4648      	mov	r0, r9
 800d424:	4614      	mov	r4, r2
 800d426:	f7ff ffdb 	bl	800d3e0 <__mcmp>
 800d42a:	1e05      	subs	r5, r0, #0
 800d42c:	d112      	bne.n	800d454 <__mdiff+0x3c>
 800d42e:	4629      	mov	r1, r5
 800d430:	4630      	mov	r0, r6
 800d432:	f7ff fd19 	bl	800ce68 <_Balloc>
 800d436:	4602      	mov	r2, r0
 800d438:	b928      	cbnz	r0, 800d446 <__mdiff+0x2e>
 800d43a:	f240 2137 	movw	r1, #567	@ 0x237
 800d43e:	4b3e      	ldr	r3, [pc, #248]	@ (800d538 <__mdiff+0x120>)
 800d440:	483e      	ldr	r0, [pc, #248]	@ (800d53c <__mdiff+0x124>)
 800d442:	f000 fa5d 	bl	800d900 <__assert_func>
 800d446:	2301      	movs	r3, #1
 800d448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d44c:	4610      	mov	r0, r2
 800d44e:	b003      	add	sp, #12
 800d450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d454:	bfbc      	itt	lt
 800d456:	464b      	movlt	r3, r9
 800d458:	46a1      	movlt	r9, r4
 800d45a:	4630      	mov	r0, r6
 800d45c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d460:	bfba      	itte	lt
 800d462:	461c      	movlt	r4, r3
 800d464:	2501      	movlt	r5, #1
 800d466:	2500      	movge	r5, #0
 800d468:	f7ff fcfe 	bl	800ce68 <_Balloc>
 800d46c:	4602      	mov	r2, r0
 800d46e:	b918      	cbnz	r0, 800d478 <__mdiff+0x60>
 800d470:	f240 2145 	movw	r1, #581	@ 0x245
 800d474:	4b30      	ldr	r3, [pc, #192]	@ (800d538 <__mdiff+0x120>)
 800d476:	e7e3      	b.n	800d440 <__mdiff+0x28>
 800d478:	f100 0b14 	add.w	fp, r0, #20
 800d47c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d480:	f109 0310 	add.w	r3, r9, #16
 800d484:	60c5      	str	r5, [r0, #12]
 800d486:	f04f 0c00 	mov.w	ip, #0
 800d48a:	f109 0514 	add.w	r5, r9, #20
 800d48e:	46d9      	mov	r9, fp
 800d490:	6926      	ldr	r6, [r4, #16]
 800d492:	f104 0e14 	add.w	lr, r4, #20
 800d496:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d49a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d49e:	9301      	str	r3, [sp, #4]
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4aa:	b281      	uxth	r1, r0
 800d4ac:	9301      	str	r3, [sp, #4]
 800d4ae:	fa1f f38a 	uxth.w	r3, sl
 800d4b2:	1a5b      	subs	r3, r3, r1
 800d4b4:	0c00      	lsrs	r0, r0, #16
 800d4b6:	4463      	add	r3, ip
 800d4b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4c6:	4576      	cmp	r6, lr
 800d4c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4cc:	f849 3b04 	str.w	r3, [r9], #4
 800d4d0:	d8e6      	bhi.n	800d4a0 <__mdiff+0x88>
 800d4d2:	1b33      	subs	r3, r6, r4
 800d4d4:	3b15      	subs	r3, #21
 800d4d6:	f023 0303 	bic.w	r3, r3, #3
 800d4da:	3415      	adds	r4, #21
 800d4dc:	3304      	adds	r3, #4
 800d4de:	42a6      	cmp	r6, r4
 800d4e0:	bf38      	it	cc
 800d4e2:	2304      	movcc	r3, #4
 800d4e4:	441d      	add	r5, r3
 800d4e6:	445b      	add	r3, fp
 800d4e8:	461e      	mov	r6, r3
 800d4ea:	462c      	mov	r4, r5
 800d4ec:	4544      	cmp	r4, r8
 800d4ee:	d30e      	bcc.n	800d50e <__mdiff+0xf6>
 800d4f0:	f108 0103 	add.w	r1, r8, #3
 800d4f4:	1b49      	subs	r1, r1, r5
 800d4f6:	f021 0103 	bic.w	r1, r1, #3
 800d4fa:	3d03      	subs	r5, #3
 800d4fc:	45a8      	cmp	r8, r5
 800d4fe:	bf38      	it	cc
 800d500:	2100      	movcc	r1, #0
 800d502:	440b      	add	r3, r1
 800d504:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d508:	b199      	cbz	r1, 800d532 <__mdiff+0x11a>
 800d50a:	6117      	str	r7, [r2, #16]
 800d50c:	e79e      	b.n	800d44c <__mdiff+0x34>
 800d50e:	46e6      	mov	lr, ip
 800d510:	f854 1b04 	ldr.w	r1, [r4], #4
 800d514:	fa1f fc81 	uxth.w	ip, r1
 800d518:	44f4      	add	ip, lr
 800d51a:	0c08      	lsrs	r0, r1, #16
 800d51c:	4471      	add	r1, lr
 800d51e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d522:	b289      	uxth	r1, r1
 800d524:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d52c:	f846 1b04 	str.w	r1, [r6], #4
 800d530:	e7dc      	b.n	800d4ec <__mdiff+0xd4>
 800d532:	3f01      	subs	r7, #1
 800d534:	e7e6      	b.n	800d504 <__mdiff+0xec>
 800d536:	bf00      	nop
 800d538:	0800e78b 	.word	0x0800e78b
 800d53c:	0800e813 	.word	0x0800e813

0800d540 <__ulp>:
 800d540:	4b0e      	ldr	r3, [pc, #56]	@ (800d57c <__ulp+0x3c>)
 800d542:	400b      	ands	r3, r1
 800d544:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d548:	2b00      	cmp	r3, #0
 800d54a:	dc08      	bgt.n	800d55e <__ulp+0x1e>
 800d54c:	425b      	negs	r3, r3
 800d54e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d552:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d556:	da04      	bge.n	800d562 <__ulp+0x22>
 800d558:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d55c:	4113      	asrs	r3, r2
 800d55e:	2200      	movs	r2, #0
 800d560:	e008      	b.n	800d574 <__ulp+0x34>
 800d562:	f1a2 0314 	sub.w	r3, r2, #20
 800d566:	2b1e      	cmp	r3, #30
 800d568:	bfd6      	itet	le
 800d56a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d56e:	2201      	movgt	r2, #1
 800d570:	40da      	lsrle	r2, r3
 800d572:	2300      	movs	r3, #0
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	4770      	bx	lr
 800d57a:	bf00      	nop
 800d57c:	7ff00000 	.word	0x7ff00000

0800d580 <__b2d>:
 800d580:	6902      	ldr	r2, [r0, #16]
 800d582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d584:	f100 0614 	add.w	r6, r0, #20
 800d588:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800d58c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d590:	4f1e      	ldr	r7, [pc, #120]	@ (800d60c <__b2d+0x8c>)
 800d592:	4620      	mov	r0, r4
 800d594:	f7ff fd5a 	bl	800d04c <__hi0bits>
 800d598:	4603      	mov	r3, r0
 800d59a:	f1c0 0020 	rsb	r0, r0, #32
 800d59e:	2b0a      	cmp	r3, #10
 800d5a0:	f1a2 0504 	sub.w	r5, r2, #4
 800d5a4:	6008      	str	r0, [r1, #0]
 800d5a6:	dc12      	bgt.n	800d5ce <__b2d+0x4e>
 800d5a8:	42ae      	cmp	r6, r5
 800d5aa:	bf2c      	ite	cs
 800d5ac:	2200      	movcs	r2, #0
 800d5ae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d5b2:	f1c3 0c0b 	rsb	ip, r3, #11
 800d5b6:	3315      	adds	r3, #21
 800d5b8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800d5bc:	fa04 f303 	lsl.w	r3, r4, r3
 800d5c0:	fa22 f20c 	lsr.w	r2, r2, ip
 800d5c4:	ea4e 0107 	orr.w	r1, lr, r7
 800d5c8:	431a      	orrs	r2, r3
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5ce:	42ae      	cmp	r6, r5
 800d5d0:	bf36      	itet	cc
 800d5d2:	f1a2 0508 	subcc.w	r5, r2, #8
 800d5d6:	2200      	movcs	r2, #0
 800d5d8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800d5dc:	3b0b      	subs	r3, #11
 800d5de:	d012      	beq.n	800d606 <__b2d+0x86>
 800d5e0:	f1c3 0720 	rsb	r7, r3, #32
 800d5e4:	fa22 f107 	lsr.w	r1, r2, r7
 800d5e8:	409c      	lsls	r4, r3
 800d5ea:	430c      	orrs	r4, r1
 800d5ec:	42b5      	cmp	r5, r6
 800d5ee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800d5f2:	bf94      	ite	ls
 800d5f4:	2400      	movls	r4, #0
 800d5f6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800d5fa:	409a      	lsls	r2, r3
 800d5fc:	40fc      	lsrs	r4, r7
 800d5fe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800d602:	4322      	orrs	r2, r4
 800d604:	e7e1      	b.n	800d5ca <__b2d+0x4a>
 800d606:	ea44 0107 	orr.w	r1, r4, r7
 800d60a:	e7de      	b.n	800d5ca <__b2d+0x4a>
 800d60c:	3ff00000 	.word	0x3ff00000

0800d610 <__d2b>:
 800d610:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d614:	2101      	movs	r1, #1
 800d616:	4690      	mov	r8, r2
 800d618:	4699      	mov	r9, r3
 800d61a:	9e08      	ldr	r6, [sp, #32]
 800d61c:	f7ff fc24 	bl	800ce68 <_Balloc>
 800d620:	4604      	mov	r4, r0
 800d622:	b930      	cbnz	r0, 800d632 <__d2b+0x22>
 800d624:	4602      	mov	r2, r0
 800d626:	f240 310f 	movw	r1, #783	@ 0x30f
 800d62a:	4b23      	ldr	r3, [pc, #140]	@ (800d6b8 <__d2b+0xa8>)
 800d62c:	4823      	ldr	r0, [pc, #140]	@ (800d6bc <__d2b+0xac>)
 800d62e:	f000 f967 	bl	800d900 <__assert_func>
 800d632:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d636:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d63a:	b10d      	cbz	r5, 800d640 <__d2b+0x30>
 800d63c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d640:	9301      	str	r3, [sp, #4]
 800d642:	f1b8 0300 	subs.w	r3, r8, #0
 800d646:	d024      	beq.n	800d692 <__d2b+0x82>
 800d648:	4668      	mov	r0, sp
 800d64a:	9300      	str	r3, [sp, #0]
 800d64c:	f7ff fd1d 	bl	800d08a <__lo0bits>
 800d650:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d654:	b1d8      	cbz	r0, 800d68e <__d2b+0x7e>
 800d656:	f1c0 0320 	rsb	r3, r0, #32
 800d65a:	fa02 f303 	lsl.w	r3, r2, r3
 800d65e:	430b      	orrs	r3, r1
 800d660:	40c2      	lsrs	r2, r0
 800d662:	6163      	str	r3, [r4, #20]
 800d664:	9201      	str	r2, [sp, #4]
 800d666:	9b01      	ldr	r3, [sp, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	bf0c      	ite	eq
 800d66c:	2201      	moveq	r2, #1
 800d66e:	2202      	movne	r2, #2
 800d670:	61a3      	str	r3, [r4, #24]
 800d672:	6122      	str	r2, [r4, #16]
 800d674:	b1ad      	cbz	r5, 800d6a2 <__d2b+0x92>
 800d676:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d67a:	4405      	add	r5, r0
 800d67c:	6035      	str	r5, [r6, #0]
 800d67e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d684:	6018      	str	r0, [r3, #0]
 800d686:	4620      	mov	r0, r4
 800d688:	b002      	add	sp, #8
 800d68a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d68e:	6161      	str	r1, [r4, #20]
 800d690:	e7e9      	b.n	800d666 <__d2b+0x56>
 800d692:	a801      	add	r0, sp, #4
 800d694:	f7ff fcf9 	bl	800d08a <__lo0bits>
 800d698:	9b01      	ldr	r3, [sp, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	6163      	str	r3, [r4, #20]
 800d69e:	3020      	adds	r0, #32
 800d6a0:	e7e7      	b.n	800d672 <__d2b+0x62>
 800d6a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d6a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6aa:	6030      	str	r0, [r6, #0]
 800d6ac:	6918      	ldr	r0, [r3, #16]
 800d6ae:	f7ff fccd 	bl	800d04c <__hi0bits>
 800d6b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6b6:	e7e4      	b.n	800d682 <__d2b+0x72>
 800d6b8:	0800e78b 	.word	0x0800e78b
 800d6bc:	0800e813 	.word	0x0800e813

0800d6c0 <__ratio>:
 800d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	b085      	sub	sp, #20
 800d6c6:	e9cd 1000 	strd	r1, r0, [sp]
 800d6ca:	a902      	add	r1, sp, #8
 800d6cc:	f7ff ff58 	bl	800d580 <__b2d>
 800d6d0:	468b      	mov	fp, r1
 800d6d2:	4606      	mov	r6, r0
 800d6d4:	460f      	mov	r7, r1
 800d6d6:	9800      	ldr	r0, [sp, #0]
 800d6d8:	a903      	add	r1, sp, #12
 800d6da:	f7ff ff51 	bl	800d580 <__b2d>
 800d6de:	460d      	mov	r5, r1
 800d6e0:	9b01      	ldr	r3, [sp, #4]
 800d6e2:	4689      	mov	r9, r1
 800d6e4:	6919      	ldr	r1, [r3, #16]
 800d6e6:	9b00      	ldr	r3, [sp, #0]
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	1ac9      	subs	r1, r1, r3
 800d6f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d6f4:	1a9b      	subs	r3, r3, r2
 800d6f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	bfcd      	iteet	gt
 800d6fe:	463a      	movgt	r2, r7
 800d700:	462a      	movle	r2, r5
 800d702:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d706:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d70a:	bfd8      	it	le
 800d70c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d710:	464b      	mov	r3, r9
 800d712:	4622      	mov	r2, r4
 800d714:	4659      	mov	r1, fp
 800d716:	f7f3 f809 	bl	800072c <__aeabi_ddiv>
 800d71a:	b005      	add	sp, #20
 800d71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d720 <__copybits>:
 800d720:	3901      	subs	r1, #1
 800d722:	b570      	push	{r4, r5, r6, lr}
 800d724:	1149      	asrs	r1, r1, #5
 800d726:	6914      	ldr	r4, [r2, #16]
 800d728:	3101      	adds	r1, #1
 800d72a:	f102 0314 	add.w	r3, r2, #20
 800d72e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d732:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d736:	1f05      	subs	r5, r0, #4
 800d738:	42a3      	cmp	r3, r4
 800d73a:	d30c      	bcc.n	800d756 <__copybits+0x36>
 800d73c:	1aa3      	subs	r3, r4, r2
 800d73e:	3b11      	subs	r3, #17
 800d740:	f023 0303 	bic.w	r3, r3, #3
 800d744:	3211      	adds	r2, #17
 800d746:	42a2      	cmp	r2, r4
 800d748:	bf88      	it	hi
 800d74a:	2300      	movhi	r3, #0
 800d74c:	4418      	add	r0, r3
 800d74e:	2300      	movs	r3, #0
 800d750:	4288      	cmp	r0, r1
 800d752:	d305      	bcc.n	800d760 <__copybits+0x40>
 800d754:	bd70      	pop	{r4, r5, r6, pc}
 800d756:	f853 6b04 	ldr.w	r6, [r3], #4
 800d75a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d75e:	e7eb      	b.n	800d738 <__copybits+0x18>
 800d760:	f840 3b04 	str.w	r3, [r0], #4
 800d764:	e7f4      	b.n	800d750 <__copybits+0x30>

0800d766 <__any_on>:
 800d766:	f100 0214 	add.w	r2, r0, #20
 800d76a:	6900      	ldr	r0, [r0, #16]
 800d76c:	114b      	asrs	r3, r1, #5
 800d76e:	4298      	cmp	r0, r3
 800d770:	b510      	push	{r4, lr}
 800d772:	db11      	blt.n	800d798 <__any_on+0x32>
 800d774:	dd0a      	ble.n	800d78c <__any_on+0x26>
 800d776:	f011 011f 	ands.w	r1, r1, #31
 800d77a:	d007      	beq.n	800d78c <__any_on+0x26>
 800d77c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d780:	fa24 f001 	lsr.w	r0, r4, r1
 800d784:	fa00 f101 	lsl.w	r1, r0, r1
 800d788:	428c      	cmp	r4, r1
 800d78a:	d10b      	bne.n	800d7a4 <__any_on+0x3e>
 800d78c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d790:	4293      	cmp	r3, r2
 800d792:	d803      	bhi.n	800d79c <__any_on+0x36>
 800d794:	2000      	movs	r0, #0
 800d796:	bd10      	pop	{r4, pc}
 800d798:	4603      	mov	r3, r0
 800d79a:	e7f7      	b.n	800d78c <__any_on+0x26>
 800d79c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d7a0:	2900      	cmp	r1, #0
 800d7a2:	d0f5      	beq.n	800d790 <__any_on+0x2a>
 800d7a4:	2001      	movs	r0, #1
 800d7a6:	e7f6      	b.n	800d796 <__any_on+0x30>

0800d7a8 <_realloc_r>:
 800d7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	4614      	mov	r4, r2
 800d7b0:	460d      	mov	r5, r1
 800d7b2:	b921      	cbnz	r1, 800d7be <_realloc_r+0x16>
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ba:	f7fd b987 	b.w	800aacc <_malloc_r>
 800d7be:	b92a      	cbnz	r2, 800d7cc <_realloc_r+0x24>
 800d7c0:	f7fd f91a 	bl	800a9f8 <_free_r>
 800d7c4:	4625      	mov	r5, r4
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7cc:	f000 f8d2 	bl	800d974 <_malloc_usable_size_r>
 800d7d0:	4284      	cmp	r4, r0
 800d7d2:	4606      	mov	r6, r0
 800d7d4:	d802      	bhi.n	800d7dc <_realloc_r+0x34>
 800d7d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7da:	d8f4      	bhi.n	800d7c6 <_realloc_r+0x1e>
 800d7dc:	4621      	mov	r1, r4
 800d7de:	4638      	mov	r0, r7
 800d7e0:	f7fd f974 	bl	800aacc <_malloc_r>
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	b908      	cbnz	r0, 800d7ec <_realloc_r+0x44>
 800d7e8:	4645      	mov	r5, r8
 800d7ea:	e7ec      	b.n	800d7c6 <_realloc_r+0x1e>
 800d7ec:	42b4      	cmp	r4, r6
 800d7ee:	4622      	mov	r2, r4
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	bf28      	it	cs
 800d7f4:	4632      	movcs	r2, r6
 800d7f6:	f7fe ffd7 	bl	800c7a8 <memcpy>
 800d7fa:	4629      	mov	r1, r5
 800d7fc:	4638      	mov	r0, r7
 800d7fe:	f7fd f8fb 	bl	800a9f8 <_free_r>
 800d802:	e7f1      	b.n	800d7e8 <_realloc_r+0x40>

0800d804 <_strtoul_l.isra.0>:
 800d804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d808:	4686      	mov	lr, r0
 800d80a:	460d      	mov	r5, r1
 800d80c:	4e33      	ldr	r6, [pc, #204]	@ (800d8dc <_strtoul_l.isra.0+0xd8>)
 800d80e:	4628      	mov	r0, r5
 800d810:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d814:	5d37      	ldrb	r7, [r6, r4]
 800d816:	f017 0708 	ands.w	r7, r7, #8
 800d81a:	d1f8      	bne.n	800d80e <_strtoul_l.isra.0+0xa>
 800d81c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d81e:	d110      	bne.n	800d842 <_strtoul_l.isra.0+0x3e>
 800d820:	2701      	movs	r7, #1
 800d822:	782c      	ldrb	r4, [r5, #0]
 800d824:	1c85      	adds	r5, r0, #2
 800d826:	f033 0010 	bics.w	r0, r3, #16
 800d82a:	d115      	bne.n	800d858 <_strtoul_l.isra.0+0x54>
 800d82c:	2c30      	cmp	r4, #48	@ 0x30
 800d82e:	d10d      	bne.n	800d84c <_strtoul_l.isra.0+0x48>
 800d830:	7828      	ldrb	r0, [r5, #0]
 800d832:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d836:	2858      	cmp	r0, #88	@ 0x58
 800d838:	d108      	bne.n	800d84c <_strtoul_l.isra.0+0x48>
 800d83a:	786c      	ldrb	r4, [r5, #1]
 800d83c:	3502      	adds	r5, #2
 800d83e:	2310      	movs	r3, #16
 800d840:	e00a      	b.n	800d858 <_strtoul_l.isra.0+0x54>
 800d842:	2c2b      	cmp	r4, #43	@ 0x2b
 800d844:	bf04      	itt	eq
 800d846:	782c      	ldrbeq	r4, [r5, #0]
 800d848:	1c85      	addeq	r5, r0, #2
 800d84a:	e7ec      	b.n	800d826 <_strtoul_l.isra.0+0x22>
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1f6      	bne.n	800d83e <_strtoul_l.isra.0+0x3a>
 800d850:	2c30      	cmp	r4, #48	@ 0x30
 800d852:	bf14      	ite	ne
 800d854:	230a      	movne	r3, #10
 800d856:	2308      	moveq	r3, #8
 800d858:	f04f 38ff 	mov.w	r8, #4294967295
 800d85c:	fbb8 f8f3 	udiv	r8, r8, r3
 800d860:	2600      	movs	r6, #0
 800d862:	fb03 f908 	mul.w	r9, r3, r8
 800d866:	4630      	mov	r0, r6
 800d868:	ea6f 0909 	mvn.w	r9, r9
 800d86c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d870:	f1bc 0f09 	cmp.w	ip, #9
 800d874:	d810      	bhi.n	800d898 <_strtoul_l.isra.0+0x94>
 800d876:	4664      	mov	r4, ip
 800d878:	42a3      	cmp	r3, r4
 800d87a:	dd1e      	ble.n	800d8ba <_strtoul_l.isra.0+0xb6>
 800d87c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d880:	d007      	beq.n	800d892 <_strtoul_l.isra.0+0x8e>
 800d882:	4580      	cmp	r8, r0
 800d884:	d316      	bcc.n	800d8b4 <_strtoul_l.isra.0+0xb0>
 800d886:	d101      	bne.n	800d88c <_strtoul_l.isra.0+0x88>
 800d888:	45a1      	cmp	r9, r4
 800d88a:	db13      	blt.n	800d8b4 <_strtoul_l.isra.0+0xb0>
 800d88c:	2601      	movs	r6, #1
 800d88e:	fb00 4003 	mla	r0, r0, r3, r4
 800d892:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d896:	e7e9      	b.n	800d86c <_strtoul_l.isra.0+0x68>
 800d898:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d89c:	f1bc 0f19 	cmp.w	ip, #25
 800d8a0:	d801      	bhi.n	800d8a6 <_strtoul_l.isra.0+0xa2>
 800d8a2:	3c37      	subs	r4, #55	@ 0x37
 800d8a4:	e7e8      	b.n	800d878 <_strtoul_l.isra.0+0x74>
 800d8a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d8aa:	f1bc 0f19 	cmp.w	ip, #25
 800d8ae:	d804      	bhi.n	800d8ba <_strtoul_l.isra.0+0xb6>
 800d8b0:	3c57      	subs	r4, #87	@ 0x57
 800d8b2:	e7e1      	b.n	800d878 <_strtoul_l.isra.0+0x74>
 800d8b4:	f04f 36ff 	mov.w	r6, #4294967295
 800d8b8:	e7eb      	b.n	800d892 <_strtoul_l.isra.0+0x8e>
 800d8ba:	1c73      	adds	r3, r6, #1
 800d8bc:	d106      	bne.n	800d8cc <_strtoul_l.isra.0+0xc8>
 800d8be:	2322      	movs	r3, #34	@ 0x22
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	f8ce 3000 	str.w	r3, [lr]
 800d8c6:	b932      	cbnz	r2, 800d8d6 <_strtoul_l.isra.0+0xd2>
 800d8c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8cc:	b107      	cbz	r7, 800d8d0 <_strtoul_l.isra.0+0xcc>
 800d8ce:	4240      	negs	r0, r0
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	d0f9      	beq.n	800d8c8 <_strtoul_l.isra.0+0xc4>
 800d8d4:	b106      	cbz	r6, 800d8d8 <_strtoul_l.isra.0+0xd4>
 800d8d6:	1e69      	subs	r1, r5, #1
 800d8d8:	6011      	str	r1, [r2, #0]
 800d8da:	e7f5      	b.n	800d8c8 <_strtoul_l.isra.0+0xc4>
 800d8dc:	0800e8f9 	.word	0x0800e8f9

0800d8e0 <_strtoul_r>:
 800d8e0:	f7ff bf90 	b.w	800d804 <_strtoul_l.isra.0>

0800d8e4 <__ascii_wctomb>:
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	4608      	mov	r0, r1
 800d8e8:	b141      	cbz	r1, 800d8fc <__ascii_wctomb+0x18>
 800d8ea:	2aff      	cmp	r2, #255	@ 0xff
 800d8ec:	d904      	bls.n	800d8f8 <__ascii_wctomb+0x14>
 800d8ee:	228a      	movs	r2, #138	@ 0x8a
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	601a      	str	r2, [r3, #0]
 800d8f6:	4770      	bx	lr
 800d8f8:	2001      	movs	r0, #1
 800d8fa:	700a      	strb	r2, [r1, #0]
 800d8fc:	4770      	bx	lr
	...

0800d900 <__assert_func>:
 800d900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d902:	4614      	mov	r4, r2
 800d904:	461a      	mov	r2, r3
 800d906:	4b09      	ldr	r3, [pc, #36]	@ (800d92c <__assert_func+0x2c>)
 800d908:	4605      	mov	r5, r0
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68d8      	ldr	r0, [r3, #12]
 800d90e:	b14c      	cbz	r4, 800d924 <__assert_func+0x24>
 800d910:	4b07      	ldr	r3, [pc, #28]	@ (800d930 <__assert_func+0x30>)
 800d912:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d916:	9100      	str	r1, [sp, #0]
 800d918:	462b      	mov	r3, r5
 800d91a:	4906      	ldr	r1, [pc, #24]	@ (800d934 <__assert_func+0x34>)
 800d91c:	f000 f832 	bl	800d984 <fiprintf>
 800d920:	f000 f842 	bl	800d9a8 <abort>
 800d924:	4b04      	ldr	r3, [pc, #16]	@ (800d938 <__assert_func+0x38>)
 800d926:	461c      	mov	r4, r3
 800d928:	e7f3      	b.n	800d912 <__assert_func+0x12>
 800d92a:	bf00      	nop
 800d92c:	20000198 	.word	0x20000198
 800d930:	0800e86c 	.word	0x0800e86c
 800d934:	0800e879 	.word	0x0800e879
 800d938:	0800e8a7 	.word	0x0800e8a7

0800d93c <_calloc_r>:
 800d93c:	b570      	push	{r4, r5, r6, lr}
 800d93e:	fba1 5402 	umull	r5, r4, r1, r2
 800d942:	b934      	cbnz	r4, 800d952 <_calloc_r+0x16>
 800d944:	4629      	mov	r1, r5
 800d946:	f7fd f8c1 	bl	800aacc <_malloc_r>
 800d94a:	4606      	mov	r6, r0
 800d94c:	b928      	cbnz	r0, 800d95a <_calloc_r+0x1e>
 800d94e:	4630      	mov	r0, r6
 800d950:	bd70      	pop	{r4, r5, r6, pc}
 800d952:	220c      	movs	r2, #12
 800d954:	2600      	movs	r6, #0
 800d956:	6002      	str	r2, [r0, #0]
 800d958:	e7f9      	b.n	800d94e <_calloc_r+0x12>
 800d95a:	462a      	mov	r2, r5
 800d95c:	4621      	mov	r1, r4
 800d95e:	f7fc ffca 	bl	800a8f6 <memset>
 800d962:	e7f4      	b.n	800d94e <_calloc_r+0x12>

0800d964 <malloc>:
 800d964:	4b02      	ldr	r3, [pc, #8]	@ (800d970 <malloc+0xc>)
 800d966:	4601      	mov	r1, r0
 800d968:	6818      	ldr	r0, [r3, #0]
 800d96a:	f7fd b8af 	b.w	800aacc <_malloc_r>
 800d96e:	bf00      	nop
 800d970:	20000198 	.word	0x20000198

0800d974 <_malloc_usable_size_r>:
 800d974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d978:	1f18      	subs	r0, r3, #4
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	bfbc      	itt	lt
 800d97e:	580b      	ldrlt	r3, [r1, r0]
 800d980:	18c0      	addlt	r0, r0, r3
 800d982:	4770      	bx	lr

0800d984 <fiprintf>:
 800d984:	b40e      	push	{r1, r2, r3}
 800d986:	b503      	push	{r0, r1, lr}
 800d988:	4601      	mov	r1, r0
 800d98a:	ab03      	add	r3, sp, #12
 800d98c:	4805      	ldr	r0, [pc, #20]	@ (800d9a4 <fiprintf+0x20>)
 800d98e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d992:	6800      	ldr	r0, [r0, #0]
 800d994:	9301      	str	r3, [sp, #4]
 800d996:	f000 f835 	bl	800da04 <_vfiprintf_r>
 800d99a:	b002      	add	sp, #8
 800d99c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9a0:	b003      	add	sp, #12
 800d9a2:	4770      	bx	lr
 800d9a4:	20000198 	.word	0x20000198

0800d9a8 <abort>:
 800d9a8:	2006      	movs	r0, #6
 800d9aa:	b508      	push	{r3, lr}
 800d9ac:	f000 f9fe 	bl	800ddac <raise>
 800d9b0:	2001      	movs	r0, #1
 800d9b2:	f7f4 fec4 	bl	800273e <_exit>

0800d9b6 <__sfputc_r>:
 800d9b6:	6893      	ldr	r3, [r2, #8]
 800d9b8:	b410      	push	{r4}
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	6093      	str	r3, [r2, #8]
 800d9c0:	da07      	bge.n	800d9d2 <__sfputc_r+0x1c>
 800d9c2:	6994      	ldr	r4, [r2, #24]
 800d9c4:	42a3      	cmp	r3, r4
 800d9c6:	db01      	blt.n	800d9cc <__sfputc_r+0x16>
 800d9c8:	290a      	cmp	r1, #10
 800d9ca:	d102      	bne.n	800d9d2 <__sfputc_r+0x1c>
 800d9cc:	bc10      	pop	{r4}
 800d9ce:	f000 b931 	b.w	800dc34 <__swbuf_r>
 800d9d2:	6813      	ldr	r3, [r2, #0]
 800d9d4:	1c58      	adds	r0, r3, #1
 800d9d6:	6010      	str	r0, [r2, #0]
 800d9d8:	7019      	strb	r1, [r3, #0]
 800d9da:	4608      	mov	r0, r1
 800d9dc:	bc10      	pop	{r4}
 800d9de:	4770      	bx	lr

0800d9e0 <__sfputs_r>:
 800d9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	460f      	mov	r7, r1
 800d9e6:	4614      	mov	r4, r2
 800d9e8:	18d5      	adds	r5, r2, r3
 800d9ea:	42ac      	cmp	r4, r5
 800d9ec:	d101      	bne.n	800d9f2 <__sfputs_r+0x12>
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	e007      	b.n	800da02 <__sfputs_r+0x22>
 800d9f2:	463a      	mov	r2, r7
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9fa:	f7ff ffdc 	bl	800d9b6 <__sfputc_r>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d1f3      	bne.n	800d9ea <__sfputs_r+0xa>
 800da02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da04 <_vfiprintf_r>:
 800da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	460d      	mov	r5, r1
 800da0a:	4614      	mov	r4, r2
 800da0c:	4698      	mov	r8, r3
 800da0e:	4606      	mov	r6, r0
 800da10:	b09d      	sub	sp, #116	@ 0x74
 800da12:	b118      	cbz	r0, 800da1c <_vfiprintf_r+0x18>
 800da14:	6a03      	ldr	r3, [r0, #32]
 800da16:	b90b      	cbnz	r3, 800da1c <_vfiprintf_r+0x18>
 800da18:	f7fc fea4 	bl	800a764 <__sinit>
 800da1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da1e:	07d9      	lsls	r1, r3, #31
 800da20:	d405      	bmi.n	800da2e <_vfiprintf_r+0x2a>
 800da22:	89ab      	ldrh	r3, [r5, #12]
 800da24:	059a      	lsls	r2, r3, #22
 800da26:	d402      	bmi.n	800da2e <_vfiprintf_r+0x2a>
 800da28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da2a:	f7fc ffde 	bl	800a9ea <__retarget_lock_acquire_recursive>
 800da2e:	89ab      	ldrh	r3, [r5, #12]
 800da30:	071b      	lsls	r3, r3, #28
 800da32:	d501      	bpl.n	800da38 <_vfiprintf_r+0x34>
 800da34:	692b      	ldr	r3, [r5, #16]
 800da36:	b99b      	cbnz	r3, 800da60 <_vfiprintf_r+0x5c>
 800da38:	4629      	mov	r1, r5
 800da3a:	4630      	mov	r0, r6
 800da3c:	f000 f938 	bl	800dcb0 <__swsetup_r>
 800da40:	b170      	cbz	r0, 800da60 <_vfiprintf_r+0x5c>
 800da42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da44:	07dc      	lsls	r4, r3, #31
 800da46:	d504      	bpl.n	800da52 <_vfiprintf_r+0x4e>
 800da48:	f04f 30ff 	mov.w	r0, #4294967295
 800da4c:	b01d      	add	sp, #116	@ 0x74
 800da4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da52:	89ab      	ldrh	r3, [r5, #12]
 800da54:	0598      	lsls	r0, r3, #22
 800da56:	d4f7      	bmi.n	800da48 <_vfiprintf_r+0x44>
 800da58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da5a:	f7fc ffc7 	bl	800a9ec <__retarget_lock_release_recursive>
 800da5e:	e7f3      	b.n	800da48 <_vfiprintf_r+0x44>
 800da60:	2300      	movs	r3, #0
 800da62:	9309      	str	r3, [sp, #36]	@ 0x24
 800da64:	2320      	movs	r3, #32
 800da66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da6a:	2330      	movs	r3, #48	@ 0x30
 800da6c:	f04f 0901 	mov.w	r9, #1
 800da70:	f8cd 800c 	str.w	r8, [sp, #12]
 800da74:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800dc20 <_vfiprintf_r+0x21c>
 800da78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da7c:	4623      	mov	r3, r4
 800da7e:	469a      	mov	sl, r3
 800da80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da84:	b10a      	cbz	r2, 800da8a <_vfiprintf_r+0x86>
 800da86:	2a25      	cmp	r2, #37	@ 0x25
 800da88:	d1f9      	bne.n	800da7e <_vfiprintf_r+0x7a>
 800da8a:	ebba 0b04 	subs.w	fp, sl, r4
 800da8e:	d00b      	beq.n	800daa8 <_vfiprintf_r+0xa4>
 800da90:	465b      	mov	r3, fp
 800da92:	4622      	mov	r2, r4
 800da94:	4629      	mov	r1, r5
 800da96:	4630      	mov	r0, r6
 800da98:	f7ff ffa2 	bl	800d9e0 <__sfputs_r>
 800da9c:	3001      	adds	r0, #1
 800da9e:	f000 80a7 	beq.w	800dbf0 <_vfiprintf_r+0x1ec>
 800daa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800daa4:	445a      	add	r2, fp
 800daa6:	9209      	str	r2, [sp, #36]	@ 0x24
 800daa8:	f89a 3000 	ldrb.w	r3, [sl]
 800daac:	2b00      	cmp	r3, #0
 800daae:	f000 809f 	beq.w	800dbf0 <_vfiprintf_r+0x1ec>
 800dab2:	2300      	movs	r3, #0
 800dab4:	f04f 32ff 	mov.w	r2, #4294967295
 800dab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dabc:	f10a 0a01 	add.w	sl, sl, #1
 800dac0:	9304      	str	r3, [sp, #16]
 800dac2:	9307      	str	r3, [sp, #28]
 800dac4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dac8:	931a      	str	r3, [sp, #104]	@ 0x68
 800daca:	4654      	mov	r4, sl
 800dacc:	2205      	movs	r2, #5
 800dace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad2:	4853      	ldr	r0, [pc, #332]	@ (800dc20 <_vfiprintf_r+0x21c>)
 800dad4:	f7fe fe5a 	bl	800c78c <memchr>
 800dad8:	9a04      	ldr	r2, [sp, #16]
 800dada:	b9d8      	cbnz	r0, 800db14 <_vfiprintf_r+0x110>
 800dadc:	06d1      	lsls	r1, r2, #27
 800dade:	bf44      	itt	mi
 800dae0:	2320      	movmi	r3, #32
 800dae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dae6:	0713      	lsls	r3, r2, #28
 800dae8:	bf44      	itt	mi
 800daea:	232b      	movmi	r3, #43	@ 0x2b
 800daec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daf0:	f89a 3000 	ldrb.w	r3, [sl]
 800daf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800daf6:	d015      	beq.n	800db24 <_vfiprintf_r+0x120>
 800daf8:	4654      	mov	r4, sl
 800dafa:	2000      	movs	r0, #0
 800dafc:	f04f 0c0a 	mov.w	ip, #10
 800db00:	9a07      	ldr	r2, [sp, #28]
 800db02:	4621      	mov	r1, r4
 800db04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db08:	3b30      	subs	r3, #48	@ 0x30
 800db0a:	2b09      	cmp	r3, #9
 800db0c:	d94b      	bls.n	800dba6 <_vfiprintf_r+0x1a2>
 800db0e:	b1b0      	cbz	r0, 800db3e <_vfiprintf_r+0x13a>
 800db10:	9207      	str	r2, [sp, #28]
 800db12:	e014      	b.n	800db3e <_vfiprintf_r+0x13a>
 800db14:	eba0 0308 	sub.w	r3, r0, r8
 800db18:	fa09 f303 	lsl.w	r3, r9, r3
 800db1c:	4313      	orrs	r3, r2
 800db1e:	46a2      	mov	sl, r4
 800db20:	9304      	str	r3, [sp, #16]
 800db22:	e7d2      	b.n	800daca <_vfiprintf_r+0xc6>
 800db24:	9b03      	ldr	r3, [sp, #12]
 800db26:	1d19      	adds	r1, r3, #4
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	9103      	str	r1, [sp, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	bfbb      	ittet	lt
 800db30:	425b      	neglt	r3, r3
 800db32:	f042 0202 	orrlt.w	r2, r2, #2
 800db36:	9307      	strge	r3, [sp, #28]
 800db38:	9307      	strlt	r3, [sp, #28]
 800db3a:	bfb8      	it	lt
 800db3c:	9204      	strlt	r2, [sp, #16]
 800db3e:	7823      	ldrb	r3, [r4, #0]
 800db40:	2b2e      	cmp	r3, #46	@ 0x2e
 800db42:	d10a      	bne.n	800db5a <_vfiprintf_r+0x156>
 800db44:	7863      	ldrb	r3, [r4, #1]
 800db46:	2b2a      	cmp	r3, #42	@ 0x2a
 800db48:	d132      	bne.n	800dbb0 <_vfiprintf_r+0x1ac>
 800db4a:	9b03      	ldr	r3, [sp, #12]
 800db4c:	3402      	adds	r4, #2
 800db4e:	1d1a      	adds	r2, r3, #4
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	9203      	str	r2, [sp, #12]
 800db54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db58:	9305      	str	r3, [sp, #20]
 800db5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800dc24 <_vfiprintf_r+0x220>
 800db5e:	2203      	movs	r2, #3
 800db60:	4650      	mov	r0, sl
 800db62:	7821      	ldrb	r1, [r4, #0]
 800db64:	f7fe fe12 	bl	800c78c <memchr>
 800db68:	b138      	cbz	r0, 800db7a <_vfiprintf_r+0x176>
 800db6a:	2240      	movs	r2, #64	@ 0x40
 800db6c:	9b04      	ldr	r3, [sp, #16]
 800db6e:	eba0 000a 	sub.w	r0, r0, sl
 800db72:	4082      	lsls	r2, r0
 800db74:	4313      	orrs	r3, r2
 800db76:	3401      	adds	r4, #1
 800db78:	9304      	str	r3, [sp, #16]
 800db7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7e:	2206      	movs	r2, #6
 800db80:	4829      	ldr	r0, [pc, #164]	@ (800dc28 <_vfiprintf_r+0x224>)
 800db82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db86:	f7fe fe01 	bl	800c78c <memchr>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d03f      	beq.n	800dc0e <_vfiprintf_r+0x20a>
 800db8e:	4b27      	ldr	r3, [pc, #156]	@ (800dc2c <_vfiprintf_r+0x228>)
 800db90:	bb1b      	cbnz	r3, 800dbda <_vfiprintf_r+0x1d6>
 800db92:	9b03      	ldr	r3, [sp, #12]
 800db94:	3307      	adds	r3, #7
 800db96:	f023 0307 	bic.w	r3, r3, #7
 800db9a:	3308      	adds	r3, #8
 800db9c:	9303      	str	r3, [sp, #12]
 800db9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dba0:	443b      	add	r3, r7
 800dba2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dba4:	e76a      	b.n	800da7c <_vfiprintf_r+0x78>
 800dba6:	460c      	mov	r4, r1
 800dba8:	2001      	movs	r0, #1
 800dbaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbae:	e7a8      	b.n	800db02 <_vfiprintf_r+0xfe>
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	f04f 0c0a 	mov.w	ip, #10
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	3401      	adds	r4, #1
 800dbba:	9305      	str	r3, [sp, #20]
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbc2:	3a30      	subs	r2, #48	@ 0x30
 800dbc4:	2a09      	cmp	r2, #9
 800dbc6:	d903      	bls.n	800dbd0 <_vfiprintf_r+0x1cc>
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d0c6      	beq.n	800db5a <_vfiprintf_r+0x156>
 800dbcc:	9105      	str	r1, [sp, #20]
 800dbce:	e7c4      	b.n	800db5a <_vfiprintf_r+0x156>
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbd8:	e7f0      	b.n	800dbbc <_vfiprintf_r+0x1b8>
 800dbda:	ab03      	add	r3, sp, #12
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	462a      	mov	r2, r5
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4b13      	ldr	r3, [pc, #76]	@ (800dc30 <_vfiprintf_r+0x22c>)
 800dbe4:	a904      	add	r1, sp, #16
 800dbe6:	f3af 8000 	nop.w
 800dbea:	4607      	mov	r7, r0
 800dbec:	1c78      	adds	r0, r7, #1
 800dbee:	d1d6      	bne.n	800db9e <_vfiprintf_r+0x19a>
 800dbf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbf2:	07d9      	lsls	r1, r3, #31
 800dbf4:	d405      	bmi.n	800dc02 <_vfiprintf_r+0x1fe>
 800dbf6:	89ab      	ldrh	r3, [r5, #12]
 800dbf8:	059a      	lsls	r2, r3, #22
 800dbfa:	d402      	bmi.n	800dc02 <_vfiprintf_r+0x1fe>
 800dbfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbfe:	f7fc fef5 	bl	800a9ec <__retarget_lock_release_recursive>
 800dc02:	89ab      	ldrh	r3, [r5, #12]
 800dc04:	065b      	lsls	r3, r3, #25
 800dc06:	f53f af1f 	bmi.w	800da48 <_vfiprintf_r+0x44>
 800dc0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc0c:	e71e      	b.n	800da4c <_vfiprintf_r+0x48>
 800dc0e:	ab03      	add	r3, sp, #12
 800dc10:	9300      	str	r3, [sp, #0]
 800dc12:	462a      	mov	r2, r5
 800dc14:	4630      	mov	r0, r6
 800dc16:	4b06      	ldr	r3, [pc, #24]	@ (800dc30 <_vfiprintf_r+0x22c>)
 800dc18:	a904      	add	r1, sp, #16
 800dc1a:	f7fe f9f7 	bl	800c00c <_printf_i>
 800dc1e:	e7e4      	b.n	800dbea <_vfiprintf_r+0x1e6>
 800dc20:	0800e735 	.word	0x0800e735
 800dc24:	0800e73b 	.word	0x0800e73b
 800dc28:	0800e73f 	.word	0x0800e73f
 800dc2c:	00000000 	.word	0x00000000
 800dc30:	0800d9e1 	.word	0x0800d9e1

0800dc34 <__swbuf_r>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	460e      	mov	r6, r1
 800dc38:	4614      	mov	r4, r2
 800dc3a:	4605      	mov	r5, r0
 800dc3c:	b118      	cbz	r0, 800dc46 <__swbuf_r+0x12>
 800dc3e:	6a03      	ldr	r3, [r0, #32]
 800dc40:	b90b      	cbnz	r3, 800dc46 <__swbuf_r+0x12>
 800dc42:	f7fc fd8f 	bl	800a764 <__sinit>
 800dc46:	69a3      	ldr	r3, [r4, #24]
 800dc48:	60a3      	str	r3, [r4, #8]
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	071a      	lsls	r2, r3, #28
 800dc4e:	d501      	bpl.n	800dc54 <__swbuf_r+0x20>
 800dc50:	6923      	ldr	r3, [r4, #16]
 800dc52:	b943      	cbnz	r3, 800dc66 <__swbuf_r+0x32>
 800dc54:	4621      	mov	r1, r4
 800dc56:	4628      	mov	r0, r5
 800dc58:	f000 f82a 	bl	800dcb0 <__swsetup_r>
 800dc5c:	b118      	cbz	r0, 800dc66 <__swbuf_r+0x32>
 800dc5e:	f04f 37ff 	mov.w	r7, #4294967295
 800dc62:	4638      	mov	r0, r7
 800dc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	b2f6      	uxtb	r6, r6
 800dc6c:	1a98      	subs	r0, r3, r2
 800dc6e:	6963      	ldr	r3, [r4, #20]
 800dc70:	4637      	mov	r7, r6
 800dc72:	4283      	cmp	r3, r0
 800dc74:	dc05      	bgt.n	800dc82 <__swbuf_r+0x4e>
 800dc76:	4621      	mov	r1, r4
 800dc78:	4628      	mov	r0, r5
 800dc7a:	f7fe fcb1 	bl	800c5e0 <_fflush_r>
 800dc7e:	2800      	cmp	r0, #0
 800dc80:	d1ed      	bne.n	800dc5e <__swbuf_r+0x2a>
 800dc82:	68a3      	ldr	r3, [r4, #8]
 800dc84:	3b01      	subs	r3, #1
 800dc86:	60a3      	str	r3, [r4, #8]
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	1c5a      	adds	r2, r3, #1
 800dc8c:	6022      	str	r2, [r4, #0]
 800dc8e:	701e      	strb	r6, [r3, #0]
 800dc90:	6962      	ldr	r2, [r4, #20]
 800dc92:	1c43      	adds	r3, r0, #1
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d004      	beq.n	800dca2 <__swbuf_r+0x6e>
 800dc98:	89a3      	ldrh	r3, [r4, #12]
 800dc9a:	07db      	lsls	r3, r3, #31
 800dc9c:	d5e1      	bpl.n	800dc62 <__swbuf_r+0x2e>
 800dc9e:	2e0a      	cmp	r6, #10
 800dca0:	d1df      	bne.n	800dc62 <__swbuf_r+0x2e>
 800dca2:	4621      	mov	r1, r4
 800dca4:	4628      	mov	r0, r5
 800dca6:	f7fe fc9b 	bl	800c5e0 <_fflush_r>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d0d9      	beq.n	800dc62 <__swbuf_r+0x2e>
 800dcae:	e7d6      	b.n	800dc5e <__swbuf_r+0x2a>

0800dcb0 <__swsetup_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	4b29      	ldr	r3, [pc, #164]	@ (800dd58 <__swsetup_r+0xa8>)
 800dcb4:	4605      	mov	r5, r0
 800dcb6:	6818      	ldr	r0, [r3, #0]
 800dcb8:	460c      	mov	r4, r1
 800dcba:	b118      	cbz	r0, 800dcc4 <__swsetup_r+0x14>
 800dcbc:	6a03      	ldr	r3, [r0, #32]
 800dcbe:	b90b      	cbnz	r3, 800dcc4 <__swsetup_r+0x14>
 800dcc0:	f7fc fd50 	bl	800a764 <__sinit>
 800dcc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcc8:	0719      	lsls	r1, r3, #28
 800dcca:	d422      	bmi.n	800dd12 <__swsetup_r+0x62>
 800dccc:	06da      	lsls	r2, r3, #27
 800dcce:	d407      	bmi.n	800dce0 <__swsetup_r+0x30>
 800dcd0:	2209      	movs	r2, #9
 800dcd2:	602a      	str	r2, [r5, #0]
 800dcd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	e033      	b.n	800dd48 <__swsetup_r+0x98>
 800dce0:	0758      	lsls	r0, r3, #29
 800dce2:	d512      	bpl.n	800dd0a <__swsetup_r+0x5a>
 800dce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dce6:	b141      	cbz	r1, 800dcfa <__swsetup_r+0x4a>
 800dce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dcec:	4299      	cmp	r1, r3
 800dcee:	d002      	beq.n	800dcf6 <__swsetup_r+0x46>
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	f7fc fe81 	bl	800a9f8 <_free_r>
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800dcfa:	89a3      	ldrh	r3, [r4, #12]
 800dcfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd00:	81a3      	strh	r3, [r4, #12]
 800dd02:	2300      	movs	r3, #0
 800dd04:	6063      	str	r3, [r4, #4]
 800dd06:	6923      	ldr	r3, [r4, #16]
 800dd08:	6023      	str	r3, [r4, #0]
 800dd0a:	89a3      	ldrh	r3, [r4, #12]
 800dd0c:	f043 0308 	orr.w	r3, r3, #8
 800dd10:	81a3      	strh	r3, [r4, #12]
 800dd12:	6923      	ldr	r3, [r4, #16]
 800dd14:	b94b      	cbnz	r3, 800dd2a <__swsetup_r+0x7a>
 800dd16:	89a3      	ldrh	r3, [r4, #12]
 800dd18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd20:	d003      	beq.n	800dd2a <__swsetup_r+0x7a>
 800dd22:	4621      	mov	r1, r4
 800dd24:	4628      	mov	r0, r5
 800dd26:	f000 f882 	bl	800de2e <__smakebuf_r>
 800dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2e:	f013 0201 	ands.w	r2, r3, #1
 800dd32:	d00a      	beq.n	800dd4a <__swsetup_r+0x9a>
 800dd34:	2200      	movs	r2, #0
 800dd36:	60a2      	str	r2, [r4, #8]
 800dd38:	6962      	ldr	r2, [r4, #20]
 800dd3a:	4252      	negs	r2, r2
 800dd3c:	61a2      	str	r2, [r4, #24]
 800dd3e:	6922      	ldr	r2, [r4, #16]
 800dd40:	b942      	cbnz	r2, 800dd54 <__swsetup_r+0xa4>
 800dd42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd46:	d1c5      	bne.n	800dcd4 <__swsetup_r+0x24>
 800dd48:	bd38      	pop	{r3, r4, r5, pc}
 800dd4a:	0799      	lsls	r1, r3, #30
 800dd4c:	bf58      	it	pl
 800dd4e:	6962      	ldrpl	r2, [r4, #20]
 800dd50:	60a2      	str	r2, [r4, #8]
 800dd52:	e7f4      	b.n	800dd3e <__swsetup_r+0x8e>
 800dd54:	2000      	movs	r0, #0
 800dd56:	e7f7      	b.n	800dd48 <__swsetup_r+0x98>
 800dd58:	20000198 	.word	0x20000198

0800dd5c <_raise_r>:
 800dd5c:	291f      	cmp	r1, #31
 800dd5e:	b538      	push	{r3, r4, r5, lr}
 800dd60:	4605      	mov	r5, r0
 800dd62:	460c      	mov	r4, r1
 800dd64:	d904      	bls.n	800dd70 <_raise_r+0x14>
 800dd66:	2316      	movs	r3, #22
 800dd68:	6003      	str	r3, [r0, #0]
 800dd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6e:	bd38      	pop	{r3, r4, r5, pc}
 800dd70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd72:	b112      	cbz	r2, 800dd7a <_raise_r+0x1e>
 800dd74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd78:	b94b      	cbnz	r3, 800dd8e <_raise_r+0x32>
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	f000 f830 	bl	800dde0 <_getpid_r>
 800dd80:	4622      	mov	r2, r4
 800dd82:	4601      	mov	r1, r0
 800dd84:	4628      	mov	r0, r5
 800dd86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd8a:	f000 b817 	b.w	800ddbc <_kill_r>
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d00a      	beq.n	800dda8 <_raise_r+0x4c>
 800dd92:	1c59      	adds	r1, r3, #1
 800dd94:	d103      	bne.n	800dd9e <_raise_r+0x42>
 800dd96:	2316      	movs	r3, #22
 800dd98:	6003      	str	r3, [r0, #0]
 800dd9a:	2001      	movs	r0, #1
 800dd9c:	e7e7      	b.n	800dd6e <_raise_r+0x12>
 800dd9e:	2100      	movs	r1, #0
 800dda0:	4620      	mov	r0, r4
 800dda2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dda6:	4798      	blx	r3
 800dda8:	2000      	movs	r0, #0
 800ddaa:	e7e0      	b.n	800dd6e <_raise_r+0x12>

0800ddac <raise>:
 800ddac:	4b02      	ldr	r3, [pc, #8]	@ (800ddb8 <raise+0xc>)
 800ddae:	4601      	mov	r1, r0
 800ddb0:	6818      	ldr	r0, [r3, #0]
 800ddb2:	f7ff bfd3 	b.w	800dd5c <_raise_r>
 800ddb6:	bf00      	nop
 800ddb8:	20000198 	.word	0x20000198

0800ddbc <_kill_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	4d06      	ldr	r5, [pc, #24]	@ (800dddc <_kill_r+0x20>)
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	602b      	str	r3, [r5, #0]
 800ddca:	f7f4 fca8 	bl	800271e <_kill>
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	d102      	bne.n	800ddd8 <_kill_r+0x1c>
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	b103      	cbz	r3, 800ddd8 <_kill_r+0x1c>
 800ddd6:	6023      	str	r3, [r4, #0]
 800ddd8:	bd38      	pop	{r3, r4, r5, pc}
 800ddda:	bf00      	nop
 800dddc:	2000171c 	.word	0x2000171c

0800dde0 <_getpid_r>:
 800dde0:	f7f4 bc96 	b.w	8002710 <_getpid>

0800dde4 <__swhatbuf_r>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	460c      	mov	r4, r1
 800dde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddec:	4615      	mov	r5, r2
 800ddee:	2900      	cmp	r1, #0
 800ddf0:	461e      	mov	r6, r3
 800ddf2:	b096      	sub	sp, #88	@ 0x58
 800ddf4:	da0c      	bge.n	800de10 <__swhatbuf_r+0x2c>
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	2100      	movs	r1, #0
 800ddfa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ddfe:	bf14      	ite	ne
 800de00:	2340      	movne	r3, #64	@ 0x40
 800de02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800de06:	2000      	movs	r0, #0
 800de08:	6031      	str	r1, [r6, #0]
 800de0a:	602b      	str	r3, [r5, #0]
 800de0c:	b016      	add	sp, #88	@ 0x58
 800de0e:	bd70      	pop	{r4, r5, r6, pc}
 800de10:	466a      	mov	r2, sp
 800de12:	f000 f849 	bl	800dea8 <_fstat_r>
 800de16:	2800      	cmp	r0, #0
 800de18:	dbed      	blt.n	800ddf6 <__swhatbuf_r+0x12>
 800de1a:	9901      	ldr	r1, [sp, #4]
 800de1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800de20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800de24:	4259      	negs	r1, r3
 800de26:	4159      	adcs	r1, r3
 800de28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800de2c:	e7eb      	b.n	800de06 <__swhatbuf_r+0x22>

0800de2e <__smakebuf_r>:
 800de2e:	898b      	ldrh	r3, [r1, #12]
 800de30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de32:	079d      	lsls	r5, r3, #30
 800de34:	4606      	mov	r6, r0
 800de36:	460c      	mov	r4, r1
 800de38:	d507      	bpl.n	800de4a <__smakebuf_r+0x1c>
 800de3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800de3e:	6023      	str	r3, [r4, #0]
 800de40:	6123      	str	r3, [r4, #16]
 800de42:	2301      	movs	r3, #1
 800de44:	6163      	str	r3, [r4, #20]
 800de46:	b003      	add	sp, #12
 800de48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de4a:	466a      	mov	r2, sp
 800de4c:	ab01      	add	r3, sp, #4
 800de4e:	f7ff ffc9 	bl	800dde4 <__swhatbuf_r>
 800de52:	9f00      	ldr	r7, [sp, #0]
 800de54:	4605      	mov	r5, r0
 800de56:	4639      	mov	r1, r7
 800de58:	4630      	mov	r0, r6
 800de5a:	f7fc fe37 	bl	800aacc <_malloc_r>
 800de5e:	b948      	cbnz	r0, 800de74 <__smakebuf_r+0x46>
 800de60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de64:	059a      	lsls	r2, r3, #22
 800de66:	d4ee      	bmi.n	800de46 <__smakebuf_r+0x18>
 800de68:	f023 0303 	bic.w	r3, r3, #3
 800de6c:	f043 0302 	orr.w	r3, r3, #2
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	e7e2      	b.n	800de3a <__smakebuf_r+0xc>
 800de74:	89a3      	ldrh	r3, [r4, #12]
 800de76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800de7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de7e:	81a3      	strh	r3, [r4, #12]
 800de80:	9b01      	ldr	r3, [sp, #4]
 800de82:	6020      	str	r0, [r4, #0]
 800de84:	b15b      	cbz	r3, 800de9e <__smakebuf_r+0x70>
 800de86:	4630      	mov	r0, r6
 800de88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de8c:	f000 f81e 	bl	800decc <_isatty_r>
 800de90:	b128      	cbz	r0, 800de9e <__smakebuf_r+0x70>
 800de92:	89a3      	ldrh	r3, [r4, #12]
 800de94:	f023 0303 	bic.w	r3, r3, #3
 800de98:	f043 0301 	orr.w	r3, r3, #1
 800de9c:	81a3      	strh	r3, [r4, #12]
 800de9e:	89a3      	ldrh	r3, [r4, #12]
 800dea0:	431d      	orrs	r5, r3
 800dea2:	81a5      	strh	r5, [r4, #12]
 800dea4:	e7cf      	b.n	800de46 <__smakebuf_r+0x18>
	...

0800dea8 <_fstat_r>:
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	2300      	movs	r3, #0
 800deac:	4d06      	ldr	r5, [pc, #24]	@ (800dec8 <_fstat_r+0x20>)
 800deae:	4604      	mov	r4, r0
 800deb0:	4608      	mov	r0, r1
 800deb2:	4611      	mov	r1, r2
 800deb4:	602b      	str	r3, [r5, #0]
 800deb6:	f7f4 fc91 	bl	80027dc <_fstat>
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	d102      	bne.n	800dec4 <_fstat_r+0x1c>
 800debe:	682b      	ldr	r3, [r5, #0]
 800dec0:	b103      	cbz	r3, 800dec4 <_fstat_r+0x1c>
 800dec2:	6023      	str	r3, [r4, #0]
 800dec4:	bd38      	pop	{r3, r4, r5, pc}
 800dec6:	bf00      	nop
 800dec8:	2000171c 	.word	0x2000171c

0800decc <_isatty_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	2300      	movs	r3, #0
 800ded0:	4d05      	ldr	r5, [pc, #20]	@ (800dee8 <_isatty_r+0x1c>)
 800ded2:	4604      	mov	r4, r0
 800ded4:	4608      	mov	r0, r1
 800ded6:	602b      	str	r3, [r5, #0]
 800ded8:	f7f4 fc8f 	bl	80027fa <_isatty>
 800dedc:	1c43      	adds	r3, r0, #1
 800dede:	d102      	bne.n	800dee6 <_isatty_r+0x1a>
 800dee0:	682b      	ldr	r3, [r5, #0]
 800dee2:	b103      	cbz	r3, 800dee6 <_isatty_r+0x1a>
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	bd38      	pop	{r3, r4, r5, pc}
 800dee8:	2000171c 	.word	0x2000171c

0800deec <acos>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	4604      	mov	r4, r0
 800def0:	460d      	mov	r5, r1
 800def2:	f000 f965 	bl	800e1c0 <__ieee754_acos>
 800def6:	4622      	mov	r2, r4
 800def8:	4606      	mov	r6, r0
 800defa:	460f      	mov	r7, r1
 800defc:	462b      	mov	r3, r5
 800defe:	4620      	mov	r0, r4
 800df00:	4629      	mov	r1, r5
 800df02:	f7f2 fd83 	bl	8000a0c <__aeabi_dcmpun>
 800df06:	b988      	cbnz	r0, 800df2c <acos+0x40>
 800df08:	4620      	mov	r0, r4
 800df0a:	4629      	mov	r1, r5
 800df0c:	f000 f83a 	bl	800df84 <fabs>
 800df10:	2200      	movs	r2, #0
 800df12:	4b08      	ldr	r3, [pc, #32]	@ (800df34 <acos+0x48>)
 800df14:	f7f2 fd70 	bl	80009f8 <__aeabi_dcmpgt>
 800df18:	b140      	cbz	r0, 800df2c <acos+0x40>
 800df1a:	f7fc fd3b 	bl	800a994 <__errno>
 800df1e:	2321      	movs	r3, #33	@ 0x21
 800df20:	6003      	str	r3, [r0, #0]
 800df22:	4805      	ldr	r0, [pc, #20]	@ (800df38 <acos+0x4c>)
 800df24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800df28:	f7fe bc4c 	b.w	800c7c4 <nan>
 800df2c:	4630      	mov	r0, r6
 800df2e:	4639      	mov	r1, r7
 800df30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df32:	bf00      	nop
 800df34:	3ff00000 	.word	0x3ff00000
 800df38:	0800e8a7 	.word	0x0800e8a7

0800df3c <sqrt>:
 800df3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3e:	4606      	mov	r6, r0
 800df40:	460f      	mov	r7, r1
 800df42:	f000 f823 	bl	800df8c <__ieee754_sqrt>
 800df46:	4632      	mov	r2, r6
 800df48:	4604      	mov	r4, r0
 800df4a:	460d      	mov	r5, r1
 800df4c:	463b      	mov	r3, r7
 800df4e:	4630      	mov	r0, r6
 800df50:	4639      	mov	r1, r7
 800df52:	f7f2 fd5b 	bl	8000a0c <__aeabi_dcmpun>
 800df56:	b990      	cbnz	r0, 800df7e <sqrt+0x42>
 800df58:	2200      	movs	r2, #0
 800df5a:	2300      	movs	r3, #0
 800df5c:	4630      	mov	r0, r6
 800df5e:	4639      	mov	r1, r7
 800df60:	f7f2 fd2c 	bl	80009bc <__aeabi_dcmplt>
 800df64:	b158      	cbz	r0, 800df7e <sqrt+0x42>
 800df66:	f7fc fd15 	bl	800a994 <__errno>
 800df6a:	2321      	movs	r3, #33	@ 0x21
 800df6c:	2200      	movs	r2, #0
 800df6e:	6003      	str	r3, [r0, #0]
 800df70:	2300      	movs	r3, #0
 800df72:	4610      	mov	r0, r2
 800df74:	4619      	mov	r1, r3
 800df76:	f7f2 fbd9 	bl	800072c <__aeabi_ddiv>
 800df7a:	4604      	mov	r4, r0
 800df7c:	460d      	mov	r5, r1
 800df7e:	4620      	mov	r0, r4
 800df80:	4629      	mov	r1, r5
 800df82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df84 <fabs>:
 800df84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800df88:	4619      	mov	r1, r3
 800df8a:	4770      	bx	lr

0800df8c <__ieee754_sqrt>:
 800df8c:	4a65      	ldr	r2, [pc, #404]	@ (800e124 <__ieee754_sqrt+0x198>)
 800df8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df92:	438a      	bics	r2, r1
 800df94:	4606      	mov	r6, r0
 800df96:	460f      	mov	r7, r1
 800df98:	460b      	mov	r3, r1
 800df9a:	4604      	mov	r4, r0
 800df9c:	d10e      	bne.n	800dfbc <__ieee754_sqrt+0x30>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	f7f2 fa9a 	bl	80004d8 <__aeabi_dmul>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	4639      	mov	r1, r7
 800dfac:	f7f2 f8de 	bl	800016c <__adddf3>
 800dfb0:	4606      	mov	r6, r0
 800dfb2:	460f      	mov	r7, r1
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbc:	2900      	cmp	r1, #0
 800dfbe:	dc0c      	bgt.n	800dfda <__ieee754_sqrt+0x4e>
 800dfc0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800dfc4:	4302      	orrs	r2, r0
 800dfc6:	d0f5      	beq.n	800dfb4 <__ieee754_sqrt+0x28>
 800dfc8:	b189      	cbz	r1, 800dfee <__ieee754_sqrt+0x62>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	f7f2 f8cc 	bl	8000168 <__aeabi_dsub>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	f7f2 fbaa 	bl	800072c <__aeabi_ddiv>
 800dfd8:	e7ea      	b.n	800dfb0 <__ieee754_sqrt+0x24>
 800dfda:	150a      	asrs	r2, r1, #20
 800dfdc:	d115      	bne.n	800e00a <__ieee754_sqrt+0x7e>
 800dfde:	2100      	movs	r1, #0
 800dfe0:	e009      	b.n	800dff6 <__ieee754_sqrt+0x6a>
 800dfe2:	0ae3      	lsrs	r3, r4, #11
 800dfe4:	3a15      	subs	r2, #21
 800dfe6:	0564      	lsls	r4, r4, #21
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d0fa      	beq.n	800dfe2 <__ieee754_sqrt+0x56>
 800dfec:	e7f7      	b.n	800dfde <__ieee754_sqrt+0x52>
 800dfee:	460a      	mov	r2, r1
 800dff0:	e7fa      	b.n	800dfe8 <__ieee754_sqrt+0x5c>
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	3101      	adds	r1, #1
 800dff6:	02d8      	lsls	r0, r3, #11
 800dff8:	d5fb      	bpl.n	800dff2 <__ieee754_sqrt+0x66>
 800dffa:	1e48      	subs	r0, r1, #1
 800dffc:	1a12      	subs	r2, r2, r0
 800dffe:	f1c1 0020 	rsb	r0, r1, #32
 800e002:	fa24 f000 	lsr.w	r0, r4, r0
 800e006:	4303      	orrs	r3, r0
 800e008:	408c      	lsls	r4, r1
 800e00a:	2700      	movs	r7, #0
 800e00c:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800e010:	2116      	movs	r1, #22
 800e012:	07d2      	lsls	r2, r2, #31
 800e014:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800e018:	463a      	mov	r2, r7
 800e01a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e01e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e022:	bf5c      	itt	pl
 800e024:	005b      	lslpl	r3, r3, #1
 800e026:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800e02a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e02e:	bf58      	it	pl
 800e030:	0064      	lslpl	r4, r4, #1
 800e032:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800e036:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e03a:	0064      	lsls	r4, r4, #1
 800e03c:	1815      	adds	r5, r2, r0
 800e03e:	429d      	cmp	r5, r3
 800e040:	bfde      	ittt	le
 800e042:	182a      	addle	r2, r5, r0
 800e044:	1b5b      	suble	r3, r3, r5
 800e046:	183f      	addle	r7, r7, r0
 800e048:	0fe5      	lsrs	r5, r4, #31
 800e04a:	3901      	subs	r1, #1
 800e04c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e050:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e054:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e058:	d1f0      	bne.n	800e03c <__ieee754_sqrt+0xb0>
 800e05a:	460d      	mov	r5, r1
 800e05c:	2620      	movs	r6, #32
 800e05e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800e062:	4293      	cmp	r3, r2
 800e064:	eb00 0c01 	add.w	ip, r0, r1
 800e068:	dc02      	bgt.n	800e070 <__ieee754_sqrt+0xe4>
 800e06a:	d113      	bne.n	800e094 <__ieee754_sqrt+0x108>
 800e06c:	45a4      	cmp	ip, r4
 800e06e:	d811      	bhi.n	800e094 <__ieee754_sqrt+0x108>
 800e070:	f1bc 0f00 	cmp.w	ip, #0
 800e074:	eb0c 0100 	add.w	r1, ip, r0
 800e078:	da3e      	bge.n	800e0f8 <__ieee754_sqrt+0x16c>
 800e07a:	2900      	cmp	r1, #0
 800e07c:	db3c      	blt.n	800e0f8 <__ieee754_sqrt+0x16c>
 800e07e:	f102 0e01 	add.w	lr, r2, #1
 800e082:	1a9b      	subs	r3, r3, r2
 800e084:	4672      	mov	r2, lr
 800e086:	45a4      	cmp	ip, r4
 800e088:	bf88      	it	hi
 800e08a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e08e:	eba4 040c 	sub.w	r4, r4, ip
 800e092:	4405      	add	r5, r0
 800e094:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800e098:	3e01      	subs	r6, #1
 800e09a:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800e09e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800e0a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800e0a6:	d1dc      	bne.n	800e062 <__ieee754_sqrt+0xd6>
 800e0a8:	431c      	orrs	r4, r3
 800e0aa:	d01a      	beq.n	800e0e2 <__ieee754_sqrt+0x156>
 800e0ac:	4c1e      	ldr	r4, [pc, #120]	@ (800e128 <__ieee754_sqrt+0x19c>)
 800e0ae:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800e12c <__ieee754_sqrt+0x1a0>
 800e0b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e0b6:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e0ba:	f7f2 f855 	bl	8000168 <__aeabi_dsub>
 800e0be:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	4650      	mov	r0, sl
 800e0c8:	4659      	mov	r1, fp
 800e0ca:	f7f2 fc81 	bl	80009d0 <__aeabi_dcmple>
 800e0ce:	b140      	cbz	r0, 800e0e2 <__ieee754_sqrt+0x156>
 800e0d0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e0d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e0d8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e0dc:	d10e      	bne.n	800e0fc <__ieee754_sqrt+0x170>
 800e0de:	4635      	mov	r5, r6
 800e0e0:	3701      	adds	r7, #1
 800e0e2:	107b      	asrs	r3, r7, #1
 800e0e4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0e8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e0ec:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800e0f0:	086b      	lsrs	r3, r5, #1
 800e0f2:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800e0f6:	e75b      	b.n	800dfb0 <__ieee754_sqrt+0x24>
 800e0f8:	4696      	mov	lr, r2
 800e0fa:	e7c2      	b.n	800e082 <__ieee754_sqrt+0xf6>
 800e0fc:	f7f2 f836 	bl	800016c <__adddf3>
 800e100:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800e104:	4602      	mov	r2, r0
 800e106:	460b      	mov	r3, r1
 800e108:	4650      	mov	r0, sl
 800e10a:	4659      	mov	r1, fp
 800e10c:	f7f2 fc56 	bl	80009bc <__aeabi_dcmplt>
 800e110:	b120      	cbz	r0, 800e11c <__ieee754_sqrt+0x190>
 800e112:	1cab      	adds	r3, r5, #2
 800e114:	bf08      	it	eq
 800e116:	3701      	addeq	r7, #1
 800e118:	3502      	adds	r5, #2
 800e11a:	e7e2      	b.n	800e0e2 <__ieee754_sqrt+0x156>
 800e11c:	1c6b      	adds	r3, r5, #1
 800e11e:	f023 0501 	bic.w	r5, r3, #1
 800e122:	e7de      	b.n	800e0e2 <__ieee754_sqrt+0x156>
 800e124:	7ff00000 	.word	0x7ff00000
 800e128:	0800eb00 	.word	0x0800eb00
 800e12c:	0800eaf8 	.word	0x0800eaf8

0800e130 <round>:
 800e130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e132:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e136:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 800e13a:	2a13      	cmp	r2, #19
 800e13c:	4604      	mov	r4, r0
 800e13e:	460d      	mov	r5, r1
 800e140:	460b      	mov	r3, r1
 800e142:	dc1a      	bgt.n	800e17a <round+0x4a>
 800e144:	2a00      	cmp	r2, #0
 800e146:	da0b      	bge.n	800e160 <round+0x30>
 800e148:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800e14c:	3201      	adds	r2, #1
 800e14e:	bf04      	itt	eq
 800e150:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800e154:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800e158:	2200      	movs	r2, #0
 800e15a:	461d      	mov	r5, r3
 800e15c:	4614      	mov	r4, r2
 800e15e:	e016      	b.n	800e18e <round+0x5e>
 800e160:	4815      	ldr	r0, [pc, #84]	@ (800e1b8 <round+0x88>)
 800e162:	4110      	asrs	r0, r2
 800e164:	4001      	ands	r1, r0
 800e166:	4321      	orrs	r1, r4
 800e168:	d011      	beq.n	800e18e <round+0x5e>
 800e16a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800e16e:	fa41 f202 	asr.w	r2, r1, r2
 800e172:	4413      	add	r3, r2
 800e174:	ea23 0300 	bic.w	r3, r3, r0
 800e178:	e7ee      	b.n	800e158 <round+0x28>
 800e17a:	2a33      	cmp	r2, #51	@ 0x33
 800e17c:	dd0a      	ble.n	800e194 <round+0x64>
 800e17e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800e182:	d104      	bne.n	800e18e <round+0x5e>
 800e184:	4602      	mov	r2, r0
 800e186:	f7f1 fff1 	bl	800016c <__adddf3>
 800e18a:	4604      	mov	r4, r0
 800e18c:	460d      	mov	r5, r1
 800e18e:	4620      	mov	r0, r4
 800e190:	4629      	mov	r1, r5
 800e192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e194:	f04f 30ff 	mov.w	r0, #4294967295
 800e198:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800e19c:	40f8      	lsrs	r0, r7
 800e19e:	4220      	tst	r0, r4
 800e1a0:	d0f5      	beq.n	800e18e <round+0x5e>
 800e1a2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	408a      	lsls	r2, r1
 800e1aa:	1912      	adds	r2, r2, r4
 800e1ac:	bf28      	it	cs
 800e1ae:	3301      	addcs	r3, #1
 800e1b0:	ea22 0200 	bic.w	r2, r2, r0
 800e1b4:	e7d1      	b.n	800e15a <round+0x2a>
 800e1b6:	bf00      	nop
 800e1b8:	000fffff 	.word	0x000fffff
 800e1bc:	00000000 	.word	0x00000000

0800e1c0 <__ieee754_acos>:
 800e1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	4cb2      	ldr	r4, [pc, #712]	@ (800e490 <__ieee754_acos+0x2d0>)
 800e1c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e1ca:	42a3      	cmp	r3, r4
 800e1cc:	4606      	mov	r6, r0
 800e1ce:	460f      	mov	r7, r1
 800e1d0:	d915      	bls.n	800e1fe <__ieee754_acos+0x3e>
 800e1d2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800e1d6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800e1da:	4303      	orrs	r3, r0
 800e1dc:	d106      	bne.n	800e1ec <__ieee754_acos+0x2c>
 800e1de:	2900      	cmp	r1, #0
 800e1e0:	f340 8202 	ble.w	800e5e8 <__ieee754_acos+0x428>
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ec:	4602      	mov	r2, r0
 800e1ee:	460b      	mov	r3, r1
 800e1f0:	f7f1 ffba 	bl	8000168 <__aeabi_dsub>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	f7f2 fa98 	bl	800072c <__aeabi_ddiv>
 800e1fc:	e7f4      	b.n	800e1e8 <__ieee754_acos+0x28>
 800e1fe:	4ca5      	ldr	r4, [pc, #660]	@ (800e494 <__ieee754_acos+0x2d4>)
 800e200:	42a3      	cmp	r3, r4
 800e202:	f200 8083 	bhi.w	800e30c <__ieee754_acos+0x14c>
 800e206:	4aa4      	ldr	r2, [pc, #656]	@ (800e498 <__ieee754_acos+0x2d8>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	f240 81f1 	bls.w	800e5f0 <__ieee754_acos+0x430>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	f7f2 f961 	bl	80004d8 <__aeabi_dmul>
 800e216:	a384      	add	r3, pc, #528	@ (adr r3, 800e428 <__ieee754_acos+0x268>)
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	4604      	mov	r4, r0
 800e21e:	460d      	mov	r5, r1
 800e220:	f7f2 f95a 	bl	80004d8 <__aeabi_dmul>
 800e224:	a382      	add	r3, pc, #520	@ (adr r3, 800e430 <__ieee754_acos+0x270>)
 800e226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22a:	f7f1 ff9f 	bl	800016c <__adddf3>
 800e22e:	4622      	mov	r2, r4
 800e230:	462b      	mov	r3, r5
 800e232:	f7f2 f951 	bl	80004d8 <__aeabi_dmul>
 800e236:	a380      	add	r3, pc, #512	@ (adr r3, 800e438 <__ieee754_acos+0x278>)
 800e238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23c:	f7f1 ff94 	bl	8000168 <__aeabi_dsub>
 800e240:	4622      	mov	r2, r4
 800e242:	462b      	mov	r3, r5
 800e244:	f7f2 f948 	bl	80004d8 <__aeabi_dmul>
 800e248:	a37d      	add	r3, pc, #500	@ (adr r3, 800e440 <__ieee754_acos+0x280>)
 800e24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24e:	f7f1 ff8d 	bl	800016c <__adddf3>
 800e252:	4622      	mov	r2, r4
 800e254:	462b      	mov	r3, r5
 800e256:	f7f2 f93f 	bl	80004d8 <__aeabi_dmul>
 800e25a:	a37b      	add	r3, pc, #492	@ (adr r3, 800e448 <__ieee754_acos+0x288>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7f1 ff82 	bl	8000168 <__aeabi_dsub>
 800e264:	4622      	mov	r2, r4
 800e266:	462b      	mov	r3, r5
 800e268:	f7f2 f936 	bl	80004d8 <__aeabi_dmul>
 800e26c:	a378      	add	r3, pc, #480	@ (adr r3, 800e450 <__ieee754_acos+0x290>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	f7f1 ff7b 	bl	800016c <__adddf3>
 800e276:	4622      	mov	r2, r4
 800e278:	462b      	mov	r3, r5
 800e27a:	f7f2 f92d 	bl	80004d8 <__aeabi_dmul>
 800e27e:	a376      	add	r3, pc, #472	@ (adr r3, 800e458 <__ieee754_acos+0x298>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	4680      	mov	r8, r0
 800e286:	4689      	mov	r9, r1
 800e288:	4620      	mov	r0, r4
 800e28a:	4629      	mov	r1, r5
 800e28c:	f7f2 f924 	bl	80004d8 <__aeabi_dmul>
 800e290:	a373      	add	r3, pc, #460	@ (adr r3, 800e460 <__ieee754_acos+0x2a0>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f7f1 ff67 	bl	8000168 <__aeabi_dsub>
 800e29a:	4622      	mov	r2, r4
 800e29c:	462b      	mov	r3, r5
 800e29e:	f7f2 f91b 	bl	80004d8 <__aeabi_dmul>
 800e2a2:	a371      	add	r3, pc, #452	@ (adr r3, 800e468 <__ieee754_acos+0x2a8>)
 800e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a8:	f7f1 ff60 	bl	800016c <__adddf3>
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	f7f2 f912 	bl	80004d8 <__aeabi_dmul>
 800e2b4:	a36e      	add	r3, pc, #440	@ (adr r3, 800e470 <__ieee754_acos+0x2b0>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	f7f1 ff55 	bl	8000168 <__aeabi_dsub>
 800e2be:	4622      	mov	r2, r4
 800e2c0:	462b      	mov	r3, r5
 800e2c2:	f7f2 f909 	bl	80004d8 <__aeabi_dmul>
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	4b74      	ldr	r3, [pc, #464]	@ (800e49c <__ieee754_acos+0x2dc>)
 800e2ca:	f7f1 ff4f 	bl	800016c <__adddf3>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	f7f2 fa29 	bl	800072c <__aeabi_ddiv>
 800e2da:	4632      	mov	r2, r6
 800e2dc:	463b      	mov	r3, r7
 800e2de:	f7f2 f8fb 	bl	80004d8 <__aeabi_dmul>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	a164      	add	r1, pc, #400	@ (adr r1, 800e478 <__ieee754_acos+0x2b8>)
 800e2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ec:	f7f1 ff3c 	bl	8000168 <__aeabi_dsub>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4630      	mov	r0, r6
 800e2f6:	4639      	mov	r1, r7
 800e2f8:	f7f1 ff36 	bl	8000168 <__aeabi_dsub>
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	460b      	mov	r3, r1
 800e300:	a15f      	add	r1, pc, #380	@ (adr r1, 800e480 <__ieee754_acos+0x2c0>)
 800e302:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e306:	f7f1 ff2f 	bl	8000168 <__aeabi_dsub>
 800e30a:	e76d      	b.n	800e1e8 <__ieee754_acos+0x28>
 800e30c:	2900      	cmp	r1, #0
 800e30e:	f280 80c9 	bge.w	800e4a4 <__ieee754_acos+0x2e4>
 800e312:	2200      	movs	r2, #0
 800e314:	4b61      	ldr	r3, [pc, #388]	@ (800e49c <__ieee754_acos+0x2dc>)
 800e316:	f7f1 ff29 	bl	800016c <__adddf3>
 800e31a:	2200      	movs	r2, #0
 800e31c:	4b60      	ldr	r3, [pc, #384]	@ (800e4a0 <__ieee754_acos+0x2e0>)
 800e31e:	f7f2 f8db 	bl	80004d8 <__aeabi_dmul>
 800e322:	a341      	add	r3, pc, #260	@ (adr r3, 800e428 <__ieee754_acos+0x268>)
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	4604      	mov	r4, r0
 800e32a:	460d      	mov	r5, r1
 800e32c:	f7f2 f8d4 	bl	80004d8 <__aeabi_dmul>
 800e330:	a33f      	add	r3, pc, #252	@ (adr r3, 800e430 <__ieee754_acos+0x270>)
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	f7f1 ff19 	bl	800016c <__adddf3>
 800e33a:	4622      	mov	r2, r4
 800e33c:	462b      	mov	r3, r5
 800e33e:	f7f2 f8cb 	bl	80004d8 <__aeabi_dmul>
 800e342:	a33d      	add	r3, pc, #244	@ (adr r3, 800e438 <__ieee754_acos+0x278>)
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	f7f1 ff0e 	bl	8000168 <__aeabi_dsub>
 800e34c:	4622      	mov	r2, r4
 800e34e:	462b      	mov	r3, r5
 800e350:	f7f2 f8c2 	bl	80004d8 <__aeabi_dmul>
 800e354:	a33a      	add	r3, pc, #232	@ (adr r3, 800e440 <__ieee754_acos+0x280>)
 800e356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35a:	f7f1 ff07 	bl	800016c <__adddf3>
 800e35e:	4622      	mov	r2, r4
 800e360:	462b      	mov	r3, r5
 800e362:	f7f2 f8b9 	bl	80004d8 <__aeabi_dmul>
 800e366:	a338      	add	r3, pc, #224	@ (adr r3, 800e448 <__ieee754_acos+0x288>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f7f1 fefc 	bl	8000168 <__aeabi_dsub>
 800e370:	4622      	mov	r2, r4
 800e372:	462b      	mov	r3, r5
 800e374:	f7f2 f8b0 	bl	80004d8 <__aeabi_dmul>
 800e378:	a335      	add	r3, pc, #212	@ (adr r3, 800e450 <__ieee754_acos+0x290>)
 800e37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37e:	f7f1 fef5 	bl	800016c <__adddf3>
 800e382:	4622      	mov	r2, r4
 800e384:	462b      	mov	r3, r5
 800e386:	f7f2 f8a7 	bl	80004d8 <__aeabi_dmul>
 800e38a:	a333      	add	r3, pc, #204	@ (adr r3, 800e458 <__ieee754_acos+0x298>)
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	4606      	mov	r6, r0
 800e392:	460f      	mov	r7, r1
 800e394:	4620      	mov	r0, r4
 800e396:	4629      	mov	r1, r5
 800e398:	f7f2 f89e 	bl	80004d8 <__aeabi_dmul>
 800e39c:	a330      	add	r3, pc, #192	@ (adr r3, 800e460 <__ieee754_acos+0x2a0>)
 800e39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a2:	f7f1 fee1 	bl	8000168 <__aeabi_dsub>
 800e3a6:	4622      	mov	r2, r4
 800e3a8:	462b      	mov	r3, r5
 800e3aa:	f7f2 f895 	bl	80004d8 <__aeabi_dmul>
 800e3ae:	a32e      	add	r3, pc, #184	@ (adr r3, 800e468 <__ieee754_acos+0x2a8>)
 800e3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b4:	f7f1 feda 	bl	800016c <__adddf3>
 800e3b8:	4622      	mov	r2, r4
 800e3ba:	462b      	mov	r3, r5
 800e3bc:	f7f2 f88c 	bl	80004d8 <__aeabi_dmul>
 800e3c0:	a32b      	add	r3, pc, #172	@ (adr r3, 800e470 <__ieee754_acos+0x2b0>)
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	f7f1 fecf 	bl	8000168 <__aeabi_dsub>
 800e3ca:	4622      	mov	r2, r4
 800e3cc:	462b      	mov	r3, r5
 800e3ce:	f7f2 f883 	bl	80004d8 <__aeabi_dmul>
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	4b31      	ldr	r3, [pc, #196]	@ (800e49c <__ieee754_acos+0x2dc>)
 800e3d6:	f7f1 fec9 	bl	800016c <__adddf3>
 800e3da:	4680      	mov	r8, r0
 800e3dc:	4689      	mov	r9, r1
 800e3de:	4620      	mov	r0, r4
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	f7ff fdd3 	bl	800df8c <__ieee754_sqrt>
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	4642      	mov	r2, r8
 800e3ec:	464b      	mov	r3, r9
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	f7f2 f99b 	bl	800072c <__aeabi_ddiv>
 800e3f6:	4622      	mov	r2, r4
 800e3f8:	462b      	mov	r3, r5
 800e3fa:	f7f2 f86d 	bl	80004d8 <__aeabi_dmul>
 800e3fe:	a31e      	add	r3, pc, #120	@ (adr r3, 800e478 <__ieee754_acos+0x2b8>)
 800e400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e404:	f7f1 feb0 	bl	8000168 <__aeabi_dsub>
 800e408:	4622      	mov	r2, r4
 800e40a:	462b      	mov	r3, r5
 800e40c:	f7f1 feae 	bl	800016c <__adddf3>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	f7f1 feaa 	bl	800016c <__adddf3>
 800e418:	4602      	mov	r2, r0
 800e41a:	460b      	mov	r3, r1
 800e41c:	a11a      	add	r1, pc, #104	@ (adr r1, 800e488 <__ieee754_acos+0x2c8>)
 800e41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e422:	e770      	b.n	800e306 <__ieee754_acos+0x146>
 800e424:	f3af 8000 	nop.w
 800e428:	0dfdf709 	.word	0x0dfdf709
 800e42c:	3f023de1 	.word	0x3f023de1
 800e430:	7501b288 	.word	0x7501b288
 800e434:	3f49efe0 	.word	0x3f49efe0
 800e438:	b5688f3b 	.word	0xb5688f3b
 800e43c:	3fa48228 	.word	0x3fa48228
 800e440:	0e884455 	.word	0x0e884455
 800e444:	3fc9c155 	.word	0x3fc9c155
 800e448:	03eb6f7d 	.word	0x03eb6f7d
 800e44c:	3fd4d612 	.word	0x3fd4d612
 800e450:	55555555 	.word	0x55555555
 800e454:	3fc55555 	.word	0x3fc55555
 800e458:	b12e9282 	.word	0xb12e9282
 800e45c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e460:	1b8d0159 	.word	0x1b8d0159
 800e464:	3fe6066c 	.word	0x3fe6066c
 800e468:	9c598ac8 	.word	0x9c598ac8
 800e46c:	40002ae5 	.word	0x40002ae5
 800e470:	1c8a2d4b 	.word	0x1c8a2d4b
 800e474:	40033a27 	.word	0x40033a27
 800e478:	33145c07 	.word	0x33145c07
 800e47c:	3c91a626 	.word	0x3c91a626
 800e480:	54442d18 	.word	0x54442d18
 800e484:	3ff921fb 	.word	0x3ff921fb
 800e488:	54442d18 	.word	0x54442d18
 800e48c:	400921fb 	.word	0x400921fb
 800e490:	3fefffff 	.word	0x3fefffff
 800e494:	3fdfffff 	.word	0x3fdfffff
 800e498:	3c600000 	.word	0x3c600000
 800e49c:	3ff00000 	.word	0x3ff00000
 800e4a0:	3fe00000 	.word	0x3fe00000
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	496b      	ldr	r1, [pc, #428]	@ (800e658 <__ieee754_acos+0x498>)
 800e4ac:	f7f1 fe5c 	bl	8000168 <__aeabi_dsub>
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	4b6a      	ldr	r3, [pc, #424]	@ (800e65c <__ieee754_acos+0x49c>)
 800e4b4:	f7f2 f810 	bl	80004d8 <__aeabi_dmul>
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	460d      	mov	r5, r1
 800e4bc:	f7ff fd66 	bl	800df8c <__ieee754_sqrt>
 800e4c0:	a34d      	add	r3, pc, #308	@ (adr r3, 800e5f8 <__ieee754_acos+0x438>)
 800e4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c6:	4689      	mov	r9, r1
 800e4c8:	4680      	mov	r8, r0
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7f2 f803 	bl	80004d8 <__aeabi_dmul>
 800e4d2:	a34b      	add	r3, pc, #300	@ (adr r3, 800e600 <__ieee754_acos+0x440>)
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	f7f1 fe48 	bl	800016c <__adddf3>
 800e4dc:	4622      	mov	r2, r4
 800e4de:	462b      	mov	r3, r5
 800e4e0:	f7f1 fffa 	bl	80004d8 <__aeabi_dmul>
 800e4e4:	a348      	add	r3, pc, #288	@ (adr r3, 800e608 <__ieee754_acos+0x448>)
 800e4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ea:	f7f1 fe3d 	bl	8000168 <__aeabi_dsub>
 800e4ee:	4622      	mov	r2, r4
 800e4f0:	462b      	mov	r3, r5
 800e4f2:	f7f1 fff1 	bl	80004d8 <__aeabi_dmul>
 800e4f6:	a346      	add	r3, pc, #280	@ (adr r3, 800e610 <__ieee754_acos+0x450>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f1 fe36 	bl	800016c <__adddf3>
 800e500:	4622      	mov	r2, r4
 800e502:	462b      	mov	r3, r5
 800e504:	f7f1 ffe8 	bl	80004d8 <__aeabi_dmul>
 800e508:	a343      	add	r3, pc, #268	@ (adr r3, 800e618 <__ieee754_acos+0x458>)
 800e50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50e:	f7f1 fe2b 	bl	8000168 <__aeabi_dsub>
 800e512:	4622      	mov	r2, r4
 800e514:	462b      	mov	r3, r5
 800e516:	f7f1 ffdf 	bl	80004d8 <__aeabi_dmul>
 800e51a:	a341      	add	r3, pc, #260	@ (adr r3, 800e620 <__ieee754_acos+0x460>)
 800e51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e520:	f7f1 fe24 	bl	800016c <__adddf3>
 800e524:	4622      	mov	r2, r4
 800e526:	462b      	mov	r3, r5
 800e528:	f7f1 ffd6 	bl	80004d8 <__aeabi_dmul>
 800e52c:	a33e      	add	r3, pc, #248	@ (adr r3, 800e628 <__ieee754_acos+0x468>)
 800e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e532:	4682      	mov	sl, r0
 800e534:	468b      	mov	fp, r1
 800e536:	4620      	mov	r0, r4
 800e538:	4629      	mov	r1, r5
 800e53a:	f7f1 ffcd 	bl	80004d8 <__aeabi_dmul>
 800e53e:	a33c      	add	r3, pc, #240	@ (adr r3, 800e630 <__ieee754_acos+0x470>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	f7f1 fe10 	bl	8000168 <__aeabi_dsub>
 800e548:	4622      	mov	r2, r4
 800e54a:	462b      	mov	r3, r5
 800e54c:	f7f1 ffc4 	bl	80004d8 <__aeabi_dmul>
 800e550:	a339      	add	r3, pc, #228	@ (adr r3, 800e638 <__ieee754_acos+0x478>)
 800e552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e556:	f7f1 fe09 	bl	800016c <__adddf3>
 800e55a:	4622      	mov	r2, r4
 800e55c:	462b      	mov	r3, r5
 800e55e:	f7f1 ffbb 	bl	80004d8 <__aeabi_dmul>
 800e562:	a337      	add	r3, pc, #220	@ (adr r3, 800e640 <__ieee754_acos+0x480>)
 800e564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e568:	f7f1 fdfe 	bl	8000168 <__aeabi_dsub>
 800e56c:	4622      	mov	r2, r4
 800e56e:	462b      	mov	r3, r5
 800e570:	f7f1 ffb2 	bl	80004d8 <__aeabi_dmul>
 800e574:	2200      	movs	r2, #0
 800e576:	4b38      	ldr	r3, [pc, #224]	@ (800e658 <__ieee754_acos+0x498>)
 800e578:	f7f1 fdf8 	bl	800016c <__adddf3>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	4650      	mov	r0, sl
 800e582:	4659      	mov	r1, fp
 800e584:	f7f2 f8d2 	bl	800072c <__aeabi_ddiv>
 800e588:	4642      	mov	r2, r8
 800e58a:	464b      	mov	r3, r9
 800e58c:	f7f1 ffa4 	bl	80004d8 <__aeabi_dmul>
 800e590:	2600      	movs	r6, #0
 800e592:	4682      	mov	sl, r0
 800e594:	468b      	mov	fp, r1
 800e596:	4632      	mov	r2, r6
 800e598:	464b      	mov	r3, r9
 800e59a:	4630      	mov	r0, r6
 800e59c:	4649      	mov	r1, r9
 800e59e:	f7f1 ff9b 	bl	80004d8 <__aeabi_dmul>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	f7f1 fddd 	bl	8000168 <__aeabi_dsub>
 800e5ae:	4632      	mov	r2, r6
 800e5b0:	4604      	mov	r4, r0
 800e5b2:	460d      	mov	r5, r1
 800e5b4:	464b      	mov	r3, r9
 800e5b6:	4640      	mov	r0, r8
 800e5b8:	4649      	mov	r1, r9
 800e5ba:	f7f1 fdd7 	bl	800016c <__adddf3>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	4629      	mov	r1, r5
 800e5c6:	f7f2 f8b1 	bl	800072c <__aeabi_ddiv>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4650      	mov	r0, sl
 800e5d0:	4659      	mov	r1, fp
 800e5d2:	f7f1 fdcb 	bl	800016c <__adddf3>
 800e5d6:	4632      	mov	r2, r6
 800e5d8:	464b      	mov	r3, r9
 800e5da:	f7f1 fdc7 	bl	800016c <__adddf3>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	f7f1 fdc3 	bl	800016c <__adddf3>
 800e5e6:	e5ff      	b.n	800e1e8 <__ieee754_acos+0x28>
 800e5e8:	a117      	add	r1, pc, #92	@ (adr r1, 800e648 <__ieee754_acos+0x488>)
 800e5ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ee:	e5fb      	b.n	800e1e8 <__ieee754_acos+0x28>
 800e5f0:	a117      	add	r1, pc, #92	@ (adr r1, 800e650 <__ieee754_acos+0x490>)
 800e5f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5f6:	e5f7      	b.n	800e1e8 <__ieee754_acos+0x28>
 800e5f8:	0dfdf709 	.word	0x0dfdf709
 800e5fc:	3f023de1 	.word	0x3f023de1
 800e600:	7501b288 	.word	0x7501b288
 800e604:	3f49efe0 	.word	0x3f49efe0
 800e608:	b5688f3b 	.word	0xb5688f3b
 800e60c:	3fa48228 	.word	0x3fa48228
 800e610:	0e884455 	.word	0x0e884455
 800e614:	3fc9c155 	.word	0x3fc9c155
 800e618:	03eb6f7d 	.word	0x03eb6f7d
 800e61c:	3fd4d612 	.word	0x3fd4d612
 800e620:	55555555 	.word	0x55555555
 800e624:	3fc55555 	.word	0x3fc55555
 800e628:	b12e9282 	.word	0xb12e9282
 800e62c:	3fb3b8c5 	.word	0x3fb3b8c5
 800e630:	1b8d0159 	.word	0x1b8d0159
 800e634:	3fe6066c 	.word	0x3fe6066c
 800e638:	9c598ac8 	.word	0x9c598ac8
 800e63c:	40002ae5 	.word	0x40002ae5
 800e640:	1c8a2d4b 	.word	0x1c8a2d4b
 800e644:	40033a27 	.word	0x40033a27
 800e648:	54442d18 	.word	0x54442d18
 800e64c:	400921fb 	.word	0x400921fb
 800e650:	54442d18 	.word	0x54442d18
 800e654:	3ff921fb 	.word	0x3ff921fb
 800e658:	3ff00000 	.word	0x3ff00000
 800e65c:	3fe00000 	.word	0x3fe00000

0800e660 <_init>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	bf00      	nop
 800e664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e666:	bc08      	pop	{r3}
 800e668:	469e      	mov	lr, r3
 800e66a:	4770      	bx	lr

0800e66c <_fini>:
 800e66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66e:	bf00      	nop
 800e670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e672:	bc08      	pop	{r3}
 800e674:	469e      	mov	lr, r3
 800e676:	4770      	bx	lr
